{"swagger": "2.0", "info": {"title": "Syncwerk API", "description": "", "version": ""}, "paths": {"/api/v2.1/address-book/groups/{group_id}/search-member/": {"get": {"tags": ["api"], "responses": {"200": {"description": ""}}, "parameters": [{"description": "", "required": true, "type": "string", "name": "group_id", "in": "path"}], "operationId": "api_v2.1_address-book_groups_search-member_list"}}, "/api/v2.1/address-book/groups/{group_id}/sub-groups/": {"get": {"tags": ["api"], "responses": {"200": {"description": ""}}, "parameters": [{"description": "", "required": true, "type": "string", "name": "group_id", "in": "path"}], "operationId": "api_v2.1_address-book_groups_sub-groups_list"}}, "/api/v2.1/admin/address-book/groups/": {"get": {"description": "List top groups in address book.", "parameters": [], "tags": ["api"], "summary": "List top groups in address book.", "operationId": "api_v2.1_admin_address-book_groups_list", "responses": {"200": {"description": ""}}}, "post": {"description": "Add a group in address book.\n\nparent_group: -1 - no parent group;\n              > 0 - have parent group.\ngroup_owner: default to system admin\ngroup_staff: default to system admin", "parameters": [], "tags": ["api"], "summary": "Add a group in address book.", "operationId": "api_v2.1_admin_address-book_groups_create", "responses": {"201": {"description": ""}}}}, "/api/v2.1/admin/address-book/groups/{group_id}/": {"get": {"description": "List child groups and members in an address book group.", "parameters": [{"description": "", "required": true, "type": "string", "name": "group_id", "in": "path"}], "tags": ["api"], "summary": "List child groups and members in an address book group.", "operationId": "api_v2.1_admin_address-book_groups_read", "responses": {"200": {"description": ""}}}, "delete": {"description": "Delete an address book group.", "parameters": [{"description": "", "required": true, "type": "string", "name": "group_id", "in": "path"}], "tags": ["api"], "summary": "Delete an address book group.", "operationId": "api_v2.1_admin_address-book_groups_delete", "responses": {"204": {"description": ""}}}}, "/api/v2.1/admin/admin-login-logs/": {"get": {"tags": ["api"], "responses": {"200": {"description": ""}}, "parameters": [], "operationId": "api_v2.1_admin_admin-login-logs_list"}}, "/api/v2.1/admin/admin-logs/": {"get": {"description": "List all logs\n\nPermission checking:\n1. Admin user;", "parameters": [], "tags": ["api"], "summary": "List all logs", "operationId": "api_v2.1_admin_admin-logs_list", "responses": {"200": {"description": ""}}}}, "/api/v2.1/admin/admin-role/": {"get": {"description": "Get role info of an admin user.\n\nPermission checking:\n1. only admin can perform this action.\n2. email(from argument): must be an admin user.", "parameters": [], "tags": ["api"], "summary": "Get role info of an admin user.", "operationId": "api_v2.1_admin_admin-role_list", "responses": {"200": {"description": ""}}}, "post": {"description": "Add role for an admin user.\n\nArgument checking:\n1. role: must be in get_available_admin_roles.\n\nPermission checking:\n1. email(from argument): must be an admin user.\n2. only admin with `default_admin` role can perform this action.", "parameters": [], "tags": ["api"], "summary": "Add role for an admin user.", "operationId": "api_v2.1_admin_admin-role_create", "responses": {"201": {"description": ""}}}, "put": {"description": "Update role for an admin user.\n\nArgument checking:\n1. role: must be in get_available_admin_roles.\n\nPermission checking:\n1. email(from argument): must be an admin user.\n2. only admin with `default_admin` role can perform this action.", "parameters": [], "tags": ["api"], "summary": "Update role for an admin user.", "operationId": "api_v2.1_admin_admin-role_update", "responses": {"200": {"description": ""}}}}, "/api/v2.1/admin/default-library/": {"get": {"description": "Get info of common user's default library.\n\nPermission checking:\n1. only admin can perform this action.", "parameters": [], "tags": ["api"], "summary": "Get info of common user's default library.", "operationId": "api_v2.1_admin_default-library_list", "responses": {"200": {"description": ""}}}, "post": {"description": "Create a default library for a common user.\n\nPermission checking:\n1. only admin can perform this action.", "parameters": [], "tags": ["api"], "summary": "Create a default library for a common user.", "operationId": "api_v2.1_admin_default-library_create", "responses": {"201": {"description": ""}}}}, "/api/v2.1/admin/device-errors/": {"get": {"tags": ["api"], "responses": {"200": {"description": ""}}, "parameters": [], "operationId": "api_v2.1_admin_device-errors_list"}, "delete": {"tags": ["api"], "responses": {"204": {"description": ""}}, "parameters": [], "operationId": "api_v2.1_admin_device-errors_delete"}}, "/api/v2.1/admin/device-trusted-ip/": {"get": {"tags": ["api"], "responses": {"200": {"description": ""}}, "parameters": [], "operationId": "api_v2.1_admin_device-trusted-ip_list"}, "post": {"tags": ["api"], "responses": {"201": {"description": ""}}, "parameters": [], "operationId": "api_v2.1_admin_device-trusted-ip_create"}, "delete": {"tags": ["api"], "responses": {"204": {"description": ""}}, "parameters": [], "operationId": "api_v2.1_admin_device-trusted-ip_delete"}}, "/api/v2.1/admin/devices/": {"get": {"tags": ["api"], "responses": {"200": {"description": ""}}, "parameters": [], "operationId": "api_v2.1_admin_devices_list"}, "delete": {"tags": ["api"], "responses": {"204": {"description": ""}}, "parameters": [], "operationId": "api_v2.1_admin_devices_delete"}}, "/api/v2.1/admin/favicon/": {"post": {"tags": ["api"], "responses": {"201": {"description": ""}}, "parameters": [], "operationId": "api_v2.1_admin_favicon_create"}}, "/api/v2.1/admin/groups/": {"get": {"description": "List all groups / search group by name\n\nPermission checking:\n1. Admin user;", "parameters": [], "tags": ["api"], "summary": "List all groups / search group by name", "operationId": "api_v2.1_admin_groups_list", "responses": {"200": {"description": ""}}}, "post": {"description": "Create a group\n\nPermission checking:\n1. Admin user;", "parameters": [], "tags": ["api"], "summary": "Create a group", "operationId": "api_v2.1_admin_groups_create", "responses": {"201": {"description": ""}}}}, "/api/v2.1/admin/groups/{group_id}/": {"put": {"description": "Admin update a group\n\n1. transfer a group.\n2. set group quota\n\nPermission checking:\n1. Admin user;", "parameters": [{"description": "", "required": true, "type": "string", "name": "group_id", "in": "path"}], "tags": ["api"], "summary": "Admin update a group", "operationId": "api_v2.1_admin_groups_update", "responses": {"200": {"description": ""}}}, "delete": {"description": "Dismiss a specific group", "parameters": [{"description": "", "required": true, "type": "string", "name": "group_id", "in": "path"}], "tags": ["api"], "summary": "Dismiss a specific group", "operationId": "api_v2.1_admin_groups_delete", "responses": {"204": {"description": ""}}}}, "/api/v2.1/admin/groups/{group_id}/group-owned-libraries/": {"post": {"tags": ["api"], "responses": {"201": {"description": ""}}, "parameters": [{"description": "", "required": true, "type": "string", "name": "group_id", "in": "path"}], "operationId": "api_v2.1_admin_groups_group-owned-libraries_create"}}, "/api/v2.1/admin/groups/{group_id}/group-owned-libraries/{repo_id}/": {"delete": {"tags": ["api"], "responses": {"204": {"description": ""}}, "parameters": [{"description": "", "required": true, "type": "string", "name": "repo_id", "in": "path"}, {"description": "", "required": true, "type": "string", "name": "group_id", "in": "path"}], "operationId": "api_v2.1_admin_groups_group-owned-libraries_delete"}}, "/api/v2.1/admin/groups/{group_id}/libraries/": {"get": {"description": "List all group repos\n\nPermission checking:\n1. only admin can perform this action.", "parameters": [{"description": "", "required": true, "type": "string", "name": "group_id", "in": "path"}], "tags": ["api"], "summary": "List all group repos", "operationId": "api_v2.1_admin_groups_libraries_list", "responses": {"200": {"description": ""}}}}, "/api/v2.1/admin/groups/{group_id}/libraries/{repo_id}/": {"delete": {"description": "Unshare repo from group\n\nPermission checking:\n1. only admin can perform this action.", "parameters": [{"description": "", "required": true, "type": "string", "name": "repo_id", "in": "path"}, {"description": "", "required": true, "type": "string", "name": "group_id", "in": "path"}], "tags": ["api"], "summary": "Unshare repo from group", "operationId": "api_v2.1_admin_groups_libraries_delete", "responses": {"204": {"description": ""}}}}, "/api/v2.1/admin/groups/{group_id}/members/": {"get": {"description": "List all group members\n\nPermission checking:\n1. only admin can perform this action.", "parameters": [{"description": "", "required": true, "type": "string", "name": "group_id", "in": "path"}], "tags": ["api"], "summary": "List all group members", "operationId": "api_v2.1_admin_groups_members_list", "responses": {"200": {"description": ""}}}, "post": {"description": "Bulk add group members.\n\nPermission checking:\n1. only admin can perform this action.", "parameters": [{"description": "", "required": true, "type": "string", "name": "group_id", "in": "path"}], "tags": ["api"], "summary": "Bulk add group members.", "operationId": "api_v2.1_admin_groups_members_create", "responses": {"201": {"description": ""}}}}, "/api/v2.1/admin/groups/{group_id}/members/{email}/": {"put": {"description": "update role of a group member\n\nPermission checking:\n1. only admin can perform this action.", "parameters": [{"description": "", "required": true, "type": "string", "name": "group_id", "in": "path"}, {"description": "", "required": true, "type": "string", "name": "email", "in": "path"}], "tags": ["api"], "summary": "update role of a group member", "operationId": "api_v2.1_admin_groups_members_update", "responses": {"200": {"description": ""}}}, "delete": {"description": "Delete an user from group\n\nPermission checking:\n1. only admin can perform this action.", "parameters": [{"description": "", "required": true, "type": "string", "name": "group_id", "in": "path"}, {"description": "", "required": true, "type": "string", "name": "email", "in": "path"}], "tags": ["api"], "summary": "Delete an user from group", "operationId": "api_v2.1_admin_groups_members_delete", "responses": {"204": {"description": ""}}}}, "/api/v2.1/admin/invitations/": {"delete": {"tags": ["api"], "responses": {"204": {"description": ""}}, "parameters": [], "operationId": "api_v2.1_admin_invitations_delete"}}, "/api/v2.1/admin/libraries/": {"get": {"description": "List 'all' libraries (by name/owner/page)\n\nPermission checking:\n1. only admin can perform this action.", "parameters": [], "tags": ["api"], "summary": "List 'all' libraries (by name/owner/page)", "operationId": "api_v2.1_admin_libraries_list", "responses": {"200": {"description": ""}}}, "post": {"description": "Admin create library\n\nPermission checking:\n1. only admin can perform this action.", "parameters": [], "tags": ["api"], "summary": "Admin create library", "operationId": "api_v2.1_admin_libraries_create", "responses": {"201": {"description": ""}}}}, "/api/v2.1/admin/libraries/{repo_id}/": {"get": {"description": "get info of a library\n\nPermission checking:\n1. only admin can perform this action.", "parameters": [{"description": "", "required": true, "type": "string", "name": "repo_id", "in": "path"}], "tags": ["api"], "summary": "get info of a library", "operationId": "api_v2.1_admin_libraries_read", "responses": {"200": {"description": ""}}}, "put": {"description": "transfer a library\n\nPermission checking:\n1. only admin can perform this action.", "parameters": [{"description": "", "required": true, "type": "string", "name": "repo_id", "in": "path"}], "tags": ["api"], "summary": "transfer a library", "operationId": "api_v2.1_admin_libraries_update", "responses": {"200": {"description": ""}}}, "delete": {"description": "delete a library\n\nPermission checking:\n1. only admin can perform this action.", "parameters": [{"description": "", "required": true, "type": "string", "name": "repo_id", "in": "path"}], "tags": ["api"], "summary": "delete a library", "operationId": "api_v2.1_admin_libraries_delete", "responses": {"204": {"description": ""}}}}, "/api/v2.1/admin/libraries/{repo_id}/dirent/": {"get": {"tags": ["api"], "responses": {"200": {"description": ""}}, "parameters": [{"description": "", "required": true, "type": "string", "name": "repo_id", "in": "path"}], "operationId": "api_v2.1_admin_libraries_dirent_list"}, "put": {"tags": ["api"], "responses": {"200": {"description": ""}}, "parameters": [{"description": "", "required": true, "type": "string", "name": "repo_id", "in": "path"}], "operationId": "api_v2.1_admin_libraries_dirent_update"}, "delete": {"tags": ["api"], "responses": {"204": {"description": ""}}, "parameters": [{"description": "", "required": true, "type": "string", "name": "repo_id", "in": "path"}], "operationId": "api_v2.1_admin_libraries_dirent_delete"}}, "/api/v2.1/admin/libraries/{repo_id}/dirents/": {"get": {"tags": ["api"], "responses": {"200": {"description": ""}}, "parameters": [{"description": "", "required": true, "type": "string", "name": "repo_id", "in": "path"}], "operationId": "api_v2.1_admin_libraries_dirents_list"}, "post": {"tags": ["api"], "responses": {"201": {"description": ""}}, "parameters": [{"description": "", "required": true, "type": "string", "name": "repo_id", "in": "path"}], "operationId": "api_v2.1_admin_libraries_dirents_create"}}, "/api/v2.1/admin/libraries/{repo_id}/history-limit/": {"get": {"tags": ["api"], "responses": {"200": {"description": ""}}, "parameters": [{"description": "", "required": true, "type": "string", "name": "repo_id", "in": "path"}], "operationId": "api_v2.1_admin_libraries_history-limit_list"}, "put": {"tags": ["api"], "responses": {"200": {"description": ""}}, "parameters": [{"description": "", "required": true, "type": "string", "name": "repo_id", "in": "path"}], "operationId": "api_v2.1_admin_libraries_history-limit_update"}}, "/api/v2.1/admin/license/": {"post": {"tags": ["api"], "responses": {"201": {"description": ""}}, "parameters": [], "operationId": "api_v2.1_admin_license_create"}}, "/api/v2.1/admin/login-background-image/": {"post": {"tags": ["api"], "responses": {"201": {"description": ""}}, "parameters": [], "operationId": "api_v2.1_admin_login-background-image_create"}}, "/api/v2.1/admin/logo/": {"post": {"tags": ["api"], "responses": {"201": {"description": ""}}, "parameters": [], "operationId": "api_v2.1_admin_logo_create"}}, "/api/v2.1/admin/organizations/{org_id}/": {"get": {"description": "Get base info of a organization\n\nPermission checking:\n1. only admin can perform this action.", "parameters": [{"description": "", "required": true, "type": "string", "name": "org_id", "in": "path"}], "tags": ["api"], "summary": "Get base info of a organization", "operationId": "api_v2.1_admin_organizations_read", "responses": {"200": {"description": ""}}}, "put": {"description": "Update base info of a organization\n\nPermission checking:\n1. only admin can perform this action.", "parameters": [{"description": "", "required": true, "type": "string", "name": "org_id", "in": "path"}], "tags": ["api"], "summary": "Update base info of a organization", "operationId": "api_v2.1_admin_organizations_update", "responses": {"200": {"description": ""}}}, "delete": {"description": "Delete an organization\n\nPermission checking:\n1. only admin can perform this action.", "parameters": [{"description": "", "required": true, "type": "string", "name": "org_id", "in": "path"}], "tags": ["api"], "summary": "Delete an organization", "operationId": "api_v2.1_admin_organizations_delete", "responses": {"204": {"description": ""}}}}, "/api/v2.1/admin/organizations/{org_id}/statistics/traffic/": {"get": {"tags": ["api"], "responses": {"200": {"description": ""}}, "parameters": [{"description": "", "required": true, "type": "string", "name": "org_id", "in": "path"}], "operationId": "api_v2.1_admin_organizations_statistics_traffic_list"}}, "/api/v2.1/admin/organizations/{org_id}/users/": {"post": {"description": "Add new user to org.\n\nPermission checking:\n1. only admin can perform this action.", "parameters": [{"description": "", "required": true, "type": "string", "name": "org_id", "in": "path"}], "tags": ["api"], "summary": "Add new user to org.", "operationId": "api_v2.1_admin_organizations_users_create", "responses": {"201": {"description": ""}}}}, "/api/v2.1/admin/organizations/{org_id}/users/{email}/": {"get": {"tags": ["api"], "responses": {"200": {"description": ""}}, "parameters": [{"description": "", "required": true, "type": "string", "name": "org_id", "in": "path"}, {"description": "", "required": true, "type": "string", "name": "email", "in": "path"}], "operationId": "api_v2.1_admin_organizations_users_read"}, "put": {"tags": ["api"], "responses": {"200": {"description": ""}}, "parameters": [{"description": "", "required": true, "type": "string", "name": "org_id", "in": "path"}, {"description": "", "required": true, "type": "string", "name": "email", "in": "path"}], "operationId": "api_v2.1_admin_organizations_users_update"}, "delete": {"tags": ["api"], "responses": {"204": {"description": ""}}, "parameters": [{"description": "", "required": true, "type": "string", "name": "org_id", "in": "path"}, {"description": "", "required": true, "type": "string", "name": "email", "in": "path"}], "operationId": "api_v2.1_admin_organizations_users_delete"}}, "/api/v2.1/admin/revision-tags/tagged-items/": {"get": {"tags": ["api"], "responses": {"200": {"description": ""}}, "parameters": [], "operationId": "api_v2.1_admin_revision-tags_tagged-items_list"}}, "/api/v2.1/admin/share-links/{token}/": {"get": {"description": "Get a special share link info.\n\nPermission checking:\n1. only admin can perform this action.", "parameters": [{"description": "", "required": true, "type": "string", "name": "token", "in": "path"}], "tags": ["api"], "summary": "Get a special share link info.", "operationId": "api_v2.1_admin_share-links_read", "responses": {"200": {"description": ""}}}}, "/api/v2.1/admin/share-links/{token}/check-password/": {"post": {"description": "Check if password for an encrypted share link is correct.\n\nPermission checking:\n1. only admin can perform this action.", "parameters": [{"description": "", "required": true, "type": "string", "name": "token", "in": "path"}], "tags": ["api"], "summary": "Check if password for an encrypted share link is correct.", "operationId": "api_v2.1_admin_share-links_check-password_create", "responses": {"201": {"description": ""}}}}, "/api/v2.1/admin/share-links/{token}/dirents/": {"get": {"description": "Get dirents of shared download dir.\n\nPermission checking:\n1. only admin can perform this action.", "parameters": [{"description": "", "required": true, "type": "string", "name": "token", "in": "path"}], "tags": ["api"], "summary": "Get dirents of shared download dir.", "operationId": "api_v2.1_admin_share-links_dirents_list", "responses": {"200": {"description": ""}}}}, "/api/v2.1/admin/share-links/{token}/download/": {"get": {"description": "Get FileServer download url of the shared file/dir.\n\nPermission checking:\n1. only admin can perform this action.", "parameters": [{"description": "", "required": true, "type": "string", "name": "token", "in": "path"}], "tags": ["api"], "summary": "Get FileServer download url of the shared file/dir.", "operationId": "api_v2.1_admin_share-links_download_list", "responses": {"200": {"description": ""}}}}, "/api/v2.1/admin/shares/": {"get": {"tags": ["api"], "responses": {"200": {"description": ""}}, "parameters": [], "operationId": "api_v2.1_admin_shares_list"}, "post": {"tags": ["api"], "responses": {"201": {"description": ""}}, "parameters": [], "operationId": "api_v2.1_admin_shares_create"}, "put": {"tags": ["api"], "responses": {"200": {"description": ""}}, "parameters": [], "operationId": "api_v2.1_admin_shares_update"}, "delete": {"tags": ["api"], "responses": {"204": {"description": ""}}, "parameters": [], "operationId": "api_v2.1_admin_shares_delete"}}, "/api/v2.1/admin/statistics/active-users/": {"get": {"tags": ["api"], "responses": {"200": {"description": ""}}, "parameters": [], "operationId": "api_v2.1_admin_statistics_active-users_list"}}, "/api/v2.1/admin/statistics/file-operations/": {"get": {"description": "Get file operations statistics.\nPermission checking:\n1. only admin can perform this action.", "parameters": [], "tags": ["api"], "summary": "Get file operations statistics.", "operationId": "api_v2.1_admin_statistics_file-operations_list", "responses": {"200": {"description": ""}}}}, "/api/v2.1/admin/statistics/system-traffic/": {"get": {"tags": ["api"], "responses": {"200": {"description": ""}}, "parameters": [], "operationId": "api_v2.1_admin_statistics_system-traffic_list"}}, "/api/v2.1/admin/statistics/total-storage/": {"get": {"tags": ["api"], "responses": {"200": {"description": ""}}, "parameters": [], "operationId": "api_v2.1_admin_statistics_total-storage_list"}}, "/api/v2.1/admin/sysinfo/": {"get": {"description": "Show system info.", "parameters": [], "tags": ["api"], "summary": "Show system info.", "operationId": "api_v2.1_admin_sysinfo_list", "responses": {"200": {"description": ""}}}}, "/api/v2.1/admin/system-library/": {"get": {"tags": ["api"], "responses": {"200": {"description": ""}}, "parameters": [], "operationId": "api_v2.1_admin_system-library_list"}}, "/api/v2.1/admin/system-library/upload-link/": {"get": {"tags": ["api"], "responses": {"200": {"description": ""}}, "parameters": [], "operationId": "api_v2.1_admin_system-library_upload-link_list"}}, "/api/v2.1/admin/trash-libraries/": {"get": {"description": "List deleted repos (by owner)\n\nPermission checking:\n1. only admin can perform this action.", "parameters": [], "tags": ["api"], "summary": "List deleted repos (by owner)", "operationId": "api_v2.1_admin_trash-libraries_list", "responses": {"200": {"description": ""}}}}, "/api/v2.1/admin/trash-libraries/{repo_id}/": {"put": {"description": "restore a deleted library\n\nPermission checking:\n1. only admin can perform this action.", "parameters": [{"description": "", "required": true, "type": "string", "name": "repo_id", "in": "path"}], "tags": ["api"], "summary": "restore a deleted library", "operationId": "api_v2.1_admin_trash-libraries_update", "responses": {"200": {"description": ""}}}, "delete": {"description": "permanently delete a deleted library\n\nPermission checking:\n1. only admin can perform this action.", "parameters": [{"description": "", "required": true, "type": "string", "name": "repo_id", "in": "path"}], "tags": ["api"], "summary": "permanently delete a deleted library", "operationId": "api_v2.1_admin_trash-libraries_delete", "responses": {"204": {"description": ""}}}}, "/api/v2.1/admin/upload-links/{token}/": {"get": {"description": "Get a special upload link info.\n\nPermission checking:\n1. only admin can perform this action.", "parameters": [{"description": "", "required": true, "type": "string", "name": "token", "in": "path"}], "tags": ["api"], "summary": "Get a special upload link info.", "operationId": "api_v2.1_admin_upload-links_read", "responses": {"200": {"description": ""}}}}, "/api/v2.1/admin/upload-links/{token}/check-password/": {"post": {"description": "Check if password for an encrypted upload link is correct.\n\nPermission checking:\n1. only admin can perform this action.", "parameters": [{"description": "", "required": true, "type": "string", "name": "token", "in": "path"}], "tags": ["api"], "summary": "Check if password for an encrypted upload link is correct.", "operationId": "api_v2.1_admin_upload-links_check-password_create", "responses": {"201": {"description": ""}}}}, "/api/v2.1/admin/upload-links/{token}/upload/": {"get": {"description": "Get FileServer url of the shared folder.\n\nPermission checking:\n1. only admin can perform this action.", "parameters": [{"description": "", "required": true, "type": "string", "name": "token", "in": "path"}], "tags": ["api"], "summary": "Get FileServer url of the shared folder.", "operationId": "api_v2.1_admin_upload-links_upload_list", "responses": {"200": {"description": ""}}}}, "/api/v2.1/admin/users/": {"get": {"tags": ["api"], "responses": {"200": {"description": ""}}, "parameters": [], "operationId": "api_v2.1_admin_users_list"}, "post": {"tags": ["api"], "responses": {"201": {"description": ""}}, "parameters": [], "operationId": "api_v2.1_admin_users_create"}}, "/api/v2.1/admin/users/batch/": {"post": {"description": "Set user quota, set user tenant, delete users, in batch.\n\nPermission checking:\n1. admin user.", "parameters": [], "tags": ["api"], "summary": "Set user quota, set user tenant, delete users, in batch.", "operationId": "api_v2.1_admin_users_batch_create", "responses": {"201": {"description": ""}}}}, "/api/v2.1/admin/users/{email}/": {"get": {"tags": ["api"], "responses": {"200": {"description": ""}}, "parameters": [{"description": "", "required": true, "type": "string", "name": "email", "in": "path"}], "operationId": "api_v2.1_admin_users_read"}, "put": {"tags": ["api"], "responses": {"200": {"description": ""}}, "parameters": [{"description": "", "required": true, "type": "string", "name": "email", "in": "path"}], "operationId": "api_v2.1_admin_users_update"}, "delete": {"tags": ["api"], "responses": {"204": {"description": ""}}, "parameters": [{"description": "", "required": true, "type": "string", "name": "email", "in": "path"}], "operationId": "api_v2.1_admin_users_delete"}}, "/api/v2.1/all-groups/": {"get": {"description": "List all groups in system.", "parameters": [], "tags": ["api"], "summary": "List all groups in system.", "operationId": "api_v2.1_all-groups_list", "responses": {"200": {"description": ""}}}}, "/api/v2.1/cancel-zip-task/": {"post": {"description": "stop progress when download dir/multi.\nPermission checking:", "parameters": [], "tags": ["api"], "summary": "stop progress when download dir/multi.", "operationId": "api_v2.1_cancel-zip-task_create", "responses": {"201": {"description": ""}}}}, "/api/v2.1/copy-move-task/": {"post": {"description": "Copy/move file/dir, and return task id.\n\nPermission checking:\n1. move: user with 'rw' permission for current file, 'rw' permission for dst parent dir;\n2. copy: user with 'r' permission for current file, 'rw' permission for dst parent dir;", "parameters": [], "tags": ["api"], "summary": "Copy/move file/dir, and return task id.", "operationId": "api_v2.1_copy-move-task_create", "responses": {"201": {"description": ""}}}, "delete": {"description": "Cancel file/dir mv/cp.\n\nPermission checking:\n1. user login;", "parameters": [], "tags": ["api"], "summary": "Cancel file/dir mv/cp.", "operationId": "api_v2.1_copy-move-task_delete", "responses": {"204": {"description": ""}}}}, "/api/v2.1/deleted-repos/": {"get": {"description": "get the deleted-repos of owner", "parameters": [], "tags": ["api"], "summary": "get the deleted-repos of owner", "operationId": "api_v2.1_deleted-repos_list", "responses": {"200": {"description": ""}}}, "post": {"description": "restore deleted-repo\n    return:\n        return True if success, otherwise api_error", "parameters": [], "tags": ["api"], "summary": "restore deleted-repo", "operationId": "api_v2.1_deleted-repos_create", "responses": {"201": {"description": ""}}}}, "/api/v2.1/group-owned-libraries/{repo_id}/group-folder-permission/": {"get": {"description": "List repo group folder perms (by folder_path).\n\nPermission checking:\n1. is group admin", "parameters": [{"description": "", "required": true, "type": "string", "name": "repo_id", "in": "path"}], "tags": ["api"], "summary": "List repo group folder perms (by folder_path).", "operationId": "api_v2.1_group-owned-libraries_group-folder-permission_list", "responses": {"200": {"description": ""}}}, "post": {"description": "Add repo group folder perm.\n\nPermission checking:\n1. is group admin", "parameters": [{"description": "", "required": true, "type": "string", "name": "repo_id", "in": "path"}], "tags": ["api"], "summary": "Add repo group folder perm.", "operationId": "api_v2.1_group-owned-libraries_group-folder-permission_create", "responses": {"201": {"description": ""}}}, "put": {"description": "Modify repo group folder perm.\n\nPermission checking:\n1. is group admin", "parameters": [{"description": "", "required": true, "type": "string", "name": "repo_id", "in": "path"}], "tags": ["api"], "summary": "Modify repo group folder perm.", "operationId": "api_v2.1_group-owned-libraries_group-folder-permission_update", "responses": {"200": {"description": ""}}}, "delete": {"description": "Delete repo group folder perm.\n\nPermission checking:\n1. is group admin", "parameters": [{"description": "", "required": true, "type": "string", "name": "repo_id", "in": "path"}], "tags": ["api"], "summary": "Delete repo group folder perm.", "operationId": "api_v2.1_group-owned-libraries_group-folder-permission_delete", "responses": {"204": {"description": ""}}}}, "/api/v2.1/group-owned-libraries/{repo_id}/group-share/": {"get": {"description": "List repo group share info.\n\nPermission checking:\n1. is group admin", "parameters": [{"description": "", "required": true, "type": "string", "name": "repo_id", "in": "path"}], "tags": ["api"], "summary": "List repo group share info.", "operationId": "api_v2.1_group-owned-libraries_group-share_list", "responses": {"200": {"description": ""}}}, "post": {"tags": ["api"], "responses": {"201": {"description": ""}}, "parameters": [{"description": "", "required": true, "type": "string", "name": "repo_id", "in": "path"}], "operationId": "api_v2.1_group-owned-libraries_group-share_create"}, "put": {"tags": ["api"], "responses": {"200": {"description": ""}}, "parameters": [{"description": "", "required": true, "type": "string", "name": "repo_id", "in": "path"}], "operationId": "api_v2.1_group-owned-libraries_group-share_update"}, "delete": {"tags": ["api"], "responses": {"204": {"description": ""}}, "parameters": [{"description": "", "required": true, "type": "string", "name": "repo_id", "in": "path"}], "operationId": "api_v2.1_group-owned-libraries_group-share_delete"}}, "/api/v2.1/group-owned-libraries/{repo_id}/user-folder-permission/": {"get": {"description": "List repo user folder perms (by folder_path).\n\nPermission checking:\n1. is group admin", "parameters": [{"description": "", "required": true, "type": "string", "name": "repo_id", "in": "path"}], "tags": ["api"], "summary": "List repo user folder perms (by folder_path).", "operationId": "api_v2.1_group-owned-libraries_user-folder-permission_list", "responses": {"200": {"description": ""}}}, "post": {"description": "Add repo user folder perm.\n\nPermission checking:\n1. is group admin", "parameters": [{"description": "", "required": true, "type": "string", "name": "repo_id", "in": "path"}], "tags": ["api"], "summary": "Add repo user folder perm.", "operationId": "api_v2.1_group-owned-libraries_user-folder-permission_create", "responses": {"201": {"description": ""}}}, "put": {"description": "Modify repo user folder perm.\n\nPermission checking:\n1. is group admin", "parameters": [{"description": "", "required": true, "type": "string", "name": "repo_id", "in": "path"}], "tags": ["api"], "summary": "Modify repo user folder perm.", "operationId": "api_v2.1_group-owned-libraries_user-folder-permission_update", "responses": {"200": {"description": ""}}}, "delete": {"description": "Delete repo user folder perm.\n\nPermission checking:\n1. is group admin", "parameters": [{"description": "", "required": true, "type": "string", "name": "repo_id", "in": "path"}], "tags": ["api"], "summary": "Delete repo user folder perm.", "operationId": "api_v2.1_group-owned-libraries_user-folder-permission_delete", "responses": {"204": {"description": ""}}}}, "/api/v2.1/group-owned-libraries/{repo_id}/user-share/": {"get": {"description": "List repo user share info.\n\nPermission checking:\n1. is group admin", "parameters": [{"description": "", "required": true, "type": "string", "name": "repo_id", "in": "path"}], "tags": ["api"], "summary": "List repo user share info.", "operationId": "api_v2.1_group-owned-libraries_user-share_list", "responses": {"200": {"description": ""}}}, "post": {"tags": ["api"], "responses": {"201": {"description": ""}}, "parameters": [{"description": "", "required": true, "type": "string", "name": "repo_id", "in": "path"}], "operationId": "api_v2.1_group-owned-libraries_user-share_create"}, "put": {"tags": ["api"], "responses": {"200": {"description": ""}}, "parameters": [{"description": "", "required": true, "type": "string", "name": "repo_id", "in": "path"}], "operationId": "api_v2.1_group-owned-libraries_user-share_update"}, "delete": {"tags": ["api"], "responses": {"204": {"description": ""}}, "parameters": [{"description": "", "required": true, "type": "string", "name": "repo_id", "in": "path"}], "operationId": "api_v2.1_group-owned-libraries_user-share_delete"}}, "/api/v2.1/groups/": {"get": {"description": "List all groups.", "parameters": [], "tags": ["api"], "summary": "List all groups.", "operationId": "api_v2.1_groups_list", "responses": {"200": {"description": ""}}}, "post": {"description": "Create a group", "parameters": [], "tags": ["api"], "summary": "Create a group", "operationId": "api_v2.1_groups_create", "responses": {"201": {"description": ""}}}}, "/api/v2.1/groups/{group_id}/": {"get": {"tags": ["api"], "responses": {"200": {"description": ""}}, "parameters": [{"description": "", "required": true, "type": "string", "name": "group_id", "in": "path"}], "operationId": "api_v2.1_groups_read"}, "put": {"tags": ["api"], "responses": {"200": {"description": ""}}, "parameters": [{"description": "", "required": true, "type": "string", "name": "group_id", "in": "path"}], "operationId": "api_v2.1_groups_update"}, "delete": {"tags": ["api"], "responses": {"204": {"description": ""}}, "parameters": [{"description": "", "required": true, "type": "string", "name": "group_id", "in": "path"}], "operationId": "api_v2.1_groups_delete"}}, "/api/v2.1/groups/{group_id}/group-owned-libraries/": {"post": {"tags": ["api"], "responses": {"201": {"description": ""}}, "parameters": [{"description": "", "required": true, "type": "string", "name": "group_id", "in": "path"}], "operationId": "api_v2.1_groups_group-owned-libraries_create"}}, "/api/v2.1/groups/{group_id}/group-owned-libraries/{repo_id}/": {"put": {"tags": ["api"], "responses": {"200": {"description": ""}}, "parameters": [{"description": "", "required": true, "type": "string", "name": "repo_id", "in": "path"}, {"description": "", "required": true, "type": "string", "name": "group_id", "in": "path"}], "operationId": "api_v2.1_groups_group-owned-libraries_update"}, "delete": {"tags": ["api"], "responses": {"204": {"description": ""}}, "parameters": [{"description": "", "required": true, "type": "string", "name": "repo_id", "in": "path"}, {"description": "", "required": true, "type": "string", "name": "group_id", "in": "path"}], "operationId": "api_v2.1_groups_group-owned-libraries_delete"}}, "/api/v2.1/groups/{group_id}/libraries/": {"get": {"tags": ["api"], "responses": {"200": {"description": ""}}, "parameters": [{"description": "", "required": true, "type": "string", "name": "group_id", "in": "path"}], "operationId": "api_v2.1_groups_libraries_list"}, "post": {"tags": ["api"], "responses": {"201": {"description": ""}}, "parameters": [{"description": "", "required": true, "type": "string", "name": "group_id", "in": "path"}], "operationId": "api_v2.1_groups_libraries_create"}}, "/api/v2.1/groups/{group_id}/libraries/{repo_id}/": {"delete": {"tags": ["api"], "responses": {"204": {"description": ""}}, "parameters": [{"description": "", "required": true, "type": "string", "name": "repo_id", "in": "path"}, {"description": "", "required": true, "type": "string", "name": "group_id", "in": "path"}], "operationId": "api_v2.1_groups_libraries_delete"}}, "/api/v2.1/groups/{group_id}/members/": {"get": {"tags": ["api"], "responses": {"200": {"description": ""}}, "parameters": [{"description": "", "required": true, "type": "string", "name": "group_id", "in": "path"}], "operationId": "api_v2.1_groups_members_list"}, "post": {"tags": ["api"], "responses": {"201": {"description": ""}}, "parameters": [{"description": "", "required": true, "type": "string", "name": "group_id", "in": "path"}], "operationId": "api_v2.1_groups_members_create"}}, "/api/v2.1/groups/{group_id}/members/bulk/": {"post": {"tags": ["api"], "responses": {"201": {"description": ""}}, "parameters": [{"description": "", "required": true, "type": "string", "name": "group_id", "in": "path"}], "operationId": "api_v2.1_groups_members_bulk_create"}}, "/api/v2.1/groups/{group_id}/members/{email}/": {"get": {"tags": ["api"], "responses": {"200": {"description": ""}}, "parameters": [{"description": "", "required": true, "type": "string", "name": "group_id", "in": "path"}, {"description": "", "required": true, "type": "string", "name": "email", "in": "path"}], "operationId": "api_v2.1_groups_members_read"}, "put": {"tags": ["api"], "responses": {"200": {"description": ""}}, "parameters": [{"description": "", "required": true, "type": "string", "name": "group_id", "in": "path"}, {"description": "", "required": true, "type": "string", "name": "email", "in": "path"}], "operationId": "api_v2.1_groups_members_update"}, "delete": {"tags": ["api"], "responses": {"204": {"description": ""}}, "parameters": [{"description": "", "required": true, "type": "string", "name": "group_id", "in": "path"}, {"description": "", "required": true, "type": "string", "name": "email", "in": "path"}], "operationId": "api_v2.1_groups_members_delete"}}, "/api/v2.1/invitations/": {"get": {"tags": ["api"], "responses": {"200": {"description": ""}}, "parameters": [], "operationId": "api_v2.1_invitations_list"}, "post": {"tags": ["api"], "responses": {"201": {"description": ""}}, "parameters": [], "operationId": "api_v2.1_invitations_create"}}, "/api/v2.1/invitations/batch/": {"post": {"tags": ["api"], "responses": {"201": {"description": ""}}, "parameters": [], "operationId": "api_v2.1_invitations_batch_create"}}, "/api/v2.1/invitations/{token}/": {"get": {"tags": ["api"], "responses": {"200": {"description": ""}}, "parameters": [{"description": "", "required": true, "type": "string", "name": "token", "in": "path"}], "operationId": "api_v2.1_invitations_read"}, "delete": {"tags": ["api"], "responses": {"204": {"description": ""}}, "parameters": [{"description": "", "required": true, "type": "string", "name": "token", "in": "path"}], "operationId": "api_v2.1_invitations_delete"}}, "/api/v2.1/move-folder-merge/": {"post": {"description": "Only support move folder.\n\nPermission checking:\n\nUser with 'rw' permission for src/dst folder.", "parameters": [], "tags": ["api"], "summary": "Only support move folder.", "operationId": "api_v2.1_move-folder-merge_create", "responses": {"201": {"description": ""}}}}, "/api/v2.1/notification/": {"put": {"description": "currently only used for mark a notification seen\n\nPermission checking:\n1. login user.", "parameters": [], "tags": ["api"], "summary": "currently only used for mark a notification seen", "operationId": "api_v2.1_notification_update", "responses": {"200": {"description": ""}}}}, "/api/v2.1/notifications/": {"get": {"description": "currently only used for get unseen notifications count\n\nPermission checking:\n1. login user.", "parameters": [], "tags": ["api"], "summary": "currently only used for get unseen notifications count", "operationId": "api_v2.1_notifications_list", "responses": {"200": {"description": ""}}}, "put": {"description": "currently only used for mark all notifications seen\n\nPermission checking:\n1. login user.", "parameters": [], "tags": ["api"], "summary": "currently only used for mark all notifications seen", "operationId": "api_v2.1_notifications_update", "responses": {"200": {"description": ""}}}}, "/api/v2.1/query-copy-move-progress/": {"get": {"description": "Fetch progress of file/dir mv/cp.\n\nPermission checking:\n1. user login;", "parameters": [], "tags": ["api"], "summary": "Fetch progress of file/dir mv/cp.", "operationId": "api_v2.1_query-copy-move-progress_list", "responses": {"200": {"description": ""}}}}, "/api/v2.1/query-zip-progress/": {"get": {"description": "check progress when download dir/multi.\n\nPermission checking:", "parameters": [], "tags": ["api"], "summary": "check progress when download dir/multi.", "operationId": "api_v2.1_query-zip-progress_list", "responses": {"200": {"description": ""}}}}, "/api/v2.1/repos/batch-copy-dir/": {"post": {"description": "Multi copy folders.\n\nPermission checking:\n1. User must has `r/rw` permission for src folder.\n2. User must has `rw` permission for dst folder.\n\nParameter:\n{\n    \"src_repo_id\":\"7460f7ac-a0ff-4585-8906-bb5a57d2e118\",\n    \"dst_repo_id\":\"a3fa768d-0f00-4343-8b8d-07b4077881db\",\n    \"paths\":[\n        {\"src_path\":\"/1/2/3/\",\"dst_path\":\"/4/5/6/\"},\n        {\"src_path\":\"/a/b/c/\",\"dst_path\":\"/d/e/f/\"},\n    ]\n}", "parameters": [], "tags": ["api"], "summary": "Multi copy folders.", "operationId": "api_v2.1_repos_batch-copy-dir_create", "responses": {"201": {"description": ""}}}}, "/api/v2.1/repos/batch-copy-item/": {"post": {"description": "Multi copy files/folders.\nPermission checking:\n1. User must has `r/rw` permission for src folder.\n2. User must has `rw` permission for dst folder.\nParameter:\n{\n    \"src_repo_id\":\"7460f7ac-a0ff-4585-8906-bb5a57d2e118\",\n    \"dst_repo_id\":\"a3fa768d-0f00-4343-8b8d-07b4077881db\",\n    \"paths\":[\n        {\"src_path\":\"/1/2/3/\",\"dst_path\":\"/4/5/6/\"},\n        {\"src_path\":\"/a/b/c/\",\"dst_path\":\"/d/e/f/\"},\n    ]\n}", "parameters": [], "tags": ["api"], "summary": "Multi copy files/folders.", "operationId": "api_v2.1_repos_batch-copy-item_create", "responses": {"201": {"description": ""}}}}, "/api/v2.1/repos/batch-create-dir/": {"post": {"description": "Multi create folders.\n\nPermission checking:\n1. user with `rw` permission for every layer of subdirectories.\n\nParameter:\n{\n    \"repo_id\": \"4dfdf5b6-806f-4a35-b2b7-604051d2114e\",\n    \"paths\": [\"/1/2/\", \"/3/4/\", \"/5/6\"]\n}", "parameters": [], "tags": ["api"], "summary": "Multi create folders.", "operationId": "api_v2.1_repos_batch-create-dir_create", "responses": {"201": {"description": ""}}}}, "/api/v2.1/repos/batch-move-item/": {"post": {"description": "Multi move files/folders.\nPermission checking:\n1. User must has `rw` permission for src folder.\n2. User must has `rw` permission for dst folder.\nParameter:\n{\n    \"src_repo_id\":\"7460f7ac-a0ff-4585-8906-bb5a57d2e118\",\n    \"dst_repo_id\":\"a3fa768d-0f00-4343-8b8d-07b4077881db\",\n    \"paths\":[\n        {\"src_path\":\"/1/2/3/\",\"dst_path\":\"/4/5/6/\"},\n        {\"src_path\":\"/a/b/c/\",\"dst_path\":\"/d/e/f/\"},\n    ]\n}", "parameters": [], "tags": ["api"], "summary": "Multi move files/folders.", "operationId": "api_v2.1_repos_batch-move-item_create", "responses": {"201": {"description": ""}}}}, "/api/v2.1/repos/batch/": {"post": {"tags": ["api"], "responses": {"201": {"description": ""}}, "parameters": [], "operationId": "api_v2.1_repos_batch_create"}}, "/api/v2.1/repos/{repo_id}/": {"get": {"description": "Return repo info\n\nPermission checking:\n1. all authenticated user can perform this action.", "parameters": [{"description": "", "required": true, "type": "string", "name": "repo_id", "in": "path"}], "tags": ["api"], "summary": "Return repo info", "operationId": "api_v2.1_repos_read", "responses": {"200": {"description": ""}}}}, "/api/v2.1/repos/{repo_id}/dir/": {"get": {"description": "Get dir info.\n\nPermission checking:\n1. user with either 'r' or 'rw' permission.", "parameters": [{"description": "", "required": true, "type": "string", "name": "repo_id", "in": "path"}], "tags": ["api"], "summary": "Get dir info.", "operationId": "api_v2.1_repos_dir_list", "responses": {"200": {"description": ""}}}, "post": {"description": "Create, rename, revert dir.\n\nPermission checking:\n1. create: user with 'rw' permission for current dir's parent dir;\n2. rename: user with 'rw' permission for current dir;\n3. revert: user with 'rw' permission for current dir's parent dir;", "parameters": [{"description": "", "required": true, "type": "string", "name": "repo_id", "in": "path"}], "tags": ["api"], "summary": "Create, rename, revert dir.", "operationId": "api_v2.1_repos_dir_create", "responses": {"201": {"description": ""}}}, "delete": {"description": "Delete dir.\n\nPermission checking:\n1. user with 'rw' permission.", "parameters": [{"description": "", "required": true, "type": "string", "name": "repo_id", "in": "path"}], "tags": ["api"], "summary": "Delete dir.", "operationId": "api_v2.1_repos_dir_delete", "responses": {"204": {"description": ""}}}}, "/api/v2.1/repos/{repo_id}/dir/detail/": {"get": {"description": "Get dir info.\n\nPermission checking:\n1. user with either 'r' or 'rw' permission.", "parameters": [{"description": "", "required": true, "type": "string", "name": "repo_id", "in": "path"}], "tags": ["api"], "summary": "Get dir info.", "operationId": "api_v2.1_repos_dir_detail_list", "responses": {"200": {"description": ""}}}}, "/api/v2.1/repos/{repo_id}/file-uploaded-bytes/": {"get": {"description": "For resumable fileupload", "parameters": [{"description": "", "required": true, "type": "string", "name": "repo_id", "in": "path"}], "tags": ["api"], "summary": "For resumable fileupload", "operationId": "api_v2.1_repos_file-uploaded-bytes_list", "responses": {"200": {"description": ""}}}}, "/api/v2.1/repos/{repo_id}/file/": {"get": {"description": "Get file info.\n\nPermission checking:\n1. user with either 'r' or 'rw' permission.", "parameters": [{"description": "", "required": true, "type": "string", "name": "repo_id", "in": "path"}], "tags": ["api"], "summary": "Get file info.", "operationId": "api_v2.1_repos_file_list", "responses": {"200": {"description": ""}}}, "post": {"description": "Create, rename, move, copy, revert file\n\nPermission checking:\n1. create: user with 'rw' permission for current parent dir;\n2. rename: user with 'rw' permission for current file;\n3. move  : user with 'rw' permission for current file, 'rw' permission for dst parent dir;\n4. copy  : user with 'r' permission for current file, 'rw' permission for dst parent dir;\n4. revert: user with 'rw' permission for current file's parent dir;", "parameters": [{"description": "", "required": true, "type": "string", "name": "repo_id", "in": "path"}], "tags": ["api"], "summary": "Create, rename, move, copy, revert file", "operationId": "api_v2.1_repos_file_create", "responses": {"201": {"description": ""}}}, "put": {"description": "Currently only support lock, unlock, refresh-lock file.\n\nPermission checking:\n1. user with 'rw' permission for current file;", "parameters": [{"description": "", "required": true, "type": "string", "name": "repo_id", "in": "path"}], "tags": ["api"], "summary": "Currently only support lock, unlock, refresh-lock file.", "operationId": "api_v2.1_repos_file_update", "responses": {"200": {"description": ""}}}, "delete": {"description": "Delete file.\n\nPermission checking:\n1. user with 'rw' permission.", "parameters": [{"description": "", "required": true, "type": "string", "name": "repo_id", "in": "path"}], "tags": ["api"], "summary": "Delete file.", "operationId": "api_v2.1_repos_file_delete", "responses": {"204": {"description": ""}}}}, "/api/v2.1/repos/{repo_id}/file/history/": {"get": {"description": "Get file history within certain commits.\n\nControlled by path(rev_renamed_old_path), commit_id and next_start_commit.", "parameters": [{"description": "", "required": true, "type": "string", "name": "repo_id", "in": "path"}], "tags": ["api"], "summary": "Get file history within certain commits.", "operationId": "api_v2.1_repos_file_history_list", "responses": {"200": {"description": ""}}}}, "/api/v2.1/repos/{repo_id}/history/": {"get": {"description": "Return history of library\n\nPermission checking:\n1. all authenticated user can perform this action.", "parameters": [{"description": "", "required": true, "type": "string", "name": "repo_id", "in": "path"}], "tags": ["api"], "summary": "Return history of library", "operationId": "api_v2.1_repos_history_list", "responses": {"200": {"description": ""}}}}, "/api/v2.1/repos/{repo_id}/set-password/": {"post": {"description": "Check if repo password is correct.\n\nPermission checking:\n1. User can access current repo.", "parameters": [{"description": "", "required": true, "type": "string", "name": "repo_id", "in": "path"}], "tags": ["api"], "summary": "Check if repo password is correct.", "operationId": "api_v2.1_repos_set-password_create", "responses": {"201": {"description": ""}}}, "put": {"description": "Change/Init repo password.\n\nPermission checking:\n1. repo owner", "parameters": [{"description": "", "required": true, "type": "string", "name": "repo_id", "in": "path"}], "tags": ["api"], "summary": "Change/Init repo password.", "operationId": "api_v2.1_repos_set-password_update", "responses": {"200": {"description": ""}}}}, "/api/v2.1/repos/{repo_id}/tags/": {"get": {"tags": ["api"], "responses": {"200": {"description": ""}}, "parameters": [{"description": "", "required": true, "type": "string", "name": "repo_id", "in": "path"}], "operationId": "api_v2.1_repos_tags_list"}, "post": {"tags": ["api"], "responses": {"201": {"description": ""}}, "parameters": [{"description": "", "required": true, "type": "string", "name": "repo_id", "in": "path"}], "operationId": "api_v2.1_repos_tags_create"}, "put": {"tags": ["api"], "responses": {"200": {"description": ""}}, "parameters": [{"description": "", "required": true, "type": "string", "name": "repo_id", "in": "path"}], "operationId": "api_v2.1_repos_tags_update"}}, "/api/v2.1/repos/{repo_id}/tags/{name}/": {"delete": {"tags": ["api"], "responses": {"204": {"description": ""}}, "parameters": [{"description": "", "required": true, "type": "string", "name": "repo_id", "in": "path"}, {"description": "", "required": true, "type": "string", "name": "name", "in": "path"}], "operationId": "api_v2.1_repos_tags_delete"}}, "/api/v2.1/repos/{repo_id}/trash/": {"get": {"description": "Return deleted files/dirs of a repo/folder\n\nPermission checking:\n1. all authenticated user can perform this action.", "parameters": [{"description": "", "required": true, "type": "string", "name": "repo_id", "in": "path"}], "tags": ["api"], "summary": "Return deleted files/dirs of a repo/folder", "operationId": "api_v2.1_repos_trash_list", "responses": {"200": {"description": ""}}}, "delete": {"description": "Clean library's trash.\n\nPermission checking:\n1. only repo owner can perform this action.", "parameters": [{"description": "", "required": true, "type": "string", "name": "repo_id", "in": "path"}], "tags": ["api"], "summary": "Clean library's trash.", "operationId": "api_v2.1_repos_trash_delete", "responses": {"204": {"description": ""}}}}, "/api/v2.1/repos/{repo_id}/zip-task/": {"get": {"description": "Get file server token for download-dir and download-multi.\n\nPermission checking:\n1. user with 'r' or 'rw' permission;", "parameters": [{"description": "", "required": true, "type": "string", "name": "repo_id", "in": "path"}], "tags": ["api"], "summary": "Get file server token for download-dir and download-multi.", "operationId": "api_v2.1_repos_zip-task_list", "responses": {"200": {"description": ""}}}}, "/api/v2.1/revision-tags/tag-names/": {"get": {"tags": ["api"], "responses": {"200": {"description": ""}}, "parameters": [], "operationId": "api_v2.1_revision-tags_tag-names_list"}}, "/api/v2.1/revision-tags/tagged-items/": {"post": {"tags": ["api"], "responses": {"201": {"description": ""}}, "parameters": [], "operationId": "api_v2.1_revision-tags_tagged-items_create"}, "put": {"tags": ["api"], "responses": {"200": {"description": ""}}, "parameters": [], "operationId": "api_v2.1_revision-tags_tagged-items_update"}, "delete": {"tags": ["api"], "responses": {"204": {"description": ""}}, "parameters": [], "operationId": "api_v2.1_revision-tags_tagged-items_delete"}}, "/api/v2.1/search-group/": {"get": {"description": "Search group.\n\nPermission checking:\n1. default(NOT guest) user;", "parameters": [], "tags": ["api"], "summary": "Search group.", "operationId": "api_v2.1_search-group_list", "responses": {"200": {"description": ""}}}}, "/api/v2.1/share-link-zip-task/": {"get": {"description": "Only used for download dir when view dir share link from web.\n\n\nPermission checking:\n1. authenticated user OR anonymous user has passed email code check(if necessary);", "parameters": [], "tags": ["api"], "summary": "Only used for download dir when view dir share link from web.", "operationId": "api_v2.1_share-link-zip-task_list", "responses": {"200": {"description": ""}}}}, "/api/v2.1/share-links/": {"get": {"description": "Get all share links of a user.\n\nPermission checking:\n1. default(NOT guest) user;", "parameters": [], "tags": ["api"], "summary": "Get all share links of a user.", "operationId": "api_v2.1_share-links_list", "responses": {"200": {"description": ""}}}, "post": {"description": "Create share link.\n\nPermission checking:\n1. default(NOT guest) user;", "parameters": [], "tags": ["api"], "summary": "Create share link.", "operationId": "api_v2.1_share-links_create", "responses": {"201": {"description": ""}}}}, "/api/v2.1/share-links/{token}/": {"get": {"description": "Get a special share link info.\n\nPermission checking:\n1. default(NOT guest) user;", "parameters": [{"description": "", "required": true, "type": "string", "name": "token", "in": "path"}], "tags": ["api"], "summary": "Get a special share link info.", "operationId": "api_v2.1_share-links_read", "responses": {"200": {"description": ""}}}, "delete": {"description": "Delete share link.\n\nPermission checking:\n1. default(NOT guest) user;\n2. link owner;", "parameters": [{"description": "", "required": true, "type": "string", "name": "token", "in": "path"}], "tags": ["api"], "summary": "Delete share link.", "operationId": "api_v2.1_share-links_delete", "responses": {"204": {"description": ""}}}}, "/api/v2.1/shareable-groups/": {"get": {"description": "List groups that user can share a library to.", "parameters": [], "tags": ["api"], "summary": "List groups that user can share a library to.", "operationId": "api_v2.1_shareable-groups_list", "responses": {"200": {"description": ""}}}}, "/api/v2.1/shared-folders/": {"get": {"description": "List all shared out folders.\n\nPermission checking:\n1. all authenticated user can perform this action.", "parameters": [], "tags": ["api"], "summary": "List all shared out folders.", "operationId": "api_v2.1_shared-folders_list", "responses": {"200": {"description": ""}}}}, "/api/v2.1/shared-repos/": {"get": {"description": "List all shared out repos.\n\nPermission checking:\n1. all authenticated user can perform this action.", "parameters": [], "tags": ["api"], "summary": "List all shared out repos.", "operationId": "api_v2.1_shared-repos_list", "responses": {"200": {"description": ""}}}}, "/api/v2.1/shared-repos/{repo_id}/": {"put": {"description": "Update permission of a shared repo.\n\nPermission checking:\n1. Only repo owner can update.", "parameters": [{"description": "", "required": true, "type": "string", "name": "repo_id", "in": "path"}], "tags": ["api"], "summary": "Update permission of a shared repo.", "operationId": "api_v2.1_shared-repos_update", "responses": {"200": {"description": ""}}}, "delete": {"description": "Unshare a repo.\n\nPermission checking:\n1. Only repo owner can unshare a library.", "parameters": [{"description": "", "required": true, "type": "string", "name": "repo_id", "in": "path"}], "tags": ["api"], "summary": "Unshare a repo.", "operationId": "api_v2.1_shared-repos_delete", "responses": {"204": {"description": ""}}}}, "/api/v2.1/smart-link/": {"get": {"description": "Get smart link of a file/dir.", "parameters": [], "tags": ["api"], "summary": "Get smart link of a file/dir.", "operationId": "api_v2.1_smart-link_list", "responses": {"200": {"description": ""}}}}, "/api/v2.1/smart-links/{token}/": {"get": {"description": "Get library/file/folder info via smart link token.", "parameters": [{"description": "", "required": true, "type": "string", "name": "token", "in": "path"}], "tags": ["api"], "summary": "Get library/file/folder info via smart link token.", "operationId": "api_v2.1_smart-links_read", "responses": {"200": {"description": ""}}}}, "/api/v2.1/upload-links/": {"get": {"description": "Get all upload links of a user.\n\nPermission checking:\n1. default(NOT guest) user;", "parameters": [], "tags": ["api"], "summary": "Get all upload links of a user.", "operationId": "api_v2.1_upload-links_list", "responses": {"200": {"description": ""}}}, "post": {"description": "Create upload link.\n\nPermission checking:\n1. default(NOT guest) user;\n2. user with 'rw' permission;", "parameters": [], "tags": ["api"], "summary": "Create upload link.", "operationId": "api_v2.1_upload-links_create", "responses": {"201": {"description": ""}}}}, "/api/v2.1/upload-links/{token}/": {"get": {"description": "Get upload link info.\n\nPermission checking:\n1. default(NOT guest) user;", "parameters": [{"description": "", "required": true, "type": "string", "name": "token", "in": "path"}], "tags": ["api"], "summary": "Get upload link info.", "operationId": "api_v2.1_upload-links_read", "responses": {"200": {"description": ""}}}, "delete": {"description": "Delete upload link.\n\nPermission checking:\n1. default(NOT guest) user;\n2. link owner;", "parameters": [{"description": "", "required": true, "type": "string", "name": "token", "in": "path"}], "tags": ["api"], "summary": "Delete upload link.", "operationId": "api_v2.1_upload-links_delete", "responses": {"204": {"description": ""}}}}, "/api/v2.1/upload-links/{token}/upload/": {"get": {"description": "Get file upload url according to upload link token.\n\nPermission checking:\n1. anyone has the upload link token can perform this action;", "parameters": [{"description": "", "required": true, "type": "string", "name": "token", "in": "path"}], "tags": ["api"], "summary": "Get file upload url according to upload link token.", "operationId": "api_v2.1_upload-links_upload_list", "responses": {"200": {"description": ""}}}}, "/api/v2.1/user-avatar/": {"post": {"tags": ["api"], "responses": {"201": {"description": ""}}, "parameters": [], "operationId": "api_v2.1_user-avatar_create"}}, "/api/v2.1/user-enabled-modules/": {"post": {"description": "currently only used for add personal wiki module\n\nPermission checking:\n1. login user.\n2. user can add repo", "parameters": [], "tags": ["api"], "summary": "currently only used for add personal wiki module", "operationId": "api_v2.1_user-enabled-modules_create", "responses": {"201": {"description": ""}}}, "delete": {"description": "currently only used for delete personal wiki module\n\nPermission checking:\n1. login user.\n2. user can add repo", "parameters": [], "tags": ["api"], "summary": "currently only used for delete personal wiki module", "operationId": "api_v2.1_user-enabled-modules_delete", "responses": {"204": {"description": ""}}}}, "/api/v2.1/user/": {"get": {"description": "Query/update user info of myself.", "parameters": [], "tags": ["api"], "summary": "Query/update user info of myself.", "operationId": "api_v2.1_user_list", "responses": {"200": {"description": ""}}}, "put": {"description": "Query/update user info of myself.", "parameters": [], "tags": ["api"], "summary": "Query/update user info of myself.", "operationId": "api_v2.1_user_update", "responses": {"200": {"description": ""}}}}, "/api/v2.1/wikis/": {"get": {"description": "List all wikis.", "parameters": [], "tags": ["api"], "summary": "List all wikis.", "operationId": "api_v2.1_wikis_list", "responses": {"200": {"description": ""}}}}, "/api/v2.1/wikis/{slug}/": {"post": {"description": "Rename a Wiki", "parameters": [{"description": "", "required": true, "type": "string", "name": "slug", "in": "path"}], "tags": ["api"], "summary": "Rename a Wiki", "operationId": "api_v2.1_wikis_create", "responses": {"201": {"description": ""}}}, "put": {"description": "Edit a wiki permission", "parameters": [{"description": "", "required": true, "type": "string", "name": "slug", "in": "path"}], "tags": ["api"], "summary": "Edit a wiki permission", "operationId": "api_v2.1_wikis_update", "responses": {"200": {"description": ""}}}, "delete": {"description": "Delete a wiki.", "parameters": [{"description": "", "required": true, "type": "string", "name": "slug", "in": "path"}], "tags": ["api"], "summary": "Delete a wiki.", "operationId": "api_v2.1_wikis_delete", "responses": {"204": {"description": ""}}}}, "/api/v2.1/wikis/{slug}/content/": {"get": {"description": "Get content of a wiki", "parameters": [{"description": "", "required": true, "type": "string", "name": "slug", "in": "path"}], "tags": ["api"], "summary": "Get content of a wiki", "operationId": "api_v2.1_wikis_content_list", "responses": {"200": {"description": ""}}}}, "/api/v2.1/wikis/{slug}/dir/": {"get": {"description": "List all dir files in a wiki.", "parameters": [{"description": "", "required": true, "type": "string", "name": "slug", "in": "path"}], "tags": ["api"], "summary": "List all dir files in a wiki.", "operationId": "api_v2.1_wikis_dir_list", "responses": {"200": {"description": ""}}}}, "/api/v2.1/wikis/{slug}/pages/": {"get": {"description": "List all pages in a wiki.", "parameters": [{"description": "", "required": true, "type": "string", "name": "slug", "in": "path"}], "tags": ["api"], "summary": "List all pages in a wiki.", "operationId": "api_v2.1_wikis_pages_list", "responses": {"200": {"description": ""}}}, "post": {"description": "Add a page in a wiki", "parameters": [{"description": "", "required": true, "type": "string", "name": "slug", "in": "path"}], "tags": ["api"], "summary": "Add a page in a wiki", "operationId": "api_v2.1_wikis_pages_create", "responses": {"201": {"description": ""}}}}, "/api/v2.1/wikis/{slug}/pages/{page_name}/": {"get": {"description": "Get content of a wiki", "parameters": [{"description": "", "required": true, "type": "string", "name": "page_name", "in": "path"}, {"description": "", "required": true, "type": "string", "name": "slug", "in": "path"}], "tags": ["api"], "summary": "Get content of a wiki", "operationId": "api_v2.1_wikis_pages_read", "responses": {"200": {"description": ""}}}, "delete": {"description": "Delete a page in a wiki", "parameters": [{"description": "", "required": true, "type": "string", "name": "page_name", "in": "path"}, {"description": "", "required": true, "type": "string", "name": "slug", "in": "path"}], "tags": ["api"], "summary": "Delete a page in a wiki", "operationId": "api_v2.1_wikis_pages_delete", "responses": {"204": {"description": ""}}}}, "/api2/account/info/": {"get": {"description": "Show account info.", "parameters": [], "tags": ["api2"], "summary": "Show account info.", "operationId": "api2_account_info_list", "responses": {"200": {"description": ""}}}}, "/api2/accounts/": {"get": {"description": "List all accounts.\nAdministrator permission is required.", "parameters": [], "tags": ["api2"], "summary": "List all accounts.", "operationId": "api2_accounts_list", "responses": {"200": {"description": ""}}}}, "/api2/accounts/{email}/": {"get": {"description": "Query/Add/Delete a specific account.\nAdministator permission is required.", "parameters": [{"description": "", "required": true, "type": "string", "name": "email", "in": "path"}], "tags": ["api2"], "summary": "Query/Add/Delete a specific account.", "operationId": "api2_accounts_read", "responses": {"200": {"description": ""}}}, "post": {"description": "Query/Add/Delete a specific account.\nAdministator permission is required.", "parameters": [{"description": "", "required": true, "type": "string", "name": "email", "in": "path"}], "tags": ["api2"], "summary": "Query/Add/Delete a specific account.", "operationId": "api2_accounts_create", "responses": {"201": {"description": ""}}}, "put": {"description": "Query/Add/Delete a specific account.\nAdministator permission is required.", "parameters": [{"description": "", "required": true, "type": "string", "name": "email", "in": "path"}], "tags": ["api2"], "summary": "Query/Add/Delete a specific account.", "operationId": "api2_accounts_update", "responses": {"200": {"description": ""}}}, "delete": {"description": "Query/Add/Delete a specific account.\nAdministator permission is required.", "parameters": [{"description": "", "required": true, "type": "string", "name": "email", "in": "path"}], "tags": ["api2"], "summary": "Query/Add/Delete a specific account.", "operationId": "api2_accounts_delete", "responses": {"204": {"description": ""}}}}, "/api2/auth-token/": {"post": {"description": "Returns auth token if username and password are valid.\nFor example:\ncurl -d \"username=foo@example.com&password=123456\" http://127.0.0.1:8000/api2/auth-token/", "parameters": [], "tags": ["api2"], "summary": "Returns auth token if username and password are valid.", "operationId": "api2_auth-token_create", "responses": {"201": {"description": ""}}}}, "/api2/auth/ping/": {"get": {"description": "Returns a simple `pong` message when client provided an auth token.\nFor example:\ncurl -H \"Authorization: Token 9944b09199c62bcf9418ad846dd0e4bbdfc6ee4b\" http://127.0.0.1:8000/api2/auth/ping/", "parameters": [], "tags": ["api2"], "summary": "Returns a simple `pong` message when client provided an auth token.", "operationId": "api2_auth_ping_list", "responses": {"200": {"description": ""}}}}, "/api2/avatars/group/{group_id}/resized/{size}/": {"get": {"tags": ["api2"], "responses": {"200": {"description": ""}}, "parameters": [{"description": "", "required": true, "type": "string", "name": "group_id", "in": "path"}, {"description": "", "required": true, "type": "string", "name": "size", "in": "path"}], "operationId": "api2_avatars_group_resized_read"}}, "/api2/avatars/user/{user}/resized/{size}/": {"get": {"tags": ["api2"], "responses": {"200": {"description": ""}}, "parameters": [{"description": "", "required": true, "type": "string", "name": "user", "in": "path"}, {"description": "", "required": true, "type": "string", "name": "size", "in": "path"}], "operationId": "api2_avatars_user_resized_read"}}, "/api2/beshared-repos/": {"get": {"description": "List repos that others/groups share to user.", "parameters": [], "tags": ["api2"], "summary": "List repos that others/groups share to user.", "operationId": "api2_beshared-repos_list", "responses": {"200": {"description": ""}}}}, "/api2/beshared-repos/{repo_id}/": {"delete": {"tags": ["api2"], "responses": {"204": {"description": ""}}, "parameters": [{"description": "", "required": true, "type": "string", "name": "repo_id", "in": "path"}], "operationId": "api2_beshared-repos_delete"}}, "/api2/client-login/": {"post": {"description": "Generate a token which can be used later to login directly.\n\nThis is used to quickly login to restapi from desktop clients. The token\ncan only be used once, and would only be valid in 30 seconds after\ncreation.", "parameters": [], "tags": ["api2"], "summary": "Generate a token which can be used later to login directly.", "operationId": "api2_client-login_create", "responses": {"201": {"description": ""}}}}, "/api2/d/{token}/dir/": {"get": {"description": "List dirents in dir download shared link", "parameters": [{"description": "", "required": true, "type": "string", "name": "token", "in": "path"}], "tags": ["api2"], "summary": "List dirents in dir download shared link", "operationId": "api2_d_dir_list", "responses": {"200": {"description": ""}}}}, "/api2/default-repo/": {"get": {"description": "Get user's default library.", "parameters": [], "tags": ["api2"], "summary": "Get user's default library.", "operationId": "api2_default-repo_list", "responses": {"200": {"description": ""}}}, "post": {"description": "Get user's default library.", "parameters": [], "tags": ["api2"], "summary": "Get user's default library.", "operationId": "api2_default-repo_create", "responses": {"201": {"description": ""}}}}, "/api2/device-wiped/": {"post": {"tags": ["api2"], "responses": {"201": {"description": ""}}, "parameters": [], "operationId": "api2_device-wiped_create"}}, "/api2/devices/": {"get": {"description": "List user's devices.\n\nPermission checking:\n1. All authenticated users.", "parameters": [], "tags": ["api2"], "summary": "List user's devices.", "operationId": "api2_devices_list", "responses": {"200": {"description": ""}}}, "delete": {"tags": ["api2"], "responses": {"204": {"description": ""}}, "parameters": [], "operationId": "api2_devices_delete"}}, "/api2/events/": {"get": {"tags": ["api2"], "responses": {"200": {"description": ""}}, "parameters": [], "operationId": "api2_events_list"}}, "/api2/f/{token}/": {"get": {"tags": ["api2"], "responses": {"200": {"description": ""}}, "parameters": [{"description": "", "required": true, "type": "string", "name": "token", "in": "path"}], "operationId": "api2_f_read"}}, "/api2/f/{token}/detail/": {"get": {"tags": ["api2"], "responses": {"200": {"description": ""}}, "parameters": [{"description": "", "required": true, "type": "string", "name": "token", "in": "path"}], "operationId": "api2_f_detail_list"}}, "/api2/groups/": {"get": {"tags": ["api2"], "responses": {"200": {"description": ""}}, "parameters": [], "operationId": "api2_groups_list"}}, "/api2/groups/{group_id}/": {"get": {"tags": ["api2"], "responses": {"200": {"description": ""}}, "parameters": [{"description": "", "required": true, "type": "string", "name": "group_id", "in": "path"}], "operationId": "api2_groups_read"}, "post": {"tags": ["api2"], "responses": {"201": {"description": ""}}, "parameters": [{"description": "", "required": true, "type": "string", "name": "group_id", "in": "path"}], "operationId": "api2_groups_create"}, "put": {"description": "Add a new group.", "parameters": [{"description": "", "required": true, "type": "string", "name": "group_id", "in": "path"}], "tags": ["api2"], "summary": "Add a new group.", "operationId": "api2_groups_update", "responses": {"200": {"description": ""}}}, "delete": {"tags": ["api2"], "responses": {"204": {"description": ""}}, "parameters": [{"description": "", "required": true, "type": "string", "name": "group_id", "in": "path"}], "operationId": "api2_groups_delete"}}, "/api2/groups/{group_id}/discussions/": {"get": {"tags": ["api2"], "responses": {"200": {"description": ""}}, "parameters": [{"description": "", "required": true, "type": "string", "name": "group_id", "in": "path"}], "operationId": "api2_groups_discussions_list"}, "post": {"tags": ["api2"], "responses": {"201": {"description": ""}}, "parameters": [{"description": "", "required": true, "type": "string", "name": "group_id", "in": "path"}], "operationId": "api2_groups_discussions_create"}}, "/api2/groups/{group_id}/discussions/{discuss_id}/": {"delete": {"tags": ["api2"], "responses": {"204": {"description": ""}}, "parameters": [{"description": "", "required": true, "type": "string", "name": "discuss_id", "in": "path"}, {"description": "", "required": true, "type": "string", "name": "group_id", "in": "path"}], "operationId": "api2_groups_discussions_delete"}}, "/api2/groups/{group_id}/members/": {"put": {"description": "Add group members.", "parameters": [{"description": "", "required": true, "type": "string", "name": "group_id", "in": "path"}], "tags": ["api2"], "summary": "Add group members.", "operationId": "api2_groups_members_update", "responses": {"200": {"description": ""}}}, "delete": {"description": "Delete group members.", "parameters": [{"description": "", "required": true, "type": "string", "name": "group_id", "in": "path"}], "tags": ["api2"], "summary": "Delete group members.", "operationId": "api2_groups_members_delete", "responses": {"204": {"description": ""}}}}, "/api2/groups/{group_id}/repos/": {"get": {"tags": ["api2"], "responses": {"200": {"description": ""}}, "parameters": [{"description": "", "required": true, "type": "string", "name": "group_id", "in": "path"}], "operationId": "api2_groups_repos_list"}, "post": {"tags": ["api2"], "responses": {"201": {"description": ""}}, "parameters": [{"description": "", "required": true, "type": "string", "name": "group_id", "in": "path"}], "operationId": "api2_groups_repos_create"}}, "/api2/groups/{group_id}/repos/{repo_id}/": {"delete": {"tags": ["api2"], "responses": {"204": {"description": ""}}, "parameters": [{"description": "", "required": true, "type": "string", "name": "repo_id", "in": "path"}, {"description": "", "required": true, "type": "string", "name": "group_id", "in": "path"}], "operationId": "api2_groups_repos_delete"}}, "/api2/logout-device/": {"post": {"description": "Removes the api token of a device that has already logged in. If the device\nis a desktop client, also remove all sync tokens of repos synced on that\nclient .", "parameters": [], "tags": ["api2"], "summary": "Removes the api token of a device that has already logged in. If the device", "operationId": "api2_logout-device_create", "responses": {"201": {"description": ""}}}}, "/api2/organization/": {"post": {"tags": ["api2"], "responses": {"201": {"description": ""}}, "parameters": [], "operationId": "api2_organization_create"}}, "/api2/ping/": {"get": {"description": "Returns a simple `pong` message when client calls `api2/ping/`.\nFor example:\ncurl http://127.0.0.1:8000/api2/ping/", "parameters": [], "tags": ["api2"], "summary": "Returns a simple `pong` message when client calls `api2/ping/`.", "operationId": "api2_ping_list", "responses": {"200": {"description": ""}}}}, "/api2/regdevice/": {"post": {"description": "Reg device for iOS push notification.", "parameters": [], "tags": ["api2"], "summary": "Reg device for iOS push notification.", "operationId": "api2_regdevice_create", "responses": {"201": {"description": ""}}}}, "/api2/repo-tokens/": {"get": {"tags": ["api2"], "responses": {"200": {"description": ""}}, "parameters": [], "operationId": "api2_repo-tokens_list"}}, "/api2/repo_history_changes/{repo_id}/": {"get": {"tags": ["api2"], "responses": {"200": {"description": ""}}, "parameters": [{"description": "", "required": true, "type": "string", "name": "repo_id", "in": "path"}], "operationId": "api2_repo_history_changes_read"}}, "/api2/repos/": {"get": {"tags": ["api2"], "responses": {"200": {"description": ""}}, "parameters": [], "operationId": "api2_repos_list"}}, "/api2/repos/public/": {"get": {"tags": ["api2"], "responses": {"200": {"description": ""}}, "parameters": [], "operationId": "api2_repos_public_list"}, "post": {"tags": ["api2"], "responses": {"201": {"description": ""}}, "parameters": [], "operationId": "api2_repos_public_create"}}, "/api2/repos/{repo_id}/": {"get": {"tags": ["api2"], "responses": {"200": {"description": ""}}, "parameters": [{"description": "", "required": true, "type": "string", "name": "repo_id", "in": "path"}], "operationId": "api2_repos_read"}, "post": {"tags": ["api2"], "responses": {"201": {"description": ""}}, "parameters": [{"description": "", "required": true, "type": "string", "name": "repo_id", "in": "path"}], "operationId": "api2_repos_create"}, "delete": {"tags": ["api2"], "responses": {"204": {"description": ""}}, "parameters": [{"description": "", "required": true, "type": "string", "name": "repo_id", "in": "path"}], "operationId": "api2_repos_delete"}}, "/api2/repos/{repo_id}/dir/": {"get": {"description": "Support uniform interface for directory operations, including\ncreate/delete/rename/list, etc.", "parameters": [{"description": "", "required": true, "type": "string", "name": "repo_id", "in": "path"}], "tags": ["api2"], "summary": "Support uniform interface for directory operations, including", "operationId": "api2_repos_dir_list", "responses": {"200": {"description": ""}}}, "post": {"description": "Support uniform interface for directory operations, including\ncreate/delete/rename/list, etc.", "parameters": [{"description": "", "required": true, "type": "string", "name": "repo_id", "in": "path"}], "tags": ["api2"], "summary": "Support uniform interface for directory operations, including", "operationId": "api2_repos_dir_create", "responses": {"201": {"description": ""}}}, "delete": {"description": "Support uniform interface for directory operations, including\ncreate/delete/rename/list, etc.", "parameters": [{"description": "", "required": true, "type": "string", "name": "repo_id", "in": "path"}], "tags": ["api2"], "summary": "Support uniform interface for directory operations, including", "operationId": "api2_repos_dir_delete", "responses": {"204": {"description": ""}}}}, "/api2/repos/{repo_id}/dir/revert/": {"put": {"tags": ["api2"], "responses": {"200": {"description": ""}}, "parameters": [{"description": "", "required": true, "type": "string", "name": "repo_id", "in": "path"}], "operationId": "api2_repos_dir_revert_update"}}, "/api2/repos/{repo_id}/dir/shared_items/": {"get": {"description": "List shared items(shared to users/groups) for a folder/library.", "parameters": [{"description": "", "required": true, "type": "string", "name": "repo_id", "in": "path"}], "tags": ["api2"], "summary": "List shared items(shared to users/groups) for a folder/library.", "operationId": "api2_repos_dir_shared_items_list", "responses": {"200": {"description": ""}}}, "post": {"description": "Update shared item permission.", "parameters": [{"description": "", "required": true, "type": "string", "name": "repo_id", "in": "path"}], "tags": ["api2"], "summary": "Update shared item permission.", "operationId": "api2_repos_dir_shared_items_create", "responses": {"201": {"description": ""}}}, "put": {"description": "Support uniform interface(list, share, unshare, modify) for sharing\nlibrary/folder to users/groups.", "parameters": [{"description": "", "required": true, "type": "string", "name": "repo_id", "in": "path"}], "tags": ["api2"], "summary": "Support uniform interface(list, share, unshare, modify) for sharing", "operationId": "api2_repos_dir_shared_items_update", "responses": {"200": {"description": ""}}}, "delete": {"description": "Support uniform interface(list, share, unshare, modify) for sharing\nlibrary/folder to users/groups.", "parameters": [{"description": "", "required": true, "type": "string", "name": "repo_id", "in": "path"}], "tags": ["api2"], "summary": "Support uniform interface(list, share, unshare, modify) for sharing", "operationId": "api2_repos_dir_shared_items_delete", "responses": {"204": {"description": ""}}}}, "/api2/repos/{repo_id}/dir/sub_repo/": {"get": {"description": "Create sub-repo for folder\n\nPermission checking:\n1. user with `r` or `rw` permission.\n2. password correct for encrypted repo.", "parameters": [{"description": "", "required": true, "type": "string", "name": "repo_id", "in": "path"}], "tags": ["api2"], "summary": "Create sub-repo for folder", "operationId": "api2_repos_dir_sub_repo_list", "responses": {"200": {"description": ""}}}}, "/api2/repos/{repo_id}/download-info/": {"get": {"tags": ["api2"], "responses": {"200": {"description": ""}}, "parameters": [{"description": "", "required": true, "type": "string", "name": "repo_id", "in": "path"}], "operationId": "api2_repos_download-info_list"}}, "/api2/repos/{repo_id}/download-shared-links/": {"get": {"tags": ["api2"], "responses": {"200": {"description": ""}}, "parameters": [{"description": "", "required": true, "type": "string", "name": "repo_id", "in": "path"}], "operationId": "api2_repos_download-shared-links_list"}}, "/api2/repos/{repo_id}/download-shared-links/{token}/": {"delete": {"tags": ["api2"], "responses": {"204": {"description": ""}}, "parameters": [{"description": "", "required": true, "type": "string", "name": "token", "in": "path"}, {"description": "", "required": true, "type": "string", "name": "repo_id", "in": "path"}], "operationId": "api2_repos_download-shared-links_delete"}}, "/api2/repos/{repo_id}/file/": {"get": {"description": "Support uniform interface for file related operations,\nincluding create/delete/rename/view, etc.", "parameters": [{"description": "", "required": true, "type": "string", "name": "repo_id", "in": "path"}], "tags": ["api2"], "summary": "Support uniform interface for file related operations,", "operationId": "api2_repos_file_list", "responses": {"200": {"description": ""}}}, "post": {"description": "Support uniform interface for file related operations,\nincluding create/delete/rename/view, etc.", "parameters": [{"description": "", "required": true, "type": "string", "name": "repo_id", "in": "path"}], "tags": ["api2"], "summary": "Support uniform interface for file related operations,", "operationId": "api2_repos_file_create", "responses": {"201": {"description": ""}}}, "put": {"description": "Support uniform interface for file related operations,\nincluding create/delete/rename/view, etc.", "parameters": [{"description": "", "required": true, "type": "string", "name": "repo_id", "in": "path"}], "tags": ["api2"], "summary": "Support uniform interface for file related operations,", "operationId": "api2_repos_file_update", "responses": {"200": {"description": ""}}}, "delete": {"description": "Support uniform interface for file related operations,\nincluding create/delete/rename/view, etc.", "parameters": [{"description": "", "required": true, "type": "string", "name": "repo_id", "in": "path"}], "tags": ["api2"], "summary": "Support uniform interface for file related operations,", "operationId": "api2_repos_file_delete", "responses": {"204": {"description": ""}}}}, "/api2/repos/{repo_id}/file/comments/": {"get": {"description": "List all comments of a file.", "parameters": [{"description": "", "required": true, "type": "string", "name": "repo_id", "in": "path"}], "tags": ["api2"], "summary": "List all comments of a file.", "operationId": "api2_repos_file_comments_list", "responses": {"200": {"description": ""}}}, "post": {"description": "Post a comments of a file.", "parameters": [{"description": "", "required": true, "type": "string", "name": "repo_id", "in": "path"}], "tags": ["api2"], "summary": "Post a comments of a file.", "operationId": "api2_repos_file_comments_create", "responses": {"201": {"description": ""}}}}, "/api2/repos/{repo_id}/file/comments/counts/": {"get": {"description": "Count all comments of all file under certain parent dir.", "parameters": [{"description": "", "required": true, "type": "string", "name": "repo_id", "in": "path"}], "tags": ["api2"], "summary": "Count all comments of all file under certain parent dir.", "operationId": "api2_repos_file_comments_counts_list", "responses": {"200": {"description": ""}}}}, "/api2/repos/{repo_id}/file/comments/{id}/": {"get": {"description": "Get a comment.", "parameters": [{"description": "", "required": true, "type": "string", "name": "repo_id", "in": "path"}, {"description": "", "required": true, "type": "string", "name": "id", "in": "path"}], "tags": ["api2"], "summary": "Get a comment.", "operationId": "api2_repos_file_comments_read", "responses": {"200": {"description": ""}}}, "delete": {"description": "Delete a comment, only comment author or repo owner can perform\nthis op.", "parameters": [{"description": "", "required": true, "type": "string", "name": "repo_id", "in": "path"}, {"description": "", "required": true, "type": "string", "name": "id", "in": "path"}], "tags": ["api2"], "summary": "Delete a comment, only comment author or repo owner can perform", "operationId": "api2_repos_file_comments_delete", "responses": {"204": {"description": ""}}}}, "/api2/repos/{repo_id}/file/detail/": {"get": {"tags": ["api2"], "responses": {"200": {"description": ""}}, "parameters": [{"description": "", "required": true, "type": "string", "name": "repo_id", "in": "path"}], "operationId": "api2_repos_file_detail_list"}}, "/api2/repos/{repo_id}/file/history/": {"get": {"description": "Get file history.", "parameters": [{"description": "", "required": true, "type": "string", "name": "repo_id", "in": "path"}], "tags": ["api2"], "summary": "Get file history.", "operationId": "api2_repos_file_history_list", "responses": {"200": {"description": ""}}}}, "/api2/repos/{repo_id}/file/revert/": {"put": {"tags": ["api2"], "responses": {"200": {"description": ""}}, "parameters": [{"description": "", "required": true, "type": "string", "name": "repo_id", "in": "path"}], "operationId": "api2_repos_file_revert_update"}}, "/api2/repos/{repo_id}/file/revision/": {"get": {"tags": ["api2"], "responses": {"200": {"description": ""}}, "parameters": [{"description": "", "required": true, "type": "string", "name": "repo_id", "in": "path"}], "operationId": "api2_repos_file_revision_list"}}, "/api2/repos/{repo_id}/file/shared-link/": {"put": {"description": "Support uniform interface for file shared link.", "parameters": [{"description": "", "required": true, "type": "string", "name": "repo_id", "in": "path"}], "tags": ["api2"], "summary": "Support uniform interface for file shared link.", "operationId": "api2_repos_file_shared-link_update", "responses": {"200": {"description": ""}}}}, "/api2/repos/{repo_id}/fileops/copy/": {"post": {"description": "Copy files.", "parameters": [{"description": "", "required": true, "type": "string", "name": "repo_id", "in": "path"}], "tags": ["api2"], "summary": "Copy files.", "operationId": "api2_repos_fileops_copy_create", "responses": {"201": {"description": ""}}}}, "/api2/repos/{repo_id}/fileops/delete/": {"post": {"description": "Delete files.", "parameters": [{"description": "", "required": true, "type": "string", "name": "repo_id", "in": "path"}], "tags": ["api2"], "summary": "Delete files.", "operationId": "api2_repos_fileops_delete_create", "responses": {"201": {"description": ""}}}}, "/api2/repos/{repo_id}/fileops/move/": {"post": {"description": "Move files.", "parameters": [{"description": "", "required": true, "type": "string", "name": "repo_id", "in": "path"}], "tags": ["api2"], "summary": "Move files.", "operationId": "api2_repos_fileops_move_create", "responses": {"201": {"description": ""}}}}, "/api2/repos/{repo_id}/files/{file_id}/blks/{block_id}/download-link/": {"get": {"tags": ["api2"], "responses": {"200": {"description": ""}}, "parameters": [{"description": "", "required": true, "type": "string", "name": "repo_id", "in": "path"}, {"description": "", "required": true, "type": "string", "name": "file_id", "in": "path"}, {"description": "", "required": true, "type": "string", "name": "block_id", "in": "path"}], "operationId": "api2_repos_files_blks_download-link_list"}}, "/api2/repos/{repo_id}/group-folder-perm/": {"get": {"description": "List repo group folder perms (by folder_path).\n\nPermission checking:\n1. ( repo owner | admin ) & pro edition & enable folder perm.", "parameters": [{"description": "", "required": true, "type": "string", "name": "repo_id", "in": "path"}], "tags": ["api2"], "summary": "List repo group folder perms (by folder_path).", "operationId": "api2_repos_group-folder-perm_list", "responses": {"200": {"description": ""}}}, "post": {"description": "Add repo group folder perm.\n\nPermission checking:\n1. ( repo owner | admin ) & pro edition & enable folder perm.", "parameters": [{"description": "", "required": true, "type": "string", "name": "repo_id", "in": "path"}], "tags": ["api2"], "summary": "Add repo group folder perm.", "operationId": "api2_repos_group-folder-perm_create", "responses": {"201": {"description": ""}}}, "put": {"description": "Modify repo group folder perm.\n\nPermission checking:\n1. ( repo owner | admin ) & pro edition & enable folder perm.", "parameters": [{"description": "", "required": true, "type": "string", "name": "repo_id", "in": "path"}], "tags": ["api2"], "summary": "Modify repo group folder perm.", "operationId": "api2_repos_group-folder-perm_update", "responses": {"200": {"description": ""}}}, "delete": {"description": "Remove repo group folder perm.\n\nPermission checking:\n1. ( repo owner | admin ) & pro edition & enable folder perm.", "parameters": [{"description": "", "required": true, "type": "string", "name": "repo_id", "in": "path"}], "tags": ["api2"], "summary": "Remove repo group folder perm.", "operationId": "api2_repos_group-folder-perm_delete", "responses": {"204": {"description": ""}}}}, "/api2/repos/{repo_id}/history-limit/": {"get": {"tags": ["api2"], "responses": {"200": {"description": ""}}, "parameters": [{"description": "", "required": true, "type": "string", "name": "repo_id", "in": "path"}], "operationId": "api2_repos_history-limit_list"}, "put": {"tags": ["api2"], "responses": {"200": {"description": ""}}, "parameters": [{"description": "", "required": true, "type": "string", "name": "repo_id", "in": "path"}], "operationId": "api2_repos_history-limit_update"}}, "/api2/repos/{repo_id}/history/": {"get": {"tags": ["api2"], "responses": {"200": {"description": ""}}, "parameters": [{"description": "", "required": true, "type": "string", "name": "repo_id", "in": "path"}], "operationId": "api2_repos_history_list"}}, "/api2/repos/{repo_id}/owa-file/": {"get": {"description": "Get action url and access token when view file through Office Web App", "parameters": [{"description": "", "required": true, "type": "string", "name": "repo_id", "in": "path"}], "tags": ["api2"], "summary": "Get action url and access token when view file through Office Web App", "operationId": "api2_repos_owa-file_list", "responses": {"200": {"description": ""}}}}, "/api2/repos/{repo_id}/owner/": {"get": {"tags": ["api2"], "responses": {"200": {"description": ""}}, "parameters": [{"description": "", "required": true, "type": "string", "name": "repo_id", "in": "path"}], "operationId": "api2_repos_owner_list"}, "put": {"description": "Currently only for transfer repo.\n\nPermission checking:\n1. only repo owner can transfer repo.", "parameters": [{"description": "", "required": true, "type": "string", "name": "repo_id", "in": "path"}], "tags": ["api2"], "summary": "Currently only for transfer repo.", "operationId": "api2_repos_owner_update", "responses": {"200": {"description": ""}}}}, "/api2/repos/{repo_id}/thumbnail/": {"get": {"tags": ["api2"], "responses": {"200": {"description": ""}}, "parameters": [{"description": "", "required": true, "type": "string", "name": "repo_id", "in": "path"}], "operationId": "api2_repos_thumbnail_list"}}, "/api2/repos/{repo_id}/update-blks-link/": {"get": {"tags": ["api2"], "responses": {"200": {"description": ""}}, "parameters": [{"description": "", "required": true, "type": "string", "name": "repo_id", "in": "path"}], "operationId": "api2_repos_update-blks-link_list"}}, "/api2/repos/{repo_id}/update-link/": {"get": {"tags": ["api2"], "responses": {"200": {"description": ""}}, "parameters": [{"description": "", "required": true, "type": "string", "name": "repo_id", "in": "path"}], "operationId": "api2_repos_update-link_list"}}, "/api2/repos/{repo_id}/upload-blks-link/": {"get": {"tags": ["api2"], "responses": {"200": {"description": ""}}, "parameters": [{"description": "", "required": true, "type": "string", "name": "repo_id", "in": "path"}], "operationId": "api2_repos_upload-blks-link_list"}, "post": {"tags": ["api2"], "responses": {"201": {"description": ""}}, "parameters": [{"description": "", "required": true, "type": "string", "name": "repo_id", "in": "path"}], "operationId": "api2_repos_upload-blks-link_create"}}, "/api2/repos/{repo_id}/upload-link/": {"get": {"tags": ["api2"], "responses": {"200": {"description": ""}}, "parameters": [{"description": "", "required": true, "type": "string", "name": "repo_id", "in": "path"}], "operationId": "api2_repos_upload-link_list"}}, "/api2/repos/{repo_id}/upload-shared-links/": {"get": {"tags": ["api2"], "responses": {"200": {"description": ""}}, "parameters": [{"description": "", "required": true, "type": "string", "name": "repo_id", "in": "path"}], "operationId": "api2_repos_upload-shared-links_list"}}, "/api2/repos/{repo_id}/upload-shared-links/{token}/": {"delete": {"tags": ["api2"], "responses": {"204": {"description": ""}}, "parameters": [{"description": "", "required": true, "type": "string", "name": "token", "in": "path"}, {"description": "", "required": true, "type": "string", "name": "repo_id", "in": "path"}], "operationId": "api2_repos_upload-shared-links_delete"}}, "/api2/repos/{repo_id}/user-folder-perm/": {"get": {"description": "List repo user folder perms (by folder_path).\n\nPermission checking:\n1. ( repo owner | admin ) & pro edition & enable folder perm.", "parameters": [{"description": "", "required": true, "type": "string", "name": "repo_id", "in": "path"}], "tags": ["api2"], "summary": "List repo user folder perms (by folder_path).", "operationId": "api2_repos_user-folder-perm_list", "responses": {"200": {"description": ""}}}, "post": {"description": "Add repo user folder perm.\n\nPermission checking:\n1. ( repo owner | admin ) & pro edition & enable folder perm.", "parameters": [{"description": "", "required": true, "type": "string", "name": "repo_id", "in": "path"}], "tags": ["api2"], "summary": "Add repo user folder perm.", "operationId": "api2_repos_user-folder-perm_create", "responses": {"201": {"description": ""}}}, "put": {"description": "Modify repo user folder perm.\n\nPermission checking:\n1. ( repo owner | admin ) & pro edition & enable folder perm.", "parameters": [{"description": "", "required": true, "type": "string", "name": "repo_id", "in": "path"}], "tags": ["api2"], "summary": "Modify repo user folder perm.", "operationId": "api2_repos_user-folder-perm_update", "responses": {"200": {"description": ""}}}, "delete": {"description": "Remove repo user folder perms.\n\nPermission checking:\n1. ( repo owner | admin ) & pro edition & enable folder perm.", "parameters": [{"description": "", "required": true, "type": "string", "name": "repo_id", "in": "path"}], "tags": ["api2"], "summary": "Remove repo user folder perms.", "operationId": "api2_repos_user-folder-perm_delete", "responses": {"204": {"description": ""}}}}, "/api2/search-user/": {"get": {"description": "Search user from contacts/all users", "parameters": [], "tags": ["api2"], "summary": "Search user from contacts/all users", "operationId": "api2_search-user_list", "responses": {"200": {"description": ""}}}}, "/api2/search/": {"get": {"description": "Search all the repos", "parameters": [], "tags": ["api2"], "summary": "Search all the repos", "operationId": "api2_search_list", "responses": {"200": {"description": ""}}}}, "/api2/send-share-link/": {"post": {"tags": ["api2"], "responses": {"201": {"description": ""}}, "parameters": [], "operationId": "api2_send-share-link_create"}}, "/api2/send-upload-link/": {"post": {"tags": ["api2"], "responses": {"201": {"description": ""}}, "parameters": [], "operationId": "api2_send-upload-link_create"}}, "/api2/server-info/": {"get": {"description": "Returns the server info (version, supported features).", "parameters": [], "tags": ["api2"], "summary": "Returns the server info (version, supported features).", "operationId": "api2_server-info_list", "responses": {"200": {"description": ""}}}}, "/api2/shared-links/": {"get": {"tags": ["api2"], "responses": {"200": {"description": ""}}, "parameters": [], "operationId": "api2_shared-links_list"}, "delete": {"tags": ["api2"], "responses": {"204": {"description": ""}}, "parameters": [], "operationId": "api2_shared-links_delete"}}, "/api2/shared-repos/": {"get": {"description": "List repos that a user share to others/groups/public.", "parameters": [], "tags": ["api2"], "summary": "List repos that a user share to others/groups/public.", "operationId": "api2_shared-repos_list", "responses": {"200": {"description": ""}}}}, "/api2/shared-repos/{repo_id}/": {"put": {"description": "Share a repo to users/groups/public.", "parameters": [{"description": "", "required": true, "type": "string", "name": "repo_id", "in": "path"}], "tags": ["api2"], "summary": "Share a repo to users/groups/public.", "operationId": "api2_shared-repos_update", "responses": {"200": {"description": ""}}}, "delete": {"description": "Unshare a library.\nRepo owner and system admin can perform this operation.", "parameters": [{"description": "", "required": true, "type": "string", "name": "repo_id", "in": "path"}], "tags": ["api2"], "summary": "Unshare a library.", "operationId": "api2_shared-repos_delete", "responses": {"204": {"description": ""}}}}, "/api2/shared-upload-links/": {"get": {"tags": ["api2"], "responses": {"200": {"description": ""}}, "parameters": [], "operationId": "api2_shared-upload-links_list"}}, "/api2/starredfiles/": {"get": {"description": "Support uniform interface for starred file operation,\nincluding add/delete/list starred files.", "parameters": [], "tags": ["api2"], "summary": "Support uniform interface for starred file operation,", "operationId": "api2_starredfiles_list", "responses": {"200": {"description": ""}}}, "post": {"description": "Support uniform interface for starred file operation,\nincluding add/delete/list starred files.", "parameters": [], "tags": ["api2"], "summary": "Support uniform interface for starred file operation,", "operationId": "api2_starredfiles_create", "responses": {"201": {"description": ""}}}, "delete": {"description": "Support uniform interface for starred file operation,\nincluding add/delete/list starred files.", "parameters": [], "tags": ["api2"], "summary": "Support uniform interface for starred file operation,", "operationId": "api2_starredfiles_delete", "responses": {"204": {"description": ""}}}}, "/api2/two-factor-auth/{email}/": {"delete": {"tags": ["api2"], "responses": {"204": {"description": ""}}, "parameters": [{"description": "", "required": true, "type": "string", "name": "email", "in": "path"}], "operationId": "api2_two-factor-auth_delete"}}, "/api2/unseen_messages/": {"get": {"tags": ["api2"], "responses": {"200": {"description": ""}}, "parameters": [], "operationId": "api2_unseen_messages_list"}}, "/api2/wopi/files/{file_id}": {"get": {"tags": ["api2"], "responses": {"200": {"description": ""}}, "parameters": [{"description": "", "required": true, "type": "string", "name": "file_id", "in": "path"}], "operationId": "api2_wopi_files_read"}, "post": {"tags": ["api2"], "responses": {"201": {"description": ""}}, "parameters": [{"description": "", "required": true, "type": "string", "name": "file_id", "in": "path"}], "operationId": "api2_wopi_files_create"}}, "/api2/wopi/files/{file_id}/contents": {"get": {"tags": ["api2"], "responses": {"200": {"description": ""}}, "parameters": [{"description": "", "required": true, "type": "string", "name": "file_id", "in": "path"}], "operationId": "api2_wopi_files_contents_list"}, "post": {"tags": ["api2"], "responses": {"201": {"description": ""}}, "parameters": [{"description": "", "required": true, "type": "string", "name": "file_id", "in": "path"}], "operationId": "api2_wopi_files_contents_create"}}, "/api3/account/info/": {"get": {"description": "---\n# YAML\n\ntype:\n  Authorization:\n    required: true\n    type: string\n\nparameters:\n    - name: Authorization\n      required: true\n      type: string\n      paramType: header\n\nresponseMessages:\n    - code: 401\n      message: UNAUTHORIZED\n\nconsumes:\n    - application/json\nproduces:\n    - application/json", "parameters": [], "tags": ["api3"], "summary": "---", "operationId": "api3_account_info_list", "responses": {"200": {"description": ""}}}}, "/api3/accounts/": {"get": {"description": "Admin - List accounts\n---\n# YAML\n\ntype:\n  Authorization:\n    required: true\n    type: string\n  start:\n    required: true\n    type: string\n  limit:\n    required: true\n    type: string\n  scope:\n    required: false\n    type: string\n\nparameters:\n    - name: Authorization\n      required: true\n      type: string\n      paramType: header\n    - name: start\n      description: default 0\n      required: true\n      type: string\n      paramType: query\n    - name: limit\n      description: default 100\n      required: true\n      type: string\n      paramType: query\n    - name: scope\n      description: LDAP / LDAPIMPORT, DB\n      required: false\n      type: string\n      paramType: query\n\nresponseMessages:\n    - code: 400\n      message: BAD_REQUEST\n    - code: 401\n      message: UNAUTHORIZED\n    - code: 403\n      message: FORBIDDEN\n    - code: 404\n      message: NOT_FOUND\n    - code: 500\n      message: INTERNAL_SERVER_ERROR\n\nconsumes:\n    - application/json\nproduces:\n    - application/json", "parameters": [], "tags": ["api3"], "summary": "Admin - List accounts", "operationId": "api3_accounts_list", "responses": {"200": {"description": ""}}}}, "/api3/accounts/{email}/": {"get": {"description": "Admin - Get Account Info\n---\n# YAML\n\ntype:\n  Authorization:\n    required: true\n    type: string\n  email:\n    required: true\n    type: string\n\nparameters:\n    - name: Authorization\n      required: true\n      type: string\n      paramType: header\n    - name: email\n      required: true\n      type: string\n      paramType: path\n\nresponseMessages:\n    - code: 400\n      message: BAD_REQUEST\n    - code: 401\n      message: UNAUTHORIZED\n    - code: 404\n      message: NOT_FOUND\n    - code: 500\n      message: INTERNAL_SERVER_ERROR\n\nconsumes:\n    - application/json\nproduces:\n    - application/json", "parameters": [{"description": "", "required": true, "type": "string", "name": "email", "in": "path"}], "tags": ["api3"], "summary": "Admin - Get Account Info", "operationId": "api3_accounts_read", "responses": {"200": {"description": ""}}}, "post": {"description": "Admin - Migrate Account\n---\n# YAML\n\ntype:\n  Authorization:\n    required: true\n    type: string\n  email:\n    required: true\n    type: string\n  op:\n    required: true\n    type: string\n  to_user:\n    required: true\n    type: string\n\nparameters:\n    - name: Authorization\n      required: true\n      type: string\n      paramType: header\n    - name: email\n      required: true\n      type: string\n      paramType: path\n    - name: op\n      description: only \"migrate\"\n      required: true\n      type: string\n      paramType: form\n    - name: to_user\n      description: this user must exist\n      required: true\n      type: string\n      paramType: form\n\nresponseMessages:\n    - code: 400\n      message: BAD_REQUEST\n    - code: 401\n      message: UNAUTHORIZED\n    - code: 404\n      message: NOT_FOUND\n    - code: 500\n      message: INTERNAL_SERVER_ERROR\n\nconsumes:\n    - application/json\nproduces:\n    - application/json", "parameters": [{"description": "", "required": true, "type": "string", "name": "email", "in": "path"}], "tags": ["api3"], "summary": "Admin - Migrate Account", "operationId": "api3_accounts_create", "responses": {"201": {"description": ""}}}, "put": {"description": "Admin - Create/Update Account\n\n* Request parameters for create:\n\n- password\n\n- is_staff: can be \"t\", \"true\", \"1\" (defaults to False)\n\n- is_active: can be \"t\", \"true\", \"1\" (defaults to True)\n\n\n\n* Request parameters for update: At least one of followings:\n\n- password\n\n- is_staff\n\n- is_active\n\n- name\n\n- note\n\n- storage, the unit is MB.\n\n---\n# YAML\n\ntype:\n  Authorization:\n    required: true\n    type: string\n  email:\n    required: true\n    type: string\n  name:\n    required: false\n    type: string\n  password:\n    required: false\n    type: string\n  login_id:\n    required: false\n    type: string\n  is_staff:\n    required: false\n    type: string\n  is_active:\n    required: false\n    type: string\n  is_trial:\n    required: false\n    type: string\n  storage:\n    required: false\n    type: string\n  department:\n    required: false\n    type: string\n  tenant:\n    required: false\n    type: string\n\nparameters:\n    - name: Authorization\n      required: true\n      type: string\n      paramType: header\n    - name: email\n      required: true\n      type: string\n      paramType: path\n    - name: password\n      required: false\n      type: string\n      paramType: form\n    - name: name\n      required: false\n      type: string\n      paramType: form\n    - name: login_id\n      required: false\n      type: string\n      paramType: form\n    - name: department\n      required: false\n      type: string\n      paramType: form\n    - name: tenant\n      required: false\n      type: string\n      paramType: form\n    - name: storage\n      required: false\n      type: string\n      paramType: form\n    - name: is_trial\n      required: false\n      type: string\n      paramType: form\n    - name: is_staff\n      required: false\n      type: string\n      paramType: form\n    - name: is_active\n      required: false\n      type: string\n      paramType: form\n\nresponseMessages:\n    - code: 400\n      message: BAD_REQUEST\n    - code: 401\n      message: UNAUTHORIZED\n    - code: 500\n      message: INTERNAL_SERVER_ERROR\n    - code: 520\n      message: OPERATION_FAILED\n\nconsumes:\n    - application/json\nproduces:\n    - application/json", "parameters": [{"description": "", "required": true, "type": "string", "name": "email", "in": "path"}], "tags": ["api3"], "summary": "Admin - Create/Update Account", "operationId": "api3_accounts_update", "responses": {"200": {"description": ""}}}, "delete": {"description": "Admin - Delete Account\n---\n# YAML\n\ntype:\n  Authorization:\n    required: true\n    type: string\n  email:\n    required: true\n    type: string\n\nparameters:\n    - name: Authorization\n      required: true\n      type: string\n      paramType: header\n    - name: email\n      required: true\n      type: string\n      paramType: path\n\nresponseMessages:\n    - code: 400\n      message: BAD_REQUEST\n    - code: 401\n      message: UNAUTHORIZED\n    - code: 404\n      message: NOT_FOUND\n    - code: 500\n      message: INTERNAL_SERVER_ERROR\n\nconsumes:\n    - application/json\nproduces:\n    - application/json", "parameters": [{"description": "", "required": true, "type": "string", "name": "email", "in": "path"}], "tags": ["api3"], "summary": "Admin - Delete Account", "operationId": "api3_accounts_delete", "responses": {"204": {"description": ""}}}}, "/api3/active/{activation_key}": {"get": {"description": "Activate user via email with activation key\n---\n# YAML\n\ntype:\n  activation_key:\n    required: true\n    type: string\n\nparameters:\n  - name: Authorization\n    required: true\n    type: string\n    paramType: header\n  - name: activation_key\n    description: activation key\n    required: true\n    type: string\n    paramType: path\n\nresponseMessages:\n  - code: 400\n    message: BAD_REQUEST\n  - code: 401\n    message: UNAUTHORIZED\n  - code: 403\n    message: FORBIDDEN\n  - code: 404\n    message: NOT_FOUND\n  - code: 500\n    message: INTERNAL_SERVER_ERROR\n\nconsumes:\n  - application/json\nproduces:\n  - application/json", "parameters": [{"description": "", "required": true, "type": "string", "name": "activation_key", "in": "path"}], "tags": ["api3"], "summary": "Activate user via email with activation key", "operationId": "api3_active_read", "responses": {"200": {"description": ""}}}}, "/api3/admin/default-library/": {"get": {"description": "Get info of common user's default library.\n\nPermission checking:\n1. only admin can perform this action.\n\n---\n# YAML\n\ntype:\n  Authorization:\n    required: true\n    type: string\n  user_email:\n    required: true\n    type: string\n\nparameters:\n    - name: Authorization\n      required: true\n      type: string\n      paramType: header\n    - name: user_email\n      required: true\n      type: string\n      paramType: query\n\nresponseMessages:\n    - code: 400\n      message: BAD_REQUEST\n    - code: 401\n      message: UNAUTHORIZED\n    - code: 404\n      message: NOT_FOUND\n    - code: 500\n      message: INTERNAL_SERVER_ERROR\n\nconsumes:\n    - application/json\nproduces:\n    - application/json", "parameters": [], "tags": ["api3"], "summary": "Get info of common user's default library.", "operationId": "api3_admin_default-library_list", "responses": {"200": {"description": ""}}}, "post": {"description": "Create a default library for a common user.\n\nPermission checking:\n1. only admin can perform this action.\n\n---\n# YAML\n\ntype:\n  Authorization:\n    required: true\n    type: string\n  user_email:\n    required: true\n    type: string\n\nparameters:\n    - name: Authorization\n      required: true\n      type: string\n      paramType: header\n    - name: user_email\n      required: true\n      type: string\n      paramType: form\n\nresponseMessages:\n    - code: 400\n      message: BAD_REQUEST\n    - code: 401\n      message: UNAUTHORIZED\n    - code: 403\n      message: FORBIDDEN\n    - code: 404\n      message: NOT_FOUND\n    - code: 500\n      message: INTERNAL_SERVER_ERROR\n\nconsumes:\n    - application/json\nproduces:\n    - application/json", "parameters": [], "tags": ["api3"], "summary": "Create a default library for a common user.", "operationId": "api3_admin_default-library_create", "responses": {"201": {"description": ""}}}}, "/api3/admin/device-errors/": {"get": {"description": "Get Device Errors\n---\n# YAML\n\ntype:\n  Authorization:\n    required: true\n    type: string\n\nparameters:\n    - name: Authorization\n      required: true\n      type: string\n      paramType: header\n\nresponseMessages:\n    - code: 401\n      message: UNAUTHORIZED\n    - code: 403\n      message: FORBIDDEN\n    - code: 500\n      message: INTERNAL_SERVER_ERROR\n\nconsumes:\n    - application/json\nproduces:\n    - application/json", "parameters": [], "tags": ["api3"], "summary": "Get Device Errors", "operationId": "api3_admin_device-errors_list", "responses": {"200": {"description": ""}}}, "delete": {"description": "Clean Device Errors\n---\n# YAML\n\ntype:\n  Authorization:\n    required: true\n    type: string\n\nparameters:\n    - name: Authorization\n      required: true\n      type: string\n      paramType: header\n\nresponseMessages:\n    - code: 401\n      message: UNAUTHORIZED\n    - code: 403\n      message: FORBIDDEN\n    - code: 500\n      message: INTERNAL_SERVER_ERROR\n\nconsumes:\n    - application/json\nproduces:\n    - application/json", "parameters": [], "tags": ["api3"], "summary": "Clean Device Errors", "operationId": "api3_admin_device-errors_delete", "responses": {"204": {"description": ""}}}}, "/api3/admin/devices/": {"get": {"description": "Get Devices\n---\n# YAML\n\ntype:\n  Authorization:\n    required: true\n    type: string\n  page:\n    required: false\n    type: string\n  per_page:\n    required: false\n    type: string\n  platform:\n    required: true\n    type: string\n\nparameters:\n    - name: Authorization\n      required: true\n      type: string\n      paramType: header\n    - name: page\n      description: default 1\n      required: false\n      type: string\n      paramType: query\n    - name: per_page\n      description: default 50\n      required: false\n      type: string\n      paramType: query\n    - name: platform\n      description: desktop or mobile\n      required: true\n      type: string\n      paramType: query\n\nresponseMessages:\n    - code: 401\n      message: UNAUTHORIZED\n    - code: 500\n      message: INTERNAL_SERVER_ERROR\n\nconsumes:\n    - application/json\nproduces:\n    - application/json", "parameters": [], "tags": ["api3"], "summary": "Get Devices", "operationId": "api3_admin_devices_list", "responses": {"200": {"description": ""}}}, "delete": {"description": "Unlink User Device\n---\n# YAML\n\ntype:\n  Authorization:\n    required: true\n    type: string\n  platform:\n    required: true\n    type: string\n  device_id:\n    required: true\n    type: string\n  wipe_device:\n    required: false\n    type: string\n  user:\n    required: true\n    type: string\n\nparameters:\n    - name: Authorization\n      required: true\n      type: string\n      paramType: header\n    - name: platform\n      description: desktop or mobile\n      required: true\n      type: string\n      paramType: query\n    - name: device_id\n      required: true\n      type: string\n      paramType: query\n    - name: wipe_device\n      description: true or false\n      required: false\n      type: string\n      paramType: query\n    - name: user\n      description: User email\n      required: true\n      type: string\n      paramType: query\n\nresponseMessages:\n    - code: 400\n      message: BAD_REQUEST\n    - code: 401\n      message: UNAUTHORIZED\n    - code: 403\n      message: FORBIDDEN\n    - code: 404\n      message: NOT_FOUND\n    - code: 500\n      message: INTERNAL_SERVER_ERROR\n\nconsumes:\n    - application/json\nproduces:\n    - application/json", "parameters": [], "tags": ["api3"], "summary": "Unlink User Device", "operationId": "api3_admin_devices_delete", "responses": {"204": {"description": ""}}}}, "/api3/admin/download-links/{token}/": {"delete": {"description": "Delete download link\n---\n# YAML\n\ntype:\n  Authorization:\n    required: true\n    type: string\n\nparameters:\n    - name: Authorization\n      required: true\n      type: string\n      paramType: header\n    - name: token\n      description: download link token\n      required: true\n      type: string\n      paramType: path\n\nresponseMessages:\n    - code: 400\n      message: BAD_REQUEST\n    - code: 401\n      message: UNAUTHORIZED\n    - code: 403\n      message: FORBIDDEN\n    - code: 404\n      message: NOT_FOUND\n    - code: 500\n      message: INTERNAL_SERVER_ERROR\n\nconsumes:\n    - application/json\nproduces:\n    - application/json", "parameters": [{"description": "", "required": true, "type": "string", "name": "token", "in": "path"}], "tags": ["api3"], "summary": "Delete download link", "operationId": "api3_admin_download-links_delete", "responses": {"204": {"description": ""}}}}, "/api3/admin/favicon/": {"post": {"description": "Change favicon of the page\n---\n# YAML\n\ntype:\n  Authorization:\n    required: true\n    type: string\n  start:\n    required: true\n    type: string\n  limit:\n    required: true\n    type: string\n  scope:\n    required: false\n    type: string\n\nparameters:\n  - name: Authorization\n    required: true\n    type: string\n    paramType: header\n  - name: favicon\n    required: true\n    type: file\n    paramType: formData\n    description: new favicon file\n\nresponseMessages:\n  - code: 400\n    message: BAD_REQUEST\n  - code: 401\n    message: UNAUTHORIZED\n  - code: 403\n    message: FORBIDDEN\n  - code: 404\n    message: NOT_FOUND\n  - code: 500\n    message: INTERNAL_SERVER_ERROR\n\nconsumes:\n  - application/json\nproduces:\n  - application/json", "parameters": [], "tags": ["api3"], "summary": "Change favicon of the page", "operationId": "api3_admin_favicon_create", "responses": {"201": {"description": ""}}}}, "/api3/admin/favicon/reset/": {"post": {"description": "Reset favicon of the page\n---\n# YAML\n\ntype:\n  Authorization:\n    required: true\n    type: string\n  start:\n    required: true\n    type: string\n  limit:\n    required: true\n    type: string\n  scope:\n    required: false\n    type: string\n\nparameters:\n  - name: Authorization\n    required: true\n    type: string\n    paramType: header\n\nresponseMessages:\n  - code: 400\n    message: BAD_REQUEST\n  - code: 401\n    message: UNAUTHORIZED\n  - code: 403\n    message: FORBIDDEN\n  - code: 404\n    message: NOT_FOUND\n  - code: 500\n    message: INTERNAL_SERVER_ERROR\n\nconsumes:\n  - application/json\nproduces:\n  - application/json", "parameters": [], "tags": ["api3"], "summary": "Reset favicon of the page", "operationId": "api3_admin_favicon_reset_create", "responses": {"201": {"description": ""}}}}, "/api3/admin/groups/": {"get": {"description": "List all groups / search group by name\n\nPermission checking:\n1. Admin user;\n\n---\n# YAML\n\ntype:\n  Authorization:\n    required: true\n    type: string\n  name:\n    required: true\n    type: string\n  page:\n    required: false\n    type: string\n  per_page:\n    required: false\n    type: string\n\nparameters:\n    - name: Authorization\n      required: true\n      type: string\n      paramType: header\n    - name: name\n      required: true\n      type: string\n      paramType: query\n    - name: page\n      description: default 1\n      required: false\n      type: string\n      paramType: query\n    - name: per_page\n      description: default 100\n      required: false\n      type: string\n      paramType: query\n\nresponseMessages:\n    - code: 401\n      message: UNAUTHORIZED\n    - code: 500\n      message: INTERNAL_SERVER_ERROR\n\nconsumes:\n    - application/json\nproduces:\n    - application/json", "parameters": [], "tags": ["api3"], "summary": "List all groups / search group by name", "operationId": "api3_admin_groups_list", "responses": {"200": {"description": ""}}}, "post": {"description": "Create a group\n\nPermission checking:\n1. Admin user;\n\n---\n# YAML\n\ntype:\n  Authorization:\n    required: true\n    type: string\n  group_name:\n    required: true\n    type: string\n  group_owner:\n    required: true\n    type: string\n\nparameters:\n    - name: Authorization\n      required: true\n      type: string\n      paramType: header\n    - name: group_name\n      required: true\n      type: string\n      paramType: form\n    - name: group_owner\n      required: true\n      type: string\n      paramType: form\n\nresponseMessages:\n    - code: 400\n      message: BAD_REQUEST\n    - code: 401\n      message: UNAUTHORIZED\n    - code: 404\n      message: NOT_FOUND\n    - code: 500\n      message: INTERNAL_SERVER_ERROR\n\nconsumes:\n    - application/json\nproduces:\n    - application/json", "parameters": [], "tags": ["api3"], "summary": "Create a group", "operationId": "api3_admin_groups_create", "responses": {"201": {"description": ""}}}}, "/api3/admin/groups/export/": {"get": {"description": "Export groups to excel\n\nPermission checking:\n1. Admin user;\n\n---\n# YAML\n\ntype:\n  Authorization:\n    required: true\n    type: string\n\nparameters:\n    - name: Authorization\n      required: true\n      type: string\n      paramType: header\n    \nresponseMessages:\n    - code: 401\n      message: UNAUTHORIZED\n    - code: 500\n      message: INTERNAL_SERVER_ERROR\n\nconsumes:\n    - application/json\nproduces:\n    - application/json", "parameters": [], "tags": ["api3"], "summary": "Export groups to excel", "operationId": "api3_admin_groups_export_list", "responses": {"200": {"description": ""}}}}, "/api3/admin/groups/{group_id}/": {"put": {"description": "Admin transfer a group\n\nPermission checking:\n1. Admin user;\n\n---\n# YAML\n\ntype:\n  Authorization:\n    required: true\n    type: string\n  group_id:\n    required: true\n    type: string\n  new_owner:\n    required: true\n    type: string\n\nparameters:\n    - name: Authorization\n      required: true\n      type: string\n      paramType: header\n    - name: group_id\n      required: true\n      type: string\n      paramType: path\n    - name: new_owner\n      required: true\n      type: string\n      paramType: form\n\nresponseMessages:\n    - code: 400\n      message: BAD_REQUEST\n    - code: 401\n      message: UNAUTHORIZED\n    - code: 404\n      message: NOT_FOUND\n    - code: 500\n      message: INTERNAL_SERVER_ERROR\n\nconsumes:\n    - application/json\nproduces:\n    - application/json", "parameters": [{"description": "", "required": true, "type": "string", "name": "group_id", "in": "path"}], "tags": ["api3"], "summary": "Admin transfer a group", "operationId": "api3_admin_groups_update", "responses": {"200": {"description": ""}}}, "delete": {"description": "Dismiss a specific group\n\n---\n# YAML\n\ntype:\n  Authorization:\n    required: true\n    type: string\n  group_id:\n    required: true\n    type: string\n\nparameters:\n    - name: Authorization\n      required: true\n      type: string\n      paramType: header\n    - name: group_id\n      required: true\n      type: string\n      paramType: path\n\nresponseMessages:\n    - code: 400\n      message: BAD_REQUEST\n    - code: 401\n      message: UNAUTHORIZED\n    - code: 403\n      message: FORBIDDEN\n    - code: 404\n      message: NOT_FOUND\n    - code: 500\n      message: INTERNAL_SERVER_ERROR\n\nconsumes:\n    - application/json\nproduces:\n    - application/json", "parameters": [{"description": "", "required": true, "type": "string", "name": "group_id", "in": "path"}], "tags": ["api3"], "summary": "Dismiss a specific group", "operationId": "api3_admin_groups_delete", "responses": {"204": {"description": ""}}}}, "/api3/admin/groups/{group_id}/libraries/": {"get": {"description": "List all group repos\n\nPermission checking:\n1. only admin can perform this action.\n\n---\n# YAML\n\ntype:\n  Authorization:\n    required: true\n    type: string\n  group_id:\n    required: true\n    type: string\n\nparameters:\n    - name: Authorization\n      required: true\n      type: string\n      paramType: header\n    - name: group_id\n      required: true\n      type: string\n      paramType: path\n\nresponseMessages:\n    - code: 400\n      message: BAD_REQUEST\n    - code: 401\n      message: UNAUTHORIZED\n    - code: 404\n      message: NOT_FOUND\n    - code: 500\n      message: INTERNAL_SERVER_ERROR\n\nconsumes:\n    - application/json\nproduces:\n    - application/json", "parameters": [{"description": "", "required": true, "type": "string", "name": "group_id", "in": "path"}], "tags": ["api3"], "summary": "List all group repos", "operationId": "api3_admin_groups_libraries_list", "responses": {"200": {"description": ""}}}}, "/api3/admin/groups/{group_id}/libraries/{repo_id}/": {"delete": {"description": "Unshare repo from group\n\nPermission checking:\n1. only admin can perform this action.\n\n---\n# YAML\n\ntype:\n  Authorization:\n    required: true\n    type: string\n  group_id:\n    required: true\n    type: string\n  repo_id:\n    required: true\n    type: string\n\nparameters:\n    - name: Authorization\n      required: true\n      type: string\n      paramType: header\n    - name: group_id\n      required: true\n      type: string\n      paramType: path\n    - name: repo_id\n      required: true\n      type: string\n      paramType: path\n\nresponseMessages:\n    - code: 400\n      message: BAD_REQUEST\n    - code: 401\n      message: UNAUTHORIZED\n    - code: 404\n      message: NOT_FOUND\n    - code: 500\n      message: INTERNAL_SERVER_ERROR\n\nconsumes:\n    - application/json\nproduces:\n    - application/json", "parameters": [{"description": "", "required": true, "type": "string", "name": "repo_id", "in": "path"}, {"description": "", "required": true, "type": "string", "name": "group_id", "in": "path"}], "tags": ["api3"], "summary": "Unshare repo from group", "operationId": "api3_admin_groups_libraries_delete", "responses": {"204": {"description": ""}}}}, "/api3/admin/groups/{group_id}/members/": {"get": {"description": "List all group members\n\nPermission checking:\n1. only admin can perform this action.\n\n---\n# YAML\n\ntype:\n  Authorization:\n    required: true\n    type: string\n  group_id:\n    required: true\n    type: string\n  avatar_size:\n    required: false\n    type: string\n\nparameters:\n    - name: Authorization\n      required: true\n      type: string\n      paramType: header\n    - name: group_id\n      required: true\n      type: string\n      paramType: path\n    - name: avatar_size\n      required: false\n      type: string\n      paramType: query\n\nresponseMessages:\n    - code: 400\n      message: BAD_REQUEST\n    - code: 401\n      message: UNAUTHORIZED\n    - code: 404\n      message: NOT_FOUND\n    - code: 500\n      message: INTERNAL_SERVER_ERROR\n\nconsumes:\n    - application/json\nproduces:\n    - application/json", "parameters": [{"description": "", "required": true, "type": "string", "name": "group_id", "in": "path"}], "tags": ["api3"], "summary": "List all group members", "operationId": "api3_admin_groups_members_list", "responses": {"200": {"description": ""}}}, "post": {"description": "Bulk add group members.\n\nPermission checking:\n1. only admin can perform this action.\n\n---\n# YAML\n\ntype:\n  Authorization:\n    required: true\n    type: string\n  group_id:\n    required: true\n    type: string\n  email:\n    required: true\n    type: string\n\nparameters:\n    - name: Authorization\n      required: true\n      type: string\n      paramType: header\n    - name: group_id\n      required: true\n      type: string\n      paramType: path\n    - name: email\n      description: list of email\n      required: true\n      type: string\n      paramType: form\n\nresponseMessages:\n    - code: 400\n      message: BAD_REQUEST\n    - code: 401\n      message: UNAUTHORIZED\n    - code: 404\n      message: NOT_FOUND\n    - code: 500\n      message: INTERNAL_SERVER_ERROR\n\nconsumes:\n    - application/json\nproduces:\n    - application/json", "parameters": [{"description": "", "required": true, "type": "string", "name": "group_id", "in": "path"}], "tags": ["api3"], "summary": "Bulk add group members.", "operationId": "api3_admin_groups_members_create", "responses": {"201": {"description": ""}}}}, "/api3/admin/groups/{group_id}/members/{email}/": {"put": {"description": "update role of a group member\n\nPermission checking:\n1. only admin can perform this action.\n\n---\n# YAML\n\ntype:\n  Authorization:\n    required: true\n    type: string\n  group_id:\n    required: true\n    type: string\n  email:\n    required: true\n    type: string\n  is_admin:\n    required: true\n    type: string\n\nparameters:\n    - name: Authorization\n      required: true\n      type: string\n      paramType: header\n    - name: group_id\n      required: true\n      type: string\n      paramType: path\n    - name: email\n      required: true\n      type: string\n      paramType: path\n    - name: is_admin\n      description: true/false\n      required: true\n      type: string\n      paramType: form\n\nresponseMessages:\n    - code: 400\n      message: BAD_REQUEST\n    - code: 401\n      message: UNAUTHORIZED\n    - code: 404\n      message: NOT_FOUND\n    - code: 500\n      message: INTERNAL_SERVER_ERROR\n\nconsumes:\n    - application/json\nproduces:\n    - application/json", "parameters": [{"description": "", "required": true, "type": "string", "name": "group_id", "in": "path"}, {"description": "", "required": true, "type": "string", "name": "email", "in": "path"}], "tags": ["api3"], "summary": "update role of a group member", "operationId": "api3_admin_groups_members_update", "responses": {"200": {"description": ""}}}, "delete": {"description": "Delete an user from group\n\nPermission checking:\n1. only admin can perform this action.\n\n---\n# YAML\n\ntype:\n  Authorization:\n    required: true\n    type: string\n  group_id:\n    required: true\n    type: string\n  email:\n    required: true\n    type: string\n\nparameters:\n    - name: Authorization\n      required: true\n      type: string\n      paramType: header\n    - name: group_id\n      required: true\n      type: string\n      paramType: path\n    - name: email\n      required: true\n      type: string\n      paramType: path\n\nresponseMessages:\n    - code: 400\n      message: BAD_REQUEST\n    - code: 401\n      message: UNAUTHORIZED\n    - code: 403\n      message: FORBIDDEN\n    - code: 404\n      message: NOT_FOUND\n    - code: 500\n      message: INTERNAL_SERVER_ERROR\n\nconsumes:\n    - application/json\nproduces:\n    - application/json", "parameters": [{"description": "", "required": true, "type": "string", "name": "group_id", "in": "path"}, {"description": "", "required": true, "type": "string", "name": "email", "in": "path"}], "tags": ["api3"], "summary": "Delete an user from group", "operationId": "api3_admin_groups_members_delete", "responses": {"204": {"description": ""}}}}, "/api3/admin/tenants/": {"get": {"description": "Get all tenants", "parameters": [], "tags": ["api3"], "summary": "Get all tenants", "operationId": "api3_admin_tenants_list", "responses": {"200": {"description": ""}}}, "post": {"description": "Create a new tenant", "parameters": [], "tags": ["api3"], "summary": "Create a new tenant", "operationId": "api3_admin_tenants_create", "responses": {"201": {"description": ""}}}}, "/api3/admin/tenants/{inst_id}/": {"get": {"description": "Get tenant details", "parameters": [{"description": "", "required": true, "type": "string", "name": "inst_id", "in": "path"}], "tags": ["api3"], "summary": "Get tenant details", "operationId": "api3_admin_tenants_read", "responses": {"200": {"description": ""}}}, "put": {"description": "Update tenant quota", "parameters": [{"description": "", "required": true, "type": "string", "name": "inst_id", "in": "path"}], "tags": ["api3"], "summary": "Update tenant quota", "operationId": "api3_admin_tenants_update", "responses": {"200": {"description": ""}}}, "delete": {"description": "Delete an tenant", "parameters": [{"description": "", "required": true, "type": "string", "name": "inst_id", "in": "path"}], "tags": ["api3"], "summary": "Delete an tenant", "operationId": "api3_admin_tenants_delete", "responses": {"204": {"description": ""}}}}, "/api3/admin/tenants/{inst_id}/admins/{user_email}/": {"post": {"description": "Promote or revoke tenant admin", "parameters": [{"description": "", "required": true, "type": "string", "name": "user_email", "in": "path"}, {"description": "", "required": true, "type": "string", "name": "inst_id", "in": "path"}], "tags": ["api3"], "summary": "Promote or revoke tenant admin", "operationId": "api3_admin_tenants_admins_create", "responses": {"201": {"description": ""}}}}, "/api3/admin/tenants/{inst_id}/users/": {"post": {"description": "Add users to tenant", "parameters": [{"description": "", "required": true, "type": "string", "name": "inst_id", "in": "path"}], "tags": ["api3"], "summary": "Add users to tenant", "operationId": "api3_admin_tenants_users_create", "responses": {"201": {"description": ""}}}}, "/api3/admin/tenants/{inst_id}/users/{user_email}/": {"delete": {"description": "Remove users from tenant", "parameters": [{"description": "", "required": true, "type": "string", "name": "user_email", "in": "path"}, {"description": "", "required": true, "type": "string", "name": "inst_id", "in": "path"}], "tags": ["api3"], "summary": "Remove users from tenant", "operationId": "api3_admin_tenants_users_delete", "responses": {"204": {"description": ""}}}}, "/api3/admin/libraries/": {"get": {"description": "List 'all' libraries (by name/owner/page)\n\nPermission checking:\n1. only admin can perform this action.\n\n---\n# YAML\n\ntype:\n  Authorization:\n    required: true\n    type: string\n  name:\n    required: false\n    type: string\n  owner:\n    required: false\n    type: string\n  page:\n    required: false\n    type: string\n  per_page:\n    required: false\n    type: string\n\nparameters:\n    - name: Authorization\n      required: true\n      type: string\n      paramType: header\n    - name: name\n      required: false\n      type: string\n      paramType: query\n      description: name of the library for search\n    - name: owner\n      required: false\n      type: string\n      paramType: query\n      description: library owner email\n    - name: page\n      required: false\n      type: string\n      paramType: query\n    - name: per_page\n      required: false\n      type: string\n      paramType: query\n\nresponseMessages:\n    - code: 401\n      message: UNAUTHORIZED\n    - code: 500\n      message: INTERNAL_SERVER_ERROR\n\nconsumes:\n    - application/json\nproduces:\n    - application/json", "parameters": [], "tags": ["api3"], "summary": "List 'all' libraries (by name/owner/page)", "operationId": "api3_admin_libraries_list", "responses": {"200": {"description": ""}}}, "post": {"description": "Admin create library\n\nPermission checking:\n1. only admin can perform this action.\n\n---\n# YAML\n\ntype:\n  Authorization:\n    required: true\n    type: string\n  name:\n    required: true\n    type: string\n  owner:\n    required: false\n    type: string\n\nparameters:\n    - name: Authorization\n      required: true\n      type: string\n      paramType: header\n    - name: name\n      required: true\n      type: string\n      paramType: form\n    - name: owner\n      description: owner email, default is current admin\n      required: false\n      type: string\n      paramType: form\n\nresponseMessages:\n    - code: 400\n      message: BAD_REQUEST\n    - code: 401\n      message: UNAUTHORIZED\n    - code: 404\n      message: NOT_FOUND\n    - code: 500\n      message: INTERNAL_SERVER_ERROR\n\nconsumes:\n    - application/json\nproduces:\n    - application/json", "parameters": [], "tags": ["api3"], "summary": "Admin create library", "operationId": "api3_admin_libraries_create", "responses": {"201": {"description": ""}}}}, "/api3/admin/libraries/{repo_id}/": {"put": {"description": "transfer a library\n\nPermission checking:\n1. only admin can perform this action.\n\n---\n# YAML\n\ntype:\n  Authorization:\n    required: true\n    type: string\n  repo_id:\n    required: true\n    type: string\n  owner:\n    required: true\n    type: string\n\nparameters:\n    - name: Authorization\n      required: true\n      type: string\n      paramType: header\n    - name: repo_id\n      required: true\n      type: string\n      paramType: path\n    - name: owner\n      description: owner email\n      required: true\n      type: string\n      paramType: form\n\nresponseMessages:\n    - code: 400\n      message: BAD_REQUEST\n    - code: 401\n      message: UNAUTHORIZED\n    - code: 403\n      message: FORBIDDEN\n    - code: 404\n      message: NOT_FOUND\n    - code: 500\n      message: INTERNAL_SERVER_ERROR\n\nconsumes:\n    - application/json\nproduces:\n    - application/json", "parameters": [{"description": "", "required": true, "type": "string", "name": "repo_id", "in": "path"}], "tags": ["api3"], "summary": "transfer a library", "operationId": "api3_admin_libraries_update", "responses": {"200": {"description": ""}}}, "delete": {"description": "delete a library\n\nPermission checking:\n1. only admin can perform this action.\n\n---\n# YAML\n\ntype:\n  Authorization:\n    required: true\n    type: string\n  repo_id:\n    required: true\n    type: string\n\nparameters:\n    - name: Authorization\n      required: true\n      type: string\n      paramType: header\n    - name: repo_id\n      required: true\n      type: string\n      paramType: path\n\nresponseMessages:\n    - code: 400\n      message: BAD_REQUEST\n    - code: 401\n      message: UNAUTHORIZED\n    - code: 500\n      message: INTERNAL_SERVER_ERROR\n\nconsumes:\n    - application/json\nproduces:\n    - application/json", "parameters": [{"description": "", "required": true, "type": "string", "name": "repo_id", "in": "path"}], "tags": ["api3"], "summary": "delete a library", "operationId": "api3_admin_libraries_delete", "responses": {"204": {"description": ""}}}}, "/api3/admin/libraries/{repo_id}/dirent/": {"get": {"description": "get info of a single file/folder in a library\n---\n# YAML\n\ntype:\n  Authorization:\n    required: true\n    type: string\n  repo_id:\n    required: true\n    type: string\n  path:\n    required: true\n    type: string\n  dl:\n    required: false\n    type: string\n\nparameters:\n    - name: Authorization\n      required: true\n      type: string\n      paramType: header\n    - name: repo_id\n      required: true\n      type: string\n      paramType: form\n    - name: path\n      description: Path\n      required: true\n      type: string\n      paramType: query\n    - name: dl\n      description: download\n      required: false\n      type: string\n      paramType: query\n\nresponseMessages:\n    - code: 400\n      message: BAD_REQUEST\n    - code: 401\n      message: UNAUTHORIZED\n    - code: 403\n      message: FORBIDDEN\n    - code: 404\n      message: NOT_FOUND\n    - code: 500\n      message: INTERNAL_SERVER_ERROR\n\nconsumes:\n    - application/json\nproduces:\n    - application/json", "parameters": [{"description": "", "required": true, "type": "string", "name": "repo_id", "in": "path"}], "tags": ["api3"], "summary": "get info of a single file/folder in a library", "operationId": "api3_admin_libraries_dirent_list", "responses": {"200": {"description": ""}}}, "delete": {"description": "delete a single file/folder in a library\n---\n# YAML\n\ntype:\n  Authorization:\n    required: true\n    type: string\n  repo_id:\n    required: true\n    type: string\n  path:\n    required: true\n    type: string\n\nparameters:\n    - name: Authorization\n      required: true\n      type: string\n      paramType: header\n    - name: repo_id\n      required: true\n      type: string\n      paramType: path\n    - name: path\n      description: Path\n      required: true\n      type: string\n      paramType: query\n\nresponseMessages:\n    - code: 400\n      message: BAD_REQUEST\n    - code: 401\n      message: UNAUTHORIZED\n    - code: 403\n      message: FORBIDDEN\n    - code: 404\n      message: NOT_FOUND\n    - code: 500\n      message: INTERNAL_SERVER_ERROR\n\nconsumes:\n    - application/json\nproduces:\n    - application/json", "parameters": [{"description": "", "required": true, "type": "string", "name": "repo_id", "in": "path"}], "tags": ["api3"], "summary": "delete a single file/folder in a library", "operationId": "api3_admin_libraries_dirent_delete", "responses": {"204": {"description": ""}}}}, "/api3/admin/libraries/{repo_id}/dirents/": {"get": {"description": "get all file/folder in a library\n---\n# YAML\n\ntype:\n  Authorization:\n    required: true\n    type: string\n  repo_id:\n    required: true\n    type: string\n  parent_dir:\n    required: false\n    type: string\n\nparameters:\n    - name: Authorization\n      required: true\n      type: string\n      paramType: header\n    - name: repo_id\n      required: true\n      type: string\n      paramType: path\n    - name: parent_dir\n      description: default \"/\"\n      required: false\n      type: string\n      paramType: query\n\nresponseMessages:\n    - code: 400\n      message: BAD_REQUEST\n    - code: 401\n      message: UNAUTHORIZED\n    - code: 403\n      message: FORBIDDEN\n    - code: 404\n      message: NOT_FOUND\n    - code: 500\n      message: INTERNAL_SERVER_ERROR\n\nconsumes:\n    - application/json\nproduces:\n    - application/json", "parameters": [{"description": "", "required": true, "type": "string", "name": "repo_id", "in": "path"}], "tags": ["api3"], "summary": "get all file/folder in a library", "operationId": "api3_admin_libraries_dirents_list", "responses": {"200": {"description": ""}}}, "post": {"description": "create file/folder in a library\n---\n# YAML\n\ntype:\n  Authorization:\n    required: true\n    type: string\n  repo_id:\n    required: true\n    type: string\n  parent_dir:\n    required: false\n    type: string\n  obj_name:\n    required: true\n    type: string\n\nparameters:\n    - name: Authorization\n      required: true\n      type: string\n      paramType: header\n    - name: repo_id\n      required: true\n      type: string\n      paramType: path\n    - name: parent_dir\n      required: false\n      type: string\n      paramType: formData\n    - name: obj_name\n      required: true\n      type: string\n      paramType: formData\n\nresponseMessages:\n    - code: 400\n      message: BAD_REQUEST\n    - code: 401\n      message: UNAUTHORIZED\n    - code: 403\n      message: FORBIDDEN\n    - code: 404\n      message: NOT_FOUND\n    - code: 500\n      message: INTERNAL_SERVER_ERROR\n\nconsumes:\n    - application/json\nproduces:\n    - application/json", "parameters": [{"description": "", "required": true, "type": "string", "name": "repo_id", "in": "path"}], "tags": ["api3"], "summary": "create file/folder in a library", "operationId": "api3_admin_libraries_dirents_create", "responses": {"201": {"description": ""}}}}, "/api3/admin/libraries/{repo_id}/password/": {"post": {"description": "Check Repo password\n---\n# YAML\n\ntype:\n  Authorization:\n    required: true\n    type: string\n  repo_id:\n    required: true\n    type: string\n  password:\n    required: true\n    type: string\n\nparameters:\n    - name: Authorization\n      required: true\n      type: string\n      paramType: header\n    - name: repo_id\n      required: true\n      type: string\n      paramType: path\n    - name: password\n      description: Repo Password\n      required: true\n      type: string\n      paramType: form\n\nresponseMessages:\n    - code: 400\n      message: BAD_REQUEST\n    - code: 401\n      message: UNAUTHORIZED\n    - code: 404\n      message: NOT_FOUND\n    - code: 500\n      message: INTERNAL_SERVER_ERROR\n\nconsumes:\n    - application/json\nproduces:\n    - application/json", "parameters": [{"description": "", "required": true, "type": "string", "name": "repo_id", "in": "path"}], "tags": ["api3"], "summary": "Check Repo password", "operationId": "api3_admin_libraries_password_create", "responses": {"201": {"description": ""}}}}, "/api3/admin/license/": {"post": {"tags": ["api3"], "responses": {"201": {"description": ""}}, "parameters": [], "operationId": "api3_admin_license_create"}}, "/api3/admin/logo/": {"post": {"description": "Change logo of the page\n---\n# YAML\n\ntype:\n  Authorization:\n    required: true\n    type: string\n  start:\n    required: true\n    type: string\n  limit:\n    required: true\n    type: string\n  scope:\n    required: false\n    type: string\n\nparameters:\n  - name: Authorization\n    required: true\n    type: string\n    paramType: header\n  - name: logo\n    required: true\n    type: file\n    paramType: formData\n    description: new logo file\n\nresponseMessages:\n  - code: 400\n    message: BAD_REQUEST\n  - code: 401\n    message: UNAUTHORIZED\n  - code: 403\n    message: FORBIDDEN\n  - code: 404\n    message: NOT_FOUND\n  - code: 500\n    message: INTERNAL_SERVER_ERROR\n\nconsumes:\n  - application/json\nproduces:\n  - application/json", "parameters": [], "tags": ["api3"], "summary": "Change logo of the page", "operationId": "api3_admin_logo_create", "responses": {"201": {"description": ""}}}}, "/api3/admin/logo/reset/": {"post": {"description": "Set logo to the default logo\n---\n# YAML\n\ntype:\n  Authorization:\n    required: true\n    type: string\n  start:\n    required: true\n    type: string\n  limit:\n    required: true\n    type: string\n  scope:\n    required: false\n    type: string\n\nparameters:\n  - name: Authorization\n    required: true\n    type: string\n    paramType: header\n\nresponseMessages:\n  - code: 400\n    message: BAD_REQUEST\n  - code: 401\n    message: UNAUTHORIZED\n  - code: 403\n    message: FORBIDDEN\n  - code: 404\n    message: NOT_FOUND\n  - code: 500\n    message: INTERNAL_SERVER_ERROR\n\nconsumes:\n  - application/json\nproduces:\n  - application/json", "parameters": [], "tags": ["api3"], "summary": "Set logo to the default logo", "operationId": "api3_admin_logo_reset_create", "responses": {"201": {"description": ""}}}}, "/api3/admin/public-shares/": {"get": {"description": "Get all public share links\n---\n# YAML\n\ntype:\n  Authorization:\n    required: true\n    type: string\n\nparameters:\n    - name: Authorization\n      required: true\n      type: string\n      paramType: header\n\nresponseMessages:\n    - code: 400\n      message: BAD_REQUEST\n    - code: 401\n      message: UNAUTHORIZED\n    - code: 403\n      message: FORBIDDEN\n    - code: 404\n      message: NOT_FOUND\n    - code: 500\n      message: INTERNAL_SERVER_ERROR\n\nconsumes:\n    - application/json\nproduces:\n    - application/json", "parameters": [], "tags": ["api3"], "summary": "Get all public share links", "operationId": "api3_admin_public-shares_list", "responses": {"200": {"description": ""}}}}, "/api3/admin/shares/": {"get": {"description": "List user/group shares\n\nPermission checking:\n1. admin user.\n\n---\n# YAML\n\ntype:\n  Authorization:\n    required: true\n    type: string\n  repo_id:\n    required: true\n    type: string\n  path:\n    required: false\n    type: string\n  share_type:\n    required: true\n    type: string\n\nparameters:\n    - name: Authorization\n      required: true\n      type: string\n      paramType: header\n    - name: repo_id\n      required: true\n      type: string\n      paramType: query\n    - name: path\n      description: Path, default is \"/\"\n      required: true\n      type: string\n      paramType: query\n    - name: share_type\n      description: user or group\n      required: true\n      type: string\n      paramType: query\n\nresponseMessages:\n    - code: 400\n      message: BAD_REQUEST\n    - code: 401\n      message: UNAUTHORIZED\n    - code: 403\n      message: FORBIDDEN\n    - code: 404\n      message: NOT_FOUND\n    - code: 500\n      message: INTERNAL_SERVER_ERROR\n\nconsumes:\n    - application/json\nproduces:\n    - application/json", "parameters": [], "tags": ["api3"], "summary": "List user/group shares", "operationId": "api3_admin_shares_list", "responses": {"200": {"description": ""}}}, "post": {"description": "Admin share a library to user/group.\n\nPermission checking:\n1. admin user.\n\n---\n# YAML\n\ntype:\n  Authorization:\n    required: true\n    type: string\n  repo_id:\n    required: true\n    type: string\n  path:\n    required: false\n    type: string\n  share_type:\n    required: true\n    type: string\n  share_to:\n    required: true\n    type: string\n  permission:\n    required: true\n    type: string\n\nparameters:\n    - name: Authorization\n      required: true\n      type: string\n      paramType: header\n    - name: repo_id\n      required: true\n      type: string\n      paramType: query\n    - name: path\n      description: Path, default is \"/\"\n      required: true\n      type: string\n      paramType: query\n    - name: share_type\n      description: user or group\n      required: true\n      type: string\n      paramType: query\n    - name: share_to\n      description: list of email\n      required: true\n      type: string\n      paramType: query\n    - name: permission\n      description: r or rw\n      required: true\n      type: string\n      paramType: query\n\nresponseMessages:\n    - code: 400\n      message: BAD_REQUEST\n    - code: 401\n      message: UNAUTHORIZED\n    - code: 403\n      message: FORBIDDEN\n    - code: 404\n      message: NOT_FOUND\n    - code: 500\n      message: INTERNAL_SERVER_ERROR\n\nconsumes:\n    - application/json\nproduces:\n    - application/json", "parameters": [], "tags": ["api3"], "summary": "Admin share a library to user/group.", "operationId": "api3_admin_shares_create", "responses": {"201": {"description": ""}}}, "put": {"description": "Update user/group share permission.\n\nPermission checking:\n1. admin user.\n\n---\n# YAML\n\ntype:\n  Authorization:\n    required: true\n    type: string\n  repo_id:\n    required: true\n    type: string\n  path:\n    required: false\n    type: string\n  share_type:\n    required: true\n    type: string\n  share_to:\n    required: true\n    type: string\n  permission:\n    required: true\n    type: string\n\nparameters:\n    - name: Authorization\n      required: true\n      type: string\n      paramType: header\n    - name: repo_id\n      required: true\n      type: string\n      paramType: query\n    - name: path\n      description: Path, default is \"/\"\n      required: true\n      type: string\n      paramType: query\n    - name: share_type\n      description: user or group\n      required: true\n      type: string\n      paramType: query\n    - name: share_to\n      description: list of email\n      required: true\n      type: string\n      paramType: query\n    - name: permission\n      description: r or rw\n      required: true\n      type: string\n      paramType: query\n\nresponseMessages:\n    - code: 400\n      message: BAD_REQUEST\n    - code: 401\n      message: UNAUTHORIZED\n    - code: 403\n      message: FORBIDDEN\n    - code: 404\n      message: NOT_FOUND\n    - code: 500\n      message: INTERNAL_SERVER_ERROR\n\nconsumes:\n    - application/json\nproduces:\n    - application/json", "parameters": [], "tags": ["api3"], "summary": "Update user/group share permission.", "operationId": "api3_admin_shares_update", "responses": {"200": {"description": ""}}}, "delete": {"description": "Delete user/group share permission.\n\nPermission checking:\n1. admin user.\n\n---\n# YAML\n\ntype:\n  Authorization:\n    required: true\n    type: string\n  repo_id:\n    required: true\n    type: string\n  path:\n    required: false\n    type: string\n  share_type:\n    required: true\n    type: string\n  share_to:\n    required: true\n    type: string\n\nparameters:\n    - name: Authorization\n      required: true\n      type: string\n      paramType: header\n    - name: repo_id\n      required: true\n      type: string\n      paramType: query\n    - name: path\n      description: Path, default is \"/\"\n      required: true\n      type: string\n      paramType: query\n    - name: share_type\n      description: user or group\n      required: true\n      type: string\n      paramType: query\n    - name: share_to\n      description: list of email\n      required: true\n      type: string\n      paramType: query\n\nresponseMessages:\n    - code: 400\n      message: BAD_REQUEST\n    - code: 401\n      message: UNAUTHORIZED\n    - code: 403\n      message: FORBIDDEN\n    - code: 404\n      message: NOT_FOUND\n    - code: 500\n      message: INTERNAL_SERVER_ERROR\n\nconsumes:\n    - application/json\nproduces:\n    - application/json", "parameters": [], "tags": ["api3"], "summary": "Delete user/group share permission.", "operationId": "api3_admin_shares_delete", "responses": {"204": {"description": ""}}}}, "/api3/admin/sysinfo/": {"get": {"description": "Show system info.", "parameters": [], "tags": ["api3"], "summary": "Show system info.", "operationId": "api3_admin_sysinfo_list", "responses": {"200": {"description": ""}}}}, "/api3/admin/sysnotifications/": {"get": {"tags": ["api3"], "responses": {"200": {"description": ""}}, "parameters": [], "operationId": "api3_admin_sysnotifications_list"}, "post": {"description": "Add new system notification.\n---\n# YAML\n\ntype:\n  Authorization:\n    required: true\n    type: string\n  message:\n    required: true\n    type: string\n  primary:\n    required: true\n    type: boolean\n\nparameters:\n    - name: Authorization\n      required: true\n      type: string\n      paramType: header\n    - name: message\n      description: notification message\n      required: true\n      type: string\n      paramType: formData\n    - name: primary\n      description: is notification the default one?\n      required: false\n      type: boolean\n      paramType: formData\n\nresponseMessages:\n    - code: 400\n      message: BAD_REQUEST\n    - code: 401\n      message: UNAUTHORIZED\n    - code: 403\n      message: FORBIDDEN\n    - code: 404\n      message: NOT_FOUND\n    - code: 500\n      message: INTERNAL_SERVER_ERROR\n\nconsumes:\n    - application/json\nproduces:\n    - application/json", "parameters": [], "tags": ["api3"], "summary": "Add new system notification.", "operationId": "api3_admin_sysnotifications_create", "responses": {"201": {"description": ""}}}}, "/api3/admin/sysnotifications/{notification_id}/": {"put": {"description": "Update notification details\n---\n# YAML\n\ntype:\n  Authorization:\n    required: true\n    type: string\n\nparameters:\n    - name: Authorization\n      required: true\n      type: string\n      paramType: header\n    - name: notification_id\n      description: id of notification\n      required: true\n      type: string\n      paramType: formData\n    - name: message\n      description: notification message\n      required: true\n      type: string\n      paramType: body\n    - name: primary\n      description: set current notification as primary or not\n      required: true\n      type: boolean\n      paramType: formData\n\nresponseMessages:\n    - code: 400\n      message: BAD_REQUEST\n    - code: 401\n      message: UNAUTHORIZED\n    - code: 403\n      message: FORBIDDEN\n    - code: 404\n      message: NOT_FOUND\n    - code: 500\n      message: INTERNAL_SERVER_ERROR\n\nconsumes:\n    - application/json\nproduces:\n    - application/json", "parameters": [{"description": "", "required": true, "type": "string", "name": "notification_id", "in": "path"}], "tags": ["api3"], "summary": "Update notification details", "operationId": "api3_admin_sysnotifications_update", "responses": {"200": {"description": ""}}}, "delete": {"description": "Remove a notification\n---\n# YAML\n\ntype:\n  Authorization:\n    required: true\n    type: string\n\nparameters:\n    - name: Authorization\n      required: true\n      type: string\n      paramType: header\n    - name: notification_id\n      description: id of notification\n      required: true\n      type: string\n      paramType: path\n\nresponseMessages:\n    - code: 400\n      message: BAD_REQUEST\n    - code: 401\n      message: UNAUTHORIZED\n    - code: 403\n      message: FORBIDDEN\n    - code: 404\n      message: NOT_FOUND\n    - code: 500\n      message: INTERNAL_SERVER_ERROR\n\nconsumes:\n    - application/json\nproduces:\n    - application/json", "parameters": [{"description": "", "required": true, "type": "string", "name": "notification_id", "in": "path"}], "tags": ["api3"], "summary": "Remove a notification", "operationId": "api3_admin_sysnotifications_delete", "responses": {"204": {"description": ""}}}}, "/api3/admin/system-libraries/": {"get": {"description": "Get list system libraries\n---\n# YAML\n\ntype:\n  Authorization:\n    required: true\n    type: string\n  repo_id:\n    required: true\n    type: string\n  folder_path:\n    required: false\n    type: string\n\nparameters:\n    - name: Authorization\n      required: true\n      type: string\n      paramType: header\n\nresponseMessages:\n    - code: 401\n      message: UNAUTHORIZED\n    - code: 403\n      message: FORBIDDEN\n    - code: 404\n      message: NOT_FOUND\n    - code: 500\n      message: INTERNAL_SERVER_ERROR\n\nconsumes:\n    - application/json\nproduces:\n    - application/json", "parameters": [], "tags": ["api3"], "summary": "Get list system libraries", "operationId": "api3_admin_system-libraries_list", "responses": {"200": {"description": ""}}}}, "/api3/admin/system-libraries/upload-links": {"get": {"description": "Get admin system libs upload link\n---\n# YAML\n\ntype:\n  Authorization:\n    required: true\n    type: string\n  repo_id:\n    required: true\n    type: string\n  folder_path:\n    required: false\n    type: string\n\nparameters:\n    - name: Authorization\n      required: true\n      type: string\n      paramType: header\n    - name: from\n      required: false\n      type: string\n      paramType: query\n      description: web or api. Default to web\n    - name: path\n      required: false\n      type: string\n      paramType: query\n      description: path for upload. Default to /\n\nresponseMessages:\n    - code: 401\n      message: UNAUTHORIZED\n    - code: 403\n      message: FORBIDDEN\n    - code: 404\n      message: NOT_FOUND\n    - code: 500\n      message: INTERNAL_SERVER_ERROR\n\nconsumes:\n    - application/json\nproduces:\n    - application/json", "parameters": [], "tags": ["api3"], "summary": "Get admin system libs upload link", "operationId": "api3_admin_system-libraries_upload-links_list", "responses": {"200": {"description": ""}}}}, "/api3/admin/trash_libraries/": {"get": {"description": "List deleted repos (by owner)\n---\n# YAML\n\ntype:\n  Authorization:\n    required: true\n    type: string\n  start:\n    required: true\n    type: string\n  limit:\n    required: true\n    type: string\n  scope:\n    required: false\n    type: string\n\nparameters:\n  - name: Authorization\n    required: true\n    type: string\n    paramType: header\n  - name: owner\n    description: email of the owner\n    required: false\n    type: string\n    paramType: query\n  - name: page\n    description: default to page 1\n    required: false\n    type: string\n    paramType: query\n  - name: per_page\n    description: items per page, default to 100\n    required: false\n    type: string\n    paramType: query\n\nresponseMessages:\n  - code: 400\n    message: BAD_REQUEST\n  - code: 401\n    message: UNAUTHORIZED\n  - code: 403\n    message: FORBIDDEN\n  - code: 404\n    message: NOT_FOUND\n  - code: 500\n    message: INTERNAL_SERVER_ERROR\n\nconsumes:\n  - application/json\nproduces:\n  - application/json", "parameters": [], "tags": ["api3"], "summary": "List deleted repos (by owner)", "operationId": "api3_admin_trash_libraries_list", "responses": {"200": {"description": ""}}}}, "/api3/admin/trash_libraries/{repo_id}/": {"put": {"description": "restore a deleted library\n\nPermission checking:\n1. only admin can perform this action.\n---\n# YAML\n\ntype:\n  Authorization:\n    required: true\n    type: string\n  start:\n    required: true\n    type: string\n  limit:\n    required: true\n    type: string\n  scope:\n    required: false\n    type: string\n\nparameters:\n  - name: Authorization\n    required: true\n    type: string\n    paramType: header\n  - name: repo_id\n    description: id of the repo for restoring\n    required: true\n    type: string\n    paramType: path\n\nresponseMessages:\n  - code: 400\n    message: BAD_REQUEST\n  - code: 401\n    message: UNAUTHORIZED\n  - code: 403\n    message: FORBIDDEN\n  - code: 404\n    message: NOT_FOUND\n  - code: 500\n    message: INTERNAL_SERVER_ERROR\n\nconsumes:\n  - application/json\nproduces:\n  - application/json", "parameters": [{"description": "", "required": true, "type": "string", "name": "repo_id", "in": "path"}], "tags": ["api3"], "summary": "restore a deleted library", "operationId": "api3_admin_trash_libraries_update", "responses": {"200": {"description": ""}}}, "delete": {"description": "permanently delete a deleted library\n\nPermission checking:\n1. only admin can perform this action.\n---\n# YAML\n\ntype:\n  Authorization:\n    required: true\n    type: string\n  start:\n    required: true\n    type: string\n  limit:\n    required: true\n    type: string\n  scope:\n    required: false\n    type: string\n\nparameters:\n  - name: Authorization\n    required: true\n    type: string\n    paramType: header\n  - name: repo_id\n    description: id of the repo for permanent delete\n    required: true\n    type: string\n    paramType: path\n\nresponseMessages:\n  - code: 400\n    message: BAD_REQUEST\n  - code: 401\n    message: UNAUTHORIZED\n  - code: 403\n    message: FORBIDDEN\n  - code: 404\n    message: NOT_FOUND\n  - code: 500\n    message: INTERNAL_SERVER_ERROR\n\nconsumes:\n  - application/json\nproduces:\n  - application/json", "parameters": [{"description": "", "required": true, "type": "string", "name": "repo_id", "in": "path"}], "tags": ["api3"], "summary": "permanently delete a deleted library", "operationId": "api3_admin_trash_libraries_delete", "responses": {"204": {"description": ""}}}}, "/api3/admin/upload-links/{token}/": {"delete": {"description": "Delete upload link\n---\n# YAML\n\ntype:\n  Authorization:\n    required: true\n    type: string\n\nparameters:\n    - name: Authorization\n      required: true\n      type: string\n      paramType: header\n    - name: token\n      description: upload link token\n      required: true\n      type: string\n      paramType: path\n\nresponseMessages:\n    - code: 400\n      message: BAD_REQUEST\n    - code: 401\n      message: UNAUTHORIZED\n    - code: 403\n      message: FORBIDDEN\n    - code: 404\n      message: NOT_FOUND\n    - code: 500\n      message: INTERNAL_SERVER_ERROR\n\nconsumes:\n    - application/json\nproduces:\n    - application/json", "parameters": [{"description": "", "required": true, "type": "string", "name": "token", "in": "path"}], "tags": ["api3"], "summary": "Delete upload link", "operationId": "api3_admin_upload-links_delete", "responses": {"204": {"description": ""}}}}, "/api3/admin/user-info/download-link/{token}/": {"delete": {"description": "Remove share download links.\n---\n# YAML\n\ntype:\n  Authorization:\n    required: true\n    type: string\n  start:\n    required: true\n    type: string\n  limit:\n    required: true\n    type: string\n  scope:\n    required: false\n    type: string\n\nparameters:\n    - name: Authorization\n      required: true\n      type: string\n      paramType: header\n    - name: token\n      description: download link token\n      required: true\n      type: string\n      paramType: path\n    \n\nresponseMessages:\n    - code: 400\n      message: BAD_REQUEST\n    - code: 401\n      message: UNAUTHORIZED\n    - code: 403\n      message: FORBIDDEN\n    - code: 404\n      message: NOT_FOUND\n    - code: 500\n      message: INTERNAL_SERVER_ERROR\n\nconsumes:\n    - application/json\nproduces:\n    - application/json", "parameters": [{"description": "", "required": true, "type": "string", "name": "token", "in": "path"}], "tags": ["api3"], "summary": "Remove share download links.", "operationId": "api3_admin_user-info_download-link_delete", "responses": {"204": {"description": ""}}}}, "/api3/admin/user-info/groups/{group_id}/": {"delete": {"description": "Remove group from groupadmin page. Only system admin can perform this\noperation.\n---\n# YAML\n\ntype:\n  Authorization:\n    required: true\n    type: string\n  start:\n    required: true\n    type: string\n  limit:\n    required: true\n    type: string\n  scope:\n    required: false\n    type: string\n\nparameters:\n    - name: Authorization\n      required: true\n      type: string\n      paramType: header\n    - name: group_id\n      description: group id\n      required: true\n      type: string\n      paramType: path\n    \n\nresponseMessages:\n    - code: 400\n      message: BAD_REQUEST\n    - code: 401\n      message: UNAUTHORIZED\n    - code: 403\n      message: FORBIDDEN\n    - code: 404\n      message: NOT_FOUND\n    - code: 500\n      message: INTERNAL_SERVER_ERROR\n\nconsumes:\n    - application/json\nproduces:\n    - application/json", "parameters": [{"description": "", "required": true, "type": "string", "name": "group_id", "in": "path"}], "tags": ["api3"], "summary": "Remove group from groupadmin page. Only system admin can perform this", "operationId": "api3_admin_user-info_groups_delete", "responses": {"204": {"description": ""}}}}, "/api3/admin/user-info/lib/transfer/": {"post": {"description": "Transfer a repo to others.\n---\n# YAML\n\ntype:\n  Authorization:\n    required: true\n    type: string\n  start:\n    required: true\n    type: string\n  limit:\n    required: true\n    type: string\n  scope:\n    required: false\n    type: string\n\nparameters:\n    - name: Authorization\n      required: true\n      type: string\n      paramType: header\n    - name: email\n      description: new owner email\n      required: true\n      type: string\n      paramType: formData\n    - name: repo_id\n      description: id of the transfered repo\n      required: true\n      type: string\n      paramType: formData\n    \n\nresponseMessages:\n    - code: 400\n      message: BAD_REQUEST\n    - code: 401\n      message: UNAUTHORIZED\n    - code: 403\n      message: FORBIDDEN\n    - code: 404\n      message: NOT_FOUND\n    - code: 500\n      message: INTERNAL_SERVER_ERROR\n\nconsumes:\n    - application/json\nproduces:\n    - application/json", "parameters": [], "tags": ["api3"], "summary": "Transfer a repo to others.", "operationId": "api3_admin_user-info_lib_transfer_create", "responses": {"201": {"description": ""}}}}, "/api3/admin/user-info/upload-link/{token}/": {"delete": {"description": "Remove share upload links.\n---\n# YAML\n\ntype:\n  Authorization:\n    required: true\n    type: string\n  start:\n    required: true\n    type: string\n  limit:\n    required: true\n    type: string\n  scope:\n    required: false\n    type: string\n\nparameters:\n    - name: Authorization\n      required: true\n      type: string\n      paramType: header\n    - name: token\n      description: upload link token\n      required: true\n      type: string\n      paramType: path\n    \n\nresponseMessages:\n    - code: 400\n      message: BAD_REQUEST\n    - code: 401\n      message: UNAUTHORIZED\n    - code: 403\n      message: FORBIDDEN\n    - code: 404\n      message: NOT_FOUND\n    - code: 500\n      message: INTERNAL_SERVER_ERROR\n\nconsumes:\n    - application/json\nproduces:\n    - application/json", "parameters": [{"description": "", "required": true, "type": "string", "name": "token", "in": "path"}], "tags": ["api3"], "summary": "Remove share upload links.", "operationId": "api3_admin_user-info_upload-link_delete", "responses": {"204": {"description": ""}}}}, "/api3/admin/users/": {"get": {"description": "List all users from database for system admin.\n---\n# YAML\n\ntype:\n  Authorization:\n    required: true\n    type: string\n  page:\n    required: true\n    type: string\n  per_page:\n    required: true\n    type: string\n  scope:\n    required: false\n    type: string\n\nparameters:\n  - name: Authorization\n    required: true\n    type: string\n    paramType: header\n  - name: filer\n    description: free or paid\n    required: false\n    type: string\n    paramType: query\n  - name: page\n    description: default 1\n    required: false\n    type: string\n    paramType: query\n  - name: per_page\n    description: default 25\n    required: false\n    type: string\n    paramType: query\n\nresponseMessages:\n  - code: 400\n    message: BAD_REQUEST\n  - code: 401\n    message: UNAUTHORIZED\n  - code: 403\n    message: FORBIDDEN\n  - code: 404\n    message: NOT_FOUND\n  - code: 500\n    message: INTERNAL_SERVER_ERROR\n\nconsumes:\n  - application/json\nproduces:\n  - application/json", "parameters": [], "tags": ["api3"], "summary": "List all users from database for system admin.", "operationId": "api3_admin_users_list", "responses": {"200": {"description": ""}}}}, "/api3/admin/users/admins/": {"get": {"description": "List admins for system admins\n---\n# YAML\n\ntype:\n  Authorization:\n    required: true\n    type: string\n  start:\n    required: true\n    type: string\n  limit:\n    required: true\n    type: string\n  scope:\n    required: false\n    type: string\n\nparameters:\n  - name: Authorization\n    required: true\n    type: string\n    paramType: header\n\nresponseMessages:\n  - code: 400\n    message: BAD_REQUEST\n  - code: 401\n    message: UNAUTHORIZED\n  - code: 403\n    message: FORBIDDEN\n  - code: 404\n    message: NOT_FOUND\n  - code: 500\n    message: INTERNAL_SERVER_ERROR\n\nconsumes:\n  - application/json\nproduces:\n  - application/json", "parameters": [], "tags": ["api3"], "summary": "List admins for system admins", "operationId": "api3_admin_users_admins_list", "responses": {"200": {"description": ""}}}}, "/api3/admin/users/admins/{user_email}/": {"post": {"description": "Revoke admin permission of an admin\n---\n# YAML\n\ntype:\n  Authorization:\n    required: true\n    type: string\n  start:\n    required: true\n    type: string\n  limit:\n    required: true\n    type: string\n  scope:\n    required: false\n    type: string\n\nparameters:\n  - name: Authorization\n    required: true\n    type: string\n    paramType: header\n  - name: user_email\n    required: true\n    type: string\n    paramType: path\n    description: email of the admin who going to be revoked\n\nresponseMessages:\n  - code: 400\n    message: BAD_REQUEST\n  - code: 401\n    message: UNAUTHORIZED\n  - code: 403\n    message: FORBIDDEN\n  - code: 404\n    message: NOT_FOUND\n  - code: 500\n    message: INTERNAL_SERVER_ERROR\n\nconsumes:\n  - application/json\nproduces:\n  - application/json", "parameters": [{"description": "", "required": true, "type": "string", "name": "user_email", "in": "path"}], "tags": ["api3"], "summary": "Revoke admin permission of an admin", "operationId": "api3_admin_users_admins_create", "responses": {"201": {"description": ""}}}}, "/api3/admin/users/batch/": {"post": {"description": "Set user quota, set user tenant, delete users, in batch.\n---\n# YAML\n\ntype:\n  Authorization:\n    required: true\n    type: string\n  start:\n    required: true\n    type: string\n  limit:\n    required: true\n    type: string\n  scope:\n    required: false\n    type: string\n\nparameters:\n  - name: Authorization\n    required: true\n    type: string\n    paramType: header\n  - name: operation\n    description: set-quota, delete-user or set-tenant\n    required: true\n    type: string\n    enum: [set-quota,delete-user,set-tenant]\n    paramType: formData\n  - name: quota_total\n    description: quota\n    required: true\n    type: string\n    paramType: formData\n  - name: emails\n    description: multiple user emails\n    required: true\n    type: string\n    paramType: formData\n\nresponseMessages:\n  - code: 400\n    message: BAD_REQUEST\n  - code: 401\n    message: UNAUTHORIZED\n  - code: 403\n    message: FORBIDDEN\n  - code: 404\n    message: NOT_FOUND\n  - code: 500\n    message: INTERNAL_SERVER_ERROR\n\nconsumes:\n  - application/json\nproduces:\n  - application/json", "parameters": [], "tags": ["api3"], "summary": "Set user quota, set user tenant, delete users, in batch.", "operationId": "api3_admin_users_batch_create", "responses": {"201": {"description": ""}}}}, "/api3/admin/users/export/": {"get": {"description": "Export all users from database to excel\n---\n# YAML\n\ntype:\n  Authorization:\n    required: true\n    type: string\n  start:\n    required: true\n    type: string\n  limit:\n    required: true\n    type: string\n  scope:\n    required: false\n    type: string\n\nparameters:\n  - name: Authorization\n    required: true\n    type: string\n    paramType: header\n\nresponseMessages:\n  - code: 400\n    message: BAD_REQUEST\n  - code: 401\n    message: UNAUTHORIZED\n  - code: 403\n    message: FORBIDDEN\n  - code: 404\n    message: NOT_FOUND\n  - code: 500\n    message: INTERNAL_SERVER_ERROR\n\nconsumes:\n  - application/json\nproduces:\n  - application/json", "parameters": [], "tags": ["api3"], "summary": "Export all users from database to excel", "operationId": "api3_admin_users_export_list", "responses": {"200": {"description": ""}}}}, "/api3/admin/users/import/": {"post": {"description": "Batch add users. Import users from CSV file.\n---\n# YAML\n\ntype:\n  Authorization:\n    required: true\n    type: string\n  start:\n    required: true\n    type: string\n  limit:\n    required: true\n    type: string\n  scope:\n    required: false\n    type: string\n\nparameters:\n  - name: Authorization\n    required: true\n    type: string\n    paramType: header\n  - name: file\n    required: true\n    type: file\n    paramType: formData\n    description: csv file\n\nresponseMessages:\n  - code: 400\n    message: BAD_REQUEST\n  - code: 401\n    message: UNAUTHORIZED\n  - code: 403\n    message: FORBIDDEN\n  - code: 404\n    message: NOT_FOUND\n  - code: 500\n    message: INTERNAL_SERVER_ERROR\n\nconsumes:\n  - application/json\nproduces:\n  - application/json", "parameters": [], "tags": ["api3"], "summary": "Batch add users. Import users from CSV file.", "operationId": "api3_admin_users_import_create", "responses": {"201": {"description": ""}}}}, "/api3/admin/users/search/": {"get": {"description": "Search user\n---\n# YAML\n\ntype:\n  Authorization:\n    required: true\n    type: string\n  start:\n    required: true\n    type: string\n  limit:\n    required: true\n    type: string\n  scope:\n    required: false\n    type: string\n\nparameters:\n  - name: Authorization\n    required: true\n    type: string\n    paramType: header\n  - name: q\n    description: search query\n    required: false\n    type: string\n    paramType: query\n  - name: page\n    description: result page. Default to 1\n    required: false\n    type: string\n    paramType: query\n  - name: per_page\n    description: result per page. Default to 25\n    required: false\n    type: string\n    paramType: query\n\nresponseMessages:\n  - code: 400\n    message: BAD_REQUEST\n  - code: 401\n    message: UNAUTHORIZED\n  - code: 403\n    message: FORBIDDEN\n  - code: 404\n    message: NOT_FOUND\n  - code: 500\n    message: INTERNAL_SERVER_ERROR\n\nconsumes:\n  - application/json\nproduces:\n  - application/json", "parameters": [], "tags": ["api3"], "summary": "Search user", "operationId": "api3_admin_users_search_list", "responses": {"200": {"description": ""}}}}, "/api3/admin/users/{user_email}/": {"get": {"description": "Get user profile\n---\n# YAML\n\ntype:\n  Authorization:\n    required: true\n    type: string\n  start:\n    required: true\n    type: string\n  limit:\n    required: true\n    type: string\n  scope:\n    required: false\n    type: string\n\nparameters:\n  - name: Authorization\n    required: true\n    type: string\n    paramType: header\n  - name: user_email\n    description: user email\n    required: true\n    type: string\n    paramType: path\n\nresponseMessages:\n  - code: 400\n    message: BAD_REQUEST\n  - code: 401\n    message: UNAUTHORIZED\n  - code: 403\n    message: FORBIDDEN\n  - code: 404\n    message: NOT_FOUND\n  - code: 500\n    message: INTERNAL_SERVER_ERROR\n\nconsumes:\n  - application/json\nproduces:\n  - application/json", "parameters": [{"description": "", "required": true, "type": "string", "name": "user_email", "in": "path"}], "tags": ["api3"], "summary": "Get user profile", "operationId": "api3_admin_users_read", "responses": {"200": {"description": ""}}}, "post": {"description": "Reset password for user.\n---\n# YAML\n\ntype:\n  Authorization:\n    required: true\n    type: string\n  start:\n    required: true\n    type: string\n  limit:\n    required: true\n    type: string\n  scope:\n    required: false\n    type: string\n\nparameters:\n    - name: Authorization\n      required: true\n      type: string\n      paramType: header\n    - name: email\n      description: user email\n      required: false\n      type: string\n      paramType: path\n\nresponseMessages:\n    - code: 400\n      message: BAD_REQUEST\n    - code: 401\n      message: UNAUTHORIZED\n    - code: 403\n      message: FORBIDDEN\n    - code: 404\n      message: NOT_FOUND\n    - code: 500\n      message: INTERNAL_SERVER_ERROR\n\nconsumes:\n    - application/json\nproduces:\n    - application/json", "parameters": [{"description": "", "required": true, "type": "string", "name": "user_email", "in": "path"}], "tags": ["api3"], "summary": "Reset password for user.", "operationId": "api3_admin_users_create", "responses": {"201": {"description": ""}}}, "delete": {"description": "Remove a user from the system\n---\n# YAML\n\ntype:\n  Authorization:\n    required: true\n    type: string\n  start:\n    required: true\n    type: string\n  limit:\n    required: true\n    type: string\n  scope:\n    required: false\n    type: string\n\nparameters:\n    - name: Authorization\n      required: true\n      type: string\n      paramType: header\n    - name: email\n      description: user email\n      required: false\n      type: string\n      paramType: path\n\nresponseMessages:\n    - code: 400\n      message: BAD_REQUEST\n    - code: 401\n      message: UNAUTHORIZED\n    - code: 403\n      message: FORBIDDEN\n    - code: 404\n      message: NOT_FOUND\n    - code: 500\n      message: INTERNAL_SERVER_ERROR\n\nconsumes:\n    - application/json\nproduces:\n    - application/json", "parameters": [{"description": "", "required": true, "type": "string", "name": "user_email", "in": "path"}], "tags": ["api3"], "summary": "Remove a user from the system", "operationId": "api3_admin_users_delete", "responses": {"204": {"description": ""}}}}, "/api3/admin/users/{user_email}/toggle-roles/": {"post": {"description": "Change role of a user\n---\n# YAML\n\ntype:\n  Authorization:\n    required: true\n    type: string\n  start:\n    required: true\n    type: string\n  limit:\n    required: true\n    type: string\n  scope:\n    required: false\n    type: string\n\nparameters:\n  - name: Authorization\n    required: true\n    type: string\n    paramType: email\n  - name: Authorization\n    required: true\n    type: string\n    paramType: path\n  - name: r\n    required: false\n    type: string\n    paramType: formData\n    description: default or guest. Default to default\n\nresponseMessages:\n  - code: 400\n    message: BAD_REQUEST\n  - code: 401\n    message: UNAUTHORIZED\n  - code: 403\n    message: FORBIDDEN\n  - code: 404\n    message: NOT_FOUND\n  - code: 500\n    message: INTERNAL_SERVER_ERROR\n\nconsumes:\n  - application/json\nproduces:\n  - application/json", "parameters": [{"description": "", "required": true, "type": "string", "name": "user_email", "in": "path"}], "tags": ["api3"], "summary": "Change role of a user", "operationId": "api3_admin_users_toggle-roles_create", "responses": {"201": {"description": ""}}}}, "/api3/admin/users/{user_email}/toggle-status/": {"post": {"description": "Active or deactive user\n---\n# YAML\n\ntype:\n  Authorization:\n    required: true\n    type: string\n  start:\n    required: true\n    type: string\n  limit:\n    required: true\n    type: string\n  scope:\n    required: false\n    type: string\n\nparameters:\n  - name: Authorization\n    required: true\n    type: string\n    paramType: header\n  - name: email\n    required: true\n    type: string\n    paramType: path\n  - name: s\n    required: false\n    type: string\n    paramType: formData\n    description: 0 (inactive) or 1 (active). Default to 0\n\nresponseMessages:\n  - code: 400\n    message: BAD_REQUEST\n  - code: 401\n    message: UNAUTHORIZED\n  - code: 403\n    message: FORBIDDEN\n  - code: 404\n    message: NOT_FOUND\n  - code: 500\n    message: INTERNAL_SERVER_ERROR\n\nconsumes:\n  - application/json\nproduces:\n  - application/json", "parameters": [{"description": "", "required": true, "type": "string", "name": "user_email", "in": "path"}], "tags": ["api3"], "summary": "Active or deactive user", "operationId": "api3_admin_users_toggle-status_create", "responses": {"201": {"description": ""}}}}, "/api3/auth-status": {"get": {"description": "Get Authorization Status\n---\n# YAML\n\ntype:\n  Authorization:\n    required: true\n    type: string\n\nparameters:\n    - name: Authorization\n      required: true\n      type: string\n      paramType: header\n\nresponseMessages:\n    - code: 400\n      message: BAD_REQUEST\n    - code: 401\n      message: UNAUTHORIZED\n    - code: 403\n      message: FORBIDDEN\n    - code: 500\n      message: INTERNAL_SERVER_ERROR\n\nconsumes:\n    - application/json\nproduces:\n    - application/json", "parameters": [], "tags": ["api3"], "summary": "Get Authorization Status", "operationId": "api3_auth-status_list", "responses": {"200": {"description": ""}}}}, "/api3/auth-token": {"post": {"description": "---\n# YAML\n\ntype:\n  username:\n    required: true\n    type: string\n  password:\n    required: true\n    type: string\n\nparameters:\n    - name: login\n      required: true\n      type: string\n      paramType: form\n      description: login id or password\n    - name: password\n      required: true\n      type: string\n      paramType: form\n    - name: captcha_0\n      required: false\n      type: string\n      paramType: form\n    - name: captcha_1\n      required: false\n      type: string\n      paramType: form\n    - name: remember_me\n      required: false\n      type: number\n      paramType: form\n      description: 0 or 1. Default to 0\n\nresponseMessages:\n    - code: 400\n      message: BAD REQUEST\n    - code: 500\n      message: INTERNAL_SERVER_ERROR\n\nconsumes:\n    - application/json\nproduces:\n    - application/json", "parameters": [], "tags": ["api3"], "summary": "---", "operationId": "api3_auth-token_create", "responses": {"201": {"description": ""}}}}, "/api3/avatars/group/{group_id}/resized/{size}/": {"get": {"description": "Get Group Avatar\n---\n# YAML\n\ntype:\n  Authorization:\n    required: true\n    type: string\n  group_id:\n    required: true\n    type: string\n  size:\n    required: true\n    type: string\n\nparameters:\n    - name: Authorization\n      required: true\n      type: string\n      paramType: header\n    - name: group_id\n      required: true\n      type: string\n      paramType: path\n    - name: size\n      required: true\n      type: string\n      paramType: path\n\nresponseMessages:\n    - code: 400\n      message: BAD_REQUEST\n    - code: 401\n      message: UNAUTHORIZED\n    - code: 403\n      message: FORBIDDEN\n    - code: 404\n      message: NOT_FOUND\n    - code: 500\n      message: INTERNAL_SERVER_ERROR\n\nconsumes:\n    - application/json\nproduces:\n    - application/json", "parameters": [{"description": "", "required": true, "type": "string", "name": "group_id", "in": "path"}, {"description": "", "required": true, "type": "string", "name": "size", "in": "path"}], "tags": ["api3"], "summary": "Get Group Avatar", "operationId": "api3_avatars_group_resized_read", "responses": {"200": {"description": ""}}}}, "/api3/avatars/user/{user}/resized/{size}/": {"get": {"description": "Get User Avatar\n---\n# YAML\n\ntype:\n  Authorization:\n    required: true\n    type: string\n  user:\n    required: true\n    type: string\n  size:\n    required: true\n    type: string\n\nparameters:\n    - name: Authorization\n      required: true\n      type: string\n      paramType: header\n    - name: user\n      required: true\n      type: string\n      paramType: path\n    - name: size\n      required: true\n      type: string\n      paramType: path\n\nresponseMessages:\n    - code: 401\n      message: UNAUTHORIZED\n    - code: 500\n      message: INTERNAL_SERVER_ERROR\n\nconsumes:\n    - application/json\nproduces:\n    - application/json", "parameters": [{"description": "", "required": true, "type": "string", "name": "user", "in": "path"}, {"description": "", "required": true, "type": "string", "name": "size", "in": "path"}], "tags": ["api3"], "summary": "Get User Avatar", "operationId": "api3_avatars_user_resized_read", "responses": {"200": {"description": ""}}}}, "/api3/beshared-repos/": {"get": {"description": "List repos that others/groups share to user.\n---\n# YAML\n\ntype:\n  Authorization:\n    required: true\n    type: string\n\nparameters:\n    - name: Authorization\n      required: true\n      type: string\n      paramType: header\n\nresponseMessages:\n    - code: 401\n      message: UNAUTHORIZED\n    - code: 500\n      message: INTERNAL_SERVER_ERROR\n\nconsumes:\n    - application/json\nproduces:\n    - application/json", "parameters": [], "tags": ["api3"], "summary": "List repos that others/groups share to user.", "operationId": "api3_beshared-repos_list", "responses": {"200": {"description": ""}}}}, "/api3/beshared-repos/{repo_id}/": {"delete": {"description": "Delete Be Shared Library\n---\n# YAML\n\ntype:\n  Authorization:\n    required: true\n    type: string\n  repo_id:\n    required: true\n    type: string\n  share_type:\n    required: false\n    type: string\n  from:\n    required: false\n    type: string\n  group_id:\n    required: false\n    type: string\n\nparameters:\n    - name: Authorization\n      required: true\n      type: string\n      paramType: header\n    - name: repo_id\n      required: true\n      type: string\n      paramType: path\n    - name: share_type\n      description: personal, group, public\n      required: false\n      type: string\n      paramType: query\n    - name: from\n      required: false\n      type: string\n      paramType: query\n    - name: group_id\n      required: false\n      type: string\n      paramType: query\n\nresponseMessages:\n    - code: 400\n      message: BAD_REQUEST\n    - code: 401\n      message: UNAUTHORIZED\n    - code: 403\n      message: FORBIDDEN\n    - code: 404\n      message: NOT_FOUND\n    - code: 500\n      message: INTERNAL_SERVER_ERROR\n\nconsumes:\n    - application/json\nproduces:\n    - application/json", "parameters": [{"description": "", "required": true, "type": "string", "name": "repo_id", "in": "path"}], "tags": ["api3"], "summary": "Delete Be Shared Library", "operationId": "api3_beshared-repos_delete", "responses": {"204": {"description": ""}}}}, "/api3/copy-move-task/": {"post": {"description": "Copy/move file/dir, and return task id.\n\nPermission checking:\n1. move: user with 'rw' permission for current file, 'rw' permission for dst parent dir;\n2. copy: user with 'r' permission for current file, 'rw' permission for dst parent dir;\n\n---\n# YAML\n\ntype:\n  Authorization:\n    required: true\n    type: string\n  src_repo_id:\n    required: true\n    type: string\n  src_parent_dir:\n    required: true\n    type: string\n  src_dirent_name:\n    required: true\n    type: string\n  dst_repo_id:\n    required: true\n    type: string\n  dst_parent_dir:\n    required: true\n    type: string\n  operation:\n    required: true\n    type: string\n  dirent_type:\n    required: true\n    type: string\n\nparameters:\n    - name: Authorization\n      required: true\n      type: string\n      paramType: header\n    - name: src_repo_id\n      required: true\n      type: string\n      paramType: form\n    - name: src_parent_dir\n      required: true\n      type: string\n      paramType: form\n    - name: src_dirent_name\n      required: true\n      type: string\n      paramType: form\n    - name: dst_repo_id\n      required: true\n      type: string\n      paramType: form\n    - name: dst_parent_dir\n      required: true\n      type: string\n      paramType: form\n    - name: operation\n      required: true\n      type: string\n      paramType: form\n    - name: dirent_type\n      required: true\n      type: string\n      paramType: form\n\nresponseMessages:\n    - code: 400\n      message: BAD_REQUEST\n    - code: 401\n      message: UNAUTHORIZED\n    - code: 403\n      message: FORBIDDEN\n    - code: 404\n      message: NOT_FOUND\n    - code: 500\n      message: INTERNAL_SERVER_ERROR\n\nconsumes:\n    - application/json\nproduces:\n    - application/json", "parameters": [], "tags": ["api3"], "summary": "Copy/move file/dir, and return task id.", "operationId": "api3_copy-move-task_create", "responses": {"201": {"description": ""}}}, "delete": {"description": "Cancel file/dir mv/cp.\n---\n# YAML\n\ntype:\n  Authorization:\n    required: true\n    type: string\n  task_id:\n    required: true\n    type: string\n\nparameters:\n    - name: Authorization\n      required: true\n      type: string\n      paramType: header\n    - name: task_id\n      required: true\n      type: string\n      paramType: form\n\nresponseMessages:\n    - code: 400\n      message: BAD_REQUEST\n    - code: 401\n      message: UNAUTHORIZED\n    - code: 500\n      message: INTERNAL_SERVER_ERROR\n\nconsumes:\n    - application/json\nproduces:\n    - application/json", "parameters": [], "tags": ["api3"], "summary": "Cancel file/dir mv/cp.", "operationId": "api3_copy-move-task_delete", "responses": {"204": {"description": ""}}}}, "/api3/current-system-notification/": {"get": {"description": "Set primary notification.\n---\n# YAML\n\ntype:\n    Authorization:\n    required: true\n    type: string\n\nparameters:\n    - name: Authorization\n        required: true\n        type: string\n        paramType: header\n    - name: notification_id\n        description: id of notification\n        required: true\n        type: string\n        paramType: path\n\nresponseMessages:\n    - code: 400\n        message: BAD_REQUEST\n    - code: 401\n        message: UNAUTHORIZED\n    - code: 403\n        message: FORBIDDEN\n    - code: 404\n        message: NOT_FOUND\n    - code: 500\n        message: INTERNAL_SERVER_ERROR\n\nconsumes:\n    - application/json\nproduces:\n    - application/json", "parameters": [], "tags": ["api3"], "summary": "Set primary notification.", "operationId": "api3_current-system-notification_list", "responses": {"200": {"description": ""}}}}, "/api3/d/{token}/": {"get": {"description": "View dir via shared link.\n---\n# YAML\n\ntype:\n  token:\n    required: true\n    type: string\n  p:\n    required: false\n    type: string\n  mode:\n    required: false\n    type: string\n\nparameters:\n    - name: token\n      required: true\n      type: string\n      paramType: path\n    - name: p\n      required: false\n      type: string\n      paramType: query\n    - name: mode\n      required: false\n      type: string\n      paramType: query\n\nresponseMessages:\n    - code: 400\n      message: BAD_REQUEST\n    - code: 401\n      message: UNAUTHORIZED\n    - code: 403\n      message: FORBIDDEN\n    - code: 404\n      message: NOT_FOUND\n    - code: 500\n      message: INTERNAL_SERVER_ERROR\n\nconsumes:\n    - application/json\nproduces:\n    - application/json", "parameters": [{"description": "", "required": true, "type": "string", "name": "token", "in": "path"}], "tags": ["api3"], "summary": "View dir via shared link.", "operationId": "api3_d_read", "responses": {"200": {"description": ""}}}, "post": {"description": "View dir via shared link.\n---\n# YAML\n\ntype:\n  token:\n    required: true\n    type: string\n  p:\n    required: false\n    type: string\n  mode:\n    required: false\n    type: string\n  password:\n    required: false\n    type: string\n  email:\n    required: false\n    type: string\n  code:\n    required: false\n    type: string\n\nparameters:\n    - name: token\n      required: true\n      type: string\n      paramType: path\n    - name: p\n      required: false\n      type: string\n      paramType: query\n    - name: mode\n      required: false\n      type: string\n      paramType: query\n    - name: password\n      required: false\n      type: string\n      paramType: form\n    - name: email\n      required: false\n      type: string\n      paramType: form\n    - name: code\n      required: false\n      type: string\n      paramType: form\n\nresponseMessages:\n    - code: 400\n      message: BAD_REQUEST\n    - code: 401\n      message: UNAUTHORIZED\n    - code: 403\n      message: FORBIDDEN\n    - code: 404\n      message: NOT_FOUND\n    - code: 500\n      message: INTERNAL_SERVER_ERROR\n\nconsumes:\n    - application/json\nproduces:\n    - application/json", "parameters": [{"description": "", "required": true, "type": "string", "name": "token", "in": "path"}], "tags": ["api3"], "summary": "View dir via shared link.", "operationId": "api3_d_create", "responses": {"201": {"description": ""}}}}, "/api3/d/{token}/dir/": {"get": {"description": "List dirents in dir download shared link\n---\n# YAML\n\ntype:\n  Authorization:\n    required: true\n    type: string\n  token:\n    required: true\n    type: string\n  p:\n    required: true\n    type: string\n  password:\n    required: false\n    type: string\n\nparameters:\n    - name: Authorization\n      required: true\n      type: string\n      paramType: header\n    - name: token\n      description: Upload link token\n      required: true\n      type: string\n      paramType: path\n    - name: p\n      description: Sub folder path\n      required: true\n      type: string\n      paramType: query\n    - name: password\n      description: If link is encrypted\n      required: false\n      type: string\n      paramType: query\n\nresponseMessages:\n    - code: 400\n      message: BAD_REQUEST\n    - code: 401\n      message: UNAUTHORIZED\n    - code: 403\n      message: FORBIDDEN\n    - code: 500\n      message: INTERNAL_SERVER_ERROR\n\nconsumes:\n    - application/json\nproduces:\n    - application/json", "parameters": [{"description": "", "required": true, "type": "string", "name": "token", "in": "path"}], "tags": ["api3"], "summary": "List dirents in dir download shared link", "operationId": "api3_d_dir_list", "responses": {"200": {"description": ""}}}}, "/api3/d/{token}/files/": {"get": {"description": "View file via shared dir link.\n---\n# YAML\n\ntype:\n  token:\n    required: true\n    type: string\n  p:\n    required: false\n    type: string\n  dl:\n    required: false\n    type: string\n\nparameters:\n    - name: token\n      required: true\n      type: string\n      paramType: path\n    - name: p\n      required: false\n      type: string\n      paramType: query\n    - name: dl\n      required: false\n      type: string\n      paramType: query\n\nresponseMessages:\n    - code: 400\n      message: BAD_REQUEST\n    - code: 401\n      message: UNAUTHORIZED\n    - code: 403\n      message: FORBIDDEN\n    - code: 404\n      message: NOT_FOUND\n    - code: 500\n      message: INTERNAL_SERVER_ERROR\n\nconsumes:\n    - application/json\nproduces:\n    - application/json", "parameters": [{"description": "", "required": true, "type": "string", "name": "token", "in": "path"}], "tags": ["api3"], "summary": "View file via shared dir link.", "operationId": "api3_d_files_list", "responses": {"200": {"description": ""}}}, "post": {"description": "View file via shared dir link.\n---\n# YAML\n\ntype:\n  token:\n    required: true\n    type: string\n  p:\n    required: false\n    type: string\n  dl:\n    required: false\n    type: string\n  password:\n    required: false\n    type: string\n  email:\n    required: false\n    type: string\n  code:\n    required: false\n    type: string\n\nparameters:\n    - name: token\n      required: true\n      type: string\n      paramType: path\n    - name: p\n      required: false\n      type: string\n      paramType: query\n    - name: dl\n      required: false\n      type: string\n      paramType: query\n    - name: password\n      required: false\n      type: string\n      paramType: form\n    - name: email\n      required: false\n      type: string\n      paramType: form\n    - name: code\n      required: false\n      type: string\n      paramType: form\n\nresponseMessages:\n    - code: 400\n      message: BAD_REQUEST\n    - code: 401\n      message: UNAUTHORIZED\n    - code: 403\n      message: FORBIDDEN\n    - code: 404\n      message: NOT_FOUND\n    - code: 500\n      message: INTERNAL_SERVER_ERROR\n\nconsumes:\n    - application/json\nproduces:\n    - application/json", "parameters": [{"description": "", "required": true, "type": "string", "name": "token", "in": "path"}], "tags": ["api3"], "summary": "View file via shared dir link.", "operationId": "api3_d_files_create", "responses": {"201": {"description": ""}}}}, "/api3/delete-account/": {"post": {"description": "Delete Account\n---\n# YAML\n\ntype:\n  Authorization:\n    required: true\n    type: string\n\nparameters:\n    - name: Authorization\n      required: true\n      type: string\n      paramType: header\n\nresponseMessages:\n    - code: 400\n      message: BAD_REQUEST\n    - code: 401\n      message: UNAUTHORIZED\n    - code: 500\n      message: INTERNAL_SERVER_ERROR\n\nconsumes:\n    - application/json\nproduces:\n    - application/json", "parameters": [], "tags": ["api3"], "summary": "Delete Account", "operationId": "api3_delete-account_create", "responses": {"201": {"description": ""}}}}, "/api3/deleted-repos/": {"get": {"description": "Get the deleted-repos of owner\n---\n# YAML\n\ntype:\n  Authorization:\n    required: true\n    type: string\n\nparameters:\n    - name: Authorization\n      required: true\n      type: string\n      paramType: header\n\nresponseMessages:\n    - code: 401\n      message: UNAUTHORIZED\n    - code: 500\n      message: INTERNAL_SERVER_ERROR\n\nconsumes:\n    - application/json\nproduces:\n    - application/json", "parameters": [], "tags": ["api3"], "summary": "Get the deleted-repos of owner", "operationId": "api3_deleted-repos_list", "responses": {"200": {"description": ""}}}, "post": {"description": "Restore deleted-repo\n    return:\n        return True if success, otherwise api_error\n\n---\n# YAML\n\ntype:\n  Authorization:\n    required: true\n    type: string\n  repo_id:\n    required: true\n    type: string\n\nparameters:\n    - name: Authorization\n      required: true\n      type: string\n      paramType: header\n    - name: repo_id\n      required: true\n      type: string\n      paramType: form\n\nresponseMessages:\n    - code: 400\n      message: BAD_REQUEST\n    - code: 401\n      message: UNAUTHORIZED\n    - code: 403\n      message: FORBIDDEN\n    - code: 500\n      message: INTERNAL_SERVER_ERROR\n\nconsumes:\n    - application/json\nproduces:\n    - application/json", "parameters": [], "tags": ["api3"], "summary": "Restore deleted-repo", "operationId": "api3_deleted-repos_create", "responses": {"201": {"description": ""}}}}, "/api3/devices/": {"get": {"description": "List user's devices.\n\nPermission checking:\n1. All authenticated users.\n\n---\n# YAML\n\ntype:\n  Authorization:\n    required: true\n    type: string\n\nparameters:\n    - name: Authorization\n      required: true\n      type: string\n      paramType: header\n\nresponseMessages:\n    - code: 401\n      message: UNAUTHORIZED\n    - code: 500\n      message: INTERNAL_SERVER_ERROR\n\nconsumes:\n    - application/json\nproduces:\n    - application/json", "parameters": [], "tags": ["api3"], "summary": "List user's devices.", "operationId": "api3_devices_list", "responses": {"200": {"description": ""}}}, "delete": {"description": "Unlink User Device\n---\n# YAML\n\ntype:\n  Authorization:\n    required: true\n    type: string\n  platform:\n    required: false\n    type: string\n  device_id:\n    required: false\n    type: string\n  wipe_device:\n    required: false\n    type: string\n\nparameters:\n    - name: Authorization\n      required: true\n      type: string\n      paramType: header\n    - name: platform\n      required: false\n      type: string\n      paramType: query\n    - name: device_id\n      required: false\n      type: string\n      paramType: query\n    - name: wipe_device\n      required: false\n      type: string\n      paramType: query\n\nresponseMessages:\n    - code: 400\n      message: BAD_REQUEST\n    - code: 401\n      message: UNAUTHORIZED\n    - code: 500\n      message: INTERNAL_SERVER_ERROR\n\nconsumes:\n    - application/json\nproduces:\n    - application/json", "parameters": [], "tags": ["api3"], "summary": "Unlink User Device", "operationId": "api3_devices_delete", "responses": {"204": {"description": ""}}}}, "/api3/events/": {"get": {"description": "Get File Activities\nThis api will only return first 15 records of activities. if want get more, pass start parameter\n\n---\n# YAML\n\ntype:\n  Authorization:\n    required: true\n    type: string\n  start:\n    required: false\n    type: string\n  size:\n    required: false\n    type: string\n\nparameters:\n    - name: Authorization\n      required: true\n      type: string\n      paramType: header\n    - name: start\n      description: default 0\n      required: false\n      type: string\n      paramType: query\n    - name: size\n      description: size of user avatar, default 36\n      required: false\n      type: string\n      paramType: query\n\nresponseMessages:\n    - code: 400\n      message: BAD_REQUEST\n    - code: 401\n      message: UNAUTHORIZED\n    - code: 404\n      message: NOT_FOUND\n    - code: 500\n      message: INTERNAL_SERVER_ERROR\n\nconsumes:\n    - application/json\nproduces:\n    - application/json", "parameters": [], "tags": ["api3"], "summary": "Get File Activities", "operationId": "api3_events_list", "responses": {"200": {"description": ""}}}}, "/api3/f/{token}/": {"get": {"description": "View file via shared link.\nDownload share file if `dl` in request param.\nView raw share file if `raw` in request param.\n\n---\n# YAML\n\ntype:\n  token:\n    required: true\n    type: string\n  op:\n    required: false\n    type: string\n\nparameters:\n    - name: token\n      required: true\n      type: string\n      paramType: path\n    - name: op\n      required: false\n      type: string\n      paramType: query\n\nresponseMessages:\n    - code: 400\n      message: BAD_REQUEST\n    - code: 401\n      message: UNAUTHORIZED\n    - code: 403\n      message: FORBIDDEN\n    - code: 404\n      message: NOT_FOUND\n    - code: 500\n      message: INTERNAL_SERVER_ERROR\n\nconsumes:\n    - application/json\nproduces:\n    - application/json", "parameters": [{"description": "", "required": true, "type": "string", "name": "token", "in": "path"}], "tags": ["api3"], "summary": "View file via shared link.", "operationId": "api3_f_read", "responses": {"200": {"description": ""}}}, "post": {"description": "View file via shared link.\nDownload share file if `dl` in request param.\nView raw share file if `raw` in request param.\n\n---\n# YAML\n\ntype:\n  token:\n    required: true\n    type: string\n  op:\n    required: false\n    type: string\n  password:\n    required: false\n    type: string\n  email:\n    required: false\n    type: string\n  code:\n    required: false\n    type: string\n\nparameters:\n    - name: token\n      required: true\n      type: string\n      paramType: path\n    - name: op\n      required: false\n      type: string\n      paramType: query\n    - name: password\n      required: false\n      type: string\n      paramType: form\n    - name: email\n      required: false\n      type: string\n      paramType: form\n    - name: code\n      required: false\n      type: string\n      paramType: form\n\nresponseMessages:\n    - code: 400\n      message: BAD_REQUEST\n    - code: 401\n      message: UNAUTHORIZED\n    - code: 403\n      message: FORBIDDEN\n    - code: 404\n      message: NOT_FOUND\n    - code: 500\n      message: INTERNAL_SERVER_ERROR\n\nconsumes:\n    - application/json\nproduces:\n    - application/json", "parameters": [{"description": "", "required": true, "type": "string", "name": "token", "in": "path"}], "tags": ["api3"], "summary": "View file via shared link.", "operationId": "api3_f_create", "responses": {"201": {"description": ""}}}}, "/api3/get-captcha": {"get": {"description": "Get / refresh captcha\n---\n# YAML\n\ntype:\n  Authorization:\n    required: true\n    type: string\n  from:\n    required: false\n    type: string\n  name:\n    required: true\n    type: string\n  desc:\n    required: false\n    type: string\n  repo_id:\n    required: true\n    type: string\n\nresponseMessages:\n    - code: 400\n      message: BAD_REQUEST\n    - code: 401\n      message: UNAUTHORIZED\n    - code: 403\n      message: FORBIDDEN\n    - code: 500\n      message: INTERNAL_SERVER_ERROR\n\nconsumes:\n    - application/json\nproduces:\n    - application/json", "parameters": [], "tags": ["api3"], "summary": "Get / refresh captcha", "operationId": "api3_get-captcha_list", "responses": {"200": {"description": ""}}}}, "/api3/groups/": {"get": {"description": "List all groups.\n---\n# YAML\n\ntype:\n  Authorization:\n    required: true\n    type: string\n  avatar_size:\n    required: false\n    type: string\n  with_repos:\n    required: false\n    type: string\n\nparameters:\n    - name: Authorization\n      required: true\n      type: string\n      paramType: header\n    - name: avatar_size\n      required: false\n      type: string\n      paramType: query\n    - name: with_repos\n      required: false\n      type: string\n      paramType: query\n\nresponseMessages:\n    - code: 400\n      message: BAD_REQUEST\n    - code: 401\n      message: UNAUTHORIZED\n\nconsumes:\n    - application/json\nproduces:\n    - application/json", "parameters": [], "tags": ["api3"], "summary": "List all groups.", "operationId": "api3_groups_list", "responses": {"200": {"description": ""}}}, "post": {"description": "Create a group\n---\n# YAML\n\ntype:\n  Authorization:\n    required: true\n    type: string\n  name:\n    required: true\n    type: string\n\nparameters:\n    - name: Authorization\n      required: true\n      type: string\n      paramType: header\n    - name: name\n      description: Name of new group\n      required: true\n      type: string\n      paramType: form\n\nresponseMessages:\n    - code: 400\n      message: BAD_REQUEST\n    - code: 401\n      message: UNAUTHORIZED\n    - code: 403\n      message: FORBIDDEN\n    - code: 500\n      message: INTERNAL_SERVER_ERROR\n\nconsumes:\n    - application/json\nproduces:\n    - application/json", "parameters": [], "tags": ["api3"], "summary": "Create a group", "operationId": "api3_groups_create", "responses": {"201": {"description": ""}}}}, "/api3/groups/{group_id}/": {"get": {"description": "Get info of a group.\n---\n# YAML\n\ntype:\n  Authorization:\n    required: true\n    type: string\n  group_id:\n    required: true\n    type: string\n\nparameters:\n    - name: Authorization\n      required: true\n      type: string\n      paramType: header\n    - name: group_id\n      required: true\n      type: string\n      paramType: path\n\nresponseMessages:\n    - code: 400\n      message: BAD_REQUEST\n    - code: 401\n      message: UNAUTHORIZED\n    - code: 403\n      message: FORBIDDEN\n    - code: 500\n      message: INTERNAL_SERVER_ERROR\n\nconsumes:\n    - application/json\nproduces:\n    - application/json", "parameters": [{"description": "", "required": true, "type": "string", "name": "group_id", "in": "path"}], "tags": ["api3"], "summary": "Get info of a group.", "operationId": "api3_groups_read", "responses": {"200": {"description": ""}}}, "put": {"description": "Rename, transfer a specific group\n---\n# YAML\n\ntype:\n  Authorization:\n    required: true\n    type: string\n  group_id:\n    required: true\n    type: string\n  name:\n    required: false\n    type: string\n  owner:\n    required: false\n    type: string\n\nparameters:\n    - name: Authorization\n      required: true\n      type: string\n      paramType: header\n    - name: group_id\n      description: Group ID\n      required: true\n      type: string\n      paramType: path\n    - name: name\n      description: Name of new group\n      required: false\n      type: string\n      paramType: form\n    - name: owner\n      description: New owner of this group, should be an email\n      required: false\n      type: string\n      paramType: form\n\nresponseMessages:\n    - code: 400\n      message: BAD_REQUEST\n    - code: 401\n      message: UNAUTHORIZED\n    - code: 403\n      message: FORBIDDEN\n    - code: 500\n      message: INTERNAL_SERVER_ERROR\n\nconsumes:\n    - application/json\nproduces:\n    - application/json", "parameters": [{"description": "", "required": true, "type": "string", "name": "group_id", "in": "path"}], "tags": ["api3"], "summary": "Rename, transfer a specific group", "operationId": "api3_groups_update", "responses": {"200": {"description": ""}}}, "delete": {"description": "Dismiss a specific group\n---\n# YAML\n\ntype:\n  Authorization:\n    required: true\n    type: string\n  group_id:\n    required: true\n    type: string\n\nparameters:\n    - name: Authorization\n      required: true\n      type: string\n      paramType: header\n    - name: group_id\n      description: Group ID\n      required: true\n      type: string\n      paramType: path\n\nresponseMessages:\n    - code: 400\n      message: BAD_REQUEST\n    - code: 401\n      message: UNAUTHORIZED\n    - code: 403\n      message: FORBIDDEN\n    - code: 500\n      message: INTERNAL_SERVER_ERROR\n\nconsumes:\n    - application/json\nproduces:\n    - application/json", "parameters": [{"description": "", "required": true, "type": "string", "name": "group_id", "in": "path"}], "tags": ["api3"], "summary": "Dismiss a specific group", "operationId": "api3_groups_delete", "responses": {"204": {"description": ""}}}}, "/api3/groups/{group_id}/discussions/": {"get": {"description": "List all group discussions. Only group members can perform this op.\n---\n# YAML\n\ntype:\n  Authorization:\n    required: true\n    type: string\n  group_id:\n    required: true\n    type: string\n  page:\n    required: false\n    type: integer\n  per_page:\n    required: false\n    type: integer\n  avatar_size:\n    required: false\n    type: integer\n\nparameters:\n    - name: Authorization\n      required: true\n      type: string\n      paramType: header\n    - name: group_id\n      required: true\n      type: string\n      paramType: path\n    - name: page\n      description: (default 1)\n      required: false\n      type: integer\n      paramType: form\n    - name: per_page\n      description: (default 20)\n      required: false\n      type: integer\n      paramType: form\n    - name: avatar_size\n      description: (default 80)\n      required: false\n      type: integer\n      paramType: form\n\nresponseMessages:\n    - code: 401\n      message: UNAUTHORIZED\n    - code: 500\n      message: INTERNAL_SERVER_ERROR\n\nconsumes:\n    - application/json\nproduces:\n    - application/json", "parameters": [{"description": "", "required": true, "type": "string", "name": "group_id", "in": "path"}], "tags": ["api3"], "summary": "List all group discussions. Only group members can perform this op.", "operationId": "api3_groups_discussions_list", "responses": {"200": {"description": ""}}}, "post": {"description": "Post a group discussion. Only group members can perform this op.\n---\n# YAML\n\ntype:\n  Authorization:\n    required: true\n    type: string\n  group_id:\n    required: true\n    type: string\n  content:\n    required: true\n    type: string\n  avatar_size:\n    required: false\n    type: integer\n\nparameters:\n    - name: Authorization\n      required: true\n      type: string\n      paramType: header\n    - name: group_id\n      required: true\n      type: string\n      paramType: path\n    - name: content\n      required: true\n      type: string\n      paramType: form\n    - name: avatar_size\n      required: false\n      type: integer\n      paramType: form\n\nresponseMessages:\n    - code: 400\n      message: BAD_REQUEST\n    - code: 401\n      message: UNAUTHORIZED\n    - code: 500\n      message: INTERNAL_SERVER_ERROR\n\nconsumes:\n    - application/json\nproduces:\n    - application/json", "parameters": [{"description": "", "required": true, "type": "string", "name": "group_id", "in": "path"}], "tags": ["api3"], "summary": "Post a group discussion. Only group members can perform this op.", "operationId": "api3_groups_discussions_create", "responses": {"201": {"description": ""}}}}, "/api3/groups/{group_id}/discussions/{discuss_id}/": {"delete": {"description": "Remove a group discussion.\nOnly discussion creator or group owner/admin can perform this op.\n---\n# YAML\n\ntype:\n  Authorization:\n    required: true\n    type: string\n  group_id:\n    required: true\n    type: string\n  discuss_id:\n    required: true\n    type: string\n\nparameters:\n    - name: Authorization\n      required: true\n      type: string\n      paramType: header\n    - name: group_id\n      required: true\n      type: string\n      paramType: path\n    - name: discuss_id\n      required: true\n      type: string\n      paramType: path\n\nresponseMessages:\n    - code: 400\n      message: BAD_REQUEST\n    - code: 401\n      message: UNAUTHORIZED\n    - code: 403\n      message: FORBIDDEN\n    - code: 500\n      message: INTERNAL_SERVER_ERROR\n\nconsumes:\n    - application/json\nproduces:\n    - application/json", "parameters": [{"description": "", "required": true, "type": "string", "name": "discuss_id", "in": "path"}, {"description": "", "required": true, "type": "string", "name": "group_id", "in": "path"}], "tags": ["api3"], "summary": "Remove a group discussion.", "operationId": "api3_groups_discussions_delete", "responses": {"204": {"description": ""}}}}, "/api3/groups/{group_id}/members/": {"get": {"description": "Get all group members.\n---\n# YAML\n\ntype:\n  Authorization:\n    required: true\n    type: string\n  group_id:\n    required: true\n    type: string\n  avatar_size:\n    required: false\n    type: integer\n  is_admin:\n    required: false\n    type: boolean\n\nparameters:\n    - name: Authorization\n      required: true\n      type: string\n      paramType: header\n    - name: group_id\n      required: true\n      type: string\n      paramType: path\n    - name: avatar_size\n      required: false\n      type: integer\n      paramType: form\n    - name: is_admin\n      description: true or false, if ONLY return admin members of group. default false return all members\n      required: false\n      type: boolean\n      paramType: form\n\nresponseMessages:\n    - code: 401\n      message: UNAUTHORIZED\n    - code: 403\n      message: FORBIDDEN\n    - code: 500\n      message: INTERNAL_SERVER_ERROR\n\nconsumes:\n    - application/json\nproduces:\n    - application/json", "parameters": [{"description": "", "required": true, "type": "string", "name": "group_id", "in": "path"}], "tags": ["api3"], "summary": "Get all group members.", "operationId": "api3_groups_members_list", "responses": {"200": {"description": ""}}}, "post": {"description": "Add a group member.\n---\n# YAML\n\ntype:\n  Authorization:\n    required: true\n    type: string\n  group_id:\n    required: true\n    type: string\n  email:\n    required: true\n    type: string\n\nparameters:\n    - name: Authorization\n      required: true\n      type: string\n      paramType: header\n    - name: group_id\n      required: true\n      type: string\n      paramType: path\n    - name: email\n      required: true\n      type: string\n      paramType: form\n\nresponseMessages:\n    - code: 400\n      message: BAD_REQUEST\n    - code: 401\n      message: UNAUTHORIZED\n    - code: 403\n      message: FORBIDDEN\n    - code: 404\n      message: NOT_FOUND\n    - code: 500\n      message: INTERNAL_SERVER_ERROR\n\nconsumes:\n    - application/json\nproduces:\n    - application/json", "parameters": [{"description": "", "required": true, "type": "string", "name": "group_id", "in": "path"}], "tags": ["api3"], "summary": "Add a group member.", "operationId": "api3_groups_members_create", "responses": {"201": {"description": ""}}}}, "/api3/groups/{group_id}/members/bulk/": {"post": {"description": "Bulk add group members.\n---\n# YAML\n\ntype:\n  Authorization:\n    required: true\n    type: string\n  group_id:\n    required: true\n    type: string\n  emails:\n    required: true\n    type: string\n\nparameters:\n    - name: Authorization\n      required: true\n      type: string\n      paramType: header\n    - name: group_id\n      required: true\n      type: string\n      paramType: path\n    - name: emails\n      required: true\n      type: string\n      paramType: form\n\nresponseMessages:\n    - code: 401\n      message: UNAUTHORIZED\n    - code: 403\n      message: FORBIDDEN\n    - code: 500\n      message: INTERNAL_SERVER_ERROR\n\nconsumes:\n    - application/json\nproduces:\n    - application/json", "parameters": [{"description": "", "required": true, "type": "string", "name": "group_id", "in": "path"}], "tags": ["api3"], "summary": "Bulk add group members.", "operationId": "api3_groups_members_bulk_create", "responses": {"201": {"description": ""}}}}, "/api3/groups/{group_id}/members/{email}/": {"get": {"description": "Get info of a specific group member.\n---\n# YAML\n\ntype:\n  Authorization:\n    required: true\n    type: string\n  group_id:\n    required: true\n    type: string\n  email:\n    required: true\n    type: string\n  avatar_size:\n    required: false\n    type: integer\n\nparameters:\n    - name: Authorization\n      required: true\n      type: string\n      paramType: header\n    - name: group_id\n      required: true\n      type: string\n      paramType: path\n    - name: email\n      required: true\n      type: string\n      paramType: path\n    - name: avatar_size\n      required: false\n      type: integer\n      paramType: form\n\nresponseMessages:\n    - code: 400\n      message: BAD_REQUEST\n    - code: 401\n      message: UNAUTHORIZED\n    - code: 403\n      message: FORBIDDEN\n    - code: 500\n      message: INTERNAL_SERVER_ERROR\n\nconsumes:\n    - application/json\nproduces:\n    - application/json", "parameters": [{"description": "", "required": true, "type": "string", "name": "group_id", "in": "path"}, {"description": "", "required": true, "type": "string", "name": "email", "in": "path"}], "tags": ["api3"], "summary": "Get info of a specific group member.", "operationId": "api3_groups_members_read", "responses": {"200": {"description": ""}}}, "put": {"description": "Set/unset a specific group member as admin.\n---\n# YAML\n\ntype:\n  Authorization:\n    required: true\n    type: string\n  group_id:\n    required: true\n    type: string\n  email:\n    required: true\n    type: string\n  is_admin:\n    required: true\n    type: boolean\n\nparameters:\n    - name: Authorization\n      required: true\n      type: string\n      paramType: header\n    - name: group_id\n      required: true\n      type: string\n      paramType: path\n    - name: email\n      required: true\n      type: string\n      paramType: path\n    - name: is_admin\n      required: true\n      type: boolean\n      paramType: form\n\nresponseMessages:\n    - code: 400\n      message: BAD_REQUEST\n    - code: 401\n      message: UNAUTHORIZED\n    - code: 403\n      message: FORBIDDEN\n    - code: 500\n      message: INTERNAL_SERVER_ERROR\n\nconsumes:\n    - application/json\nproduces:\n    - application/json", "parameters": [{"description": "", "required": true, "type": "string", "name": "group_id", "in": "path"}, {"description": "", "required": true, "type": "string", "name": "email", "in": "path"}], "tags": ["api3"], "summary": "Set/unset a specific group member as admin.", "operationId": "api3_groups_members_update", "responses": {"200": {"description": ""}}}, "delete": {"description": "User leave group or group owner/admin delete a group member.\n---\n# YAML\n\ntype:\n  Authorization:\n    required: true\n    type: string\n  group_id:\n    required: true\n    type: string\n  email:\n    required: true\n    type: string\n\nparameters:\n    - name: Authorization\n      required: true\n      type: string\n      paramType: header\n    - name: group_id\n      required: true\n      type: string\n      paramType: path\n    - name: email\n      required: true\n      type: string\n      paramType: path\n\nresponseMessages:\n    - code: 400\n      message: BAD_REQUEST\n    - code: 401\n      message: UNAUTHORIZED\n    - code: 403\n      message: FORBIDDEN\n    - code: 500\n      message: INTERNAL_SERVER_ERROR\n\nconsumes:\n    - application/json\nproduces:\n    - application/json", "parameters": [{"description": "", "required": true, "type": "string", "name": "group_id", "in": "path"}, {"description": "", "required": true, "type": "string", "name": "email", "in": "path"}], "tags": ["api3"], "summary": "User leave group or group owner/admin delete a group member.", "operationId": "api3_groups_members_delete", "responses": {"204": {"description": ""}}}}, "/api3/groups/{group_id}/repos/": {"get": {"description": "Get group repos\n---\n# YAML\n\ntype:\n  Authorization:\n    required: true\n    type: string\n  group_id:\n    required: true\n    type: string\n  from:\n    required: false\n    type: string\n\nparameters:\n    - name: Authorization\n      required: true\n      type: string\n      paramType: header\n    - name: group_id\n      required: true\n      type: string\n      paramType: path\n    - name: from\n      required: false\n      type: string\n      paramType: query\n\nresponseMessages:\n    - code: 401\n      message: UNAUTHORIZED\n    - code: 403\n      message: FORBIDDEN\n    - code: 500\n      message: INTERNAL_SERVER_ERROR\n\nconsumes:\n    - application/json\nproduces:\n    - application/json", "parameters": [{"description": "", "required": true, "type": "string", "name": "group_id", "in": "path"}], "tags": ["api3"], "summary": "Get group repos", "operationId": "api3_groups_repos_list", "responses": {"200": {"description": ""}}}, "post": {"description": "Add a group repo\n---\n# YAML\n\ntype:\n  Authorization:\n    required: true\n    type: string\n  group_id:\n    required: true\n    type: string\n  name:\n    required: true\n    type: string\n  desc:\n    required: false\n    type: string\n  passwd:\n    required: false\n    type: string\n  permission:\n    required: false\n    type: string\n\nparameters:\n    - name: Authorization\n      required: true\n      type: string\n      paramType: header\n    - name: group_id\n      required: true\n      type: string\n      paramType: path\n    - name: name\n      required: true\n      type: string\n      paramType: form\n    - name: desc\n      required: false\n      type: string\n      paramType: form\n    - name: passwd\n      required: false\n      type: string\n      paramType: form\n    - name: permission\n      required: false\n      type: string\n      paramType: form\n\nresponseMessages:\n    - code: 400\n      message: BAD_REQUEST\n    - code: 401\n      message: UNAUTHORIZED\n    - code: 403\n      message: FORBIDDEN\n    - code: 500\n      message: INTERNAL_SERVER_ERROR\n\nconsumes:\n    - application/json\nproduces:\n    - application/json", "parameters": [{"description": "", "required": true, "type": "string", "name": "group_id", "in": "path"}], "tags": ["api3"], "summary": "Add a group repo", "operationId": "api3_groups_repos_create", "responses": {"201": {"description": ""}}}}, "/api3/groups/{group_id}/repos/{repo_id}/": {"delete": {"description": "Delete a group repo\n---\n# YAML\n\ntype:\n  Authorization:\n    required: true\n    type: string\n  group_id:\n    required: true\n    type: string\n  repo_id:\n    required: true\n    type: string\n\nparameters:\n    - name: Authorization\n      required: true\n      type: string\n      paramType: header\n    - name: group_id\n      required: true\n      type: string\n      paramType: path\n    - name: repo_id\n      required: true\n      type: string\n      paramType: path\n\nresponseMessages:\n    - code: 401\n      message: UNAUTHORIZED\n    - code: 403\n      message: FORBIDDEN\n    - code: 500\n      message: INTERNAL_SERVER_ERROR\n\nconsumes:\n    - application/json\nproduces:\n    - application/json", "parameters": [{"description": "", "required": true, "type": "string", "name": "repo_id", "in": "path"}, {"description": "", "required": true, "type": "string", "name": "group_id", "in": "path"}], "tags": ["api3"], "summary": "Delete a group repo", "operationId": "api3_groups_repos_delete", "responses": {"204": {"description": ""}}}}, "/api3/groups/{group_id}/search_user/": {"get": {"description": "Search user from contacts/all users\n---\n# YAML\n\ntype:\n  Authorization:\n    required: true\n    type: string\n  q:\n    required: true\n    type: string\n\nparameters:\n    - name: Authorization\n      required: true\n      type: string\n      paramType: header\n    - name: q\n      description: Keyword to search\n      required: true\n      type: string\n      paramType: query\n\nresponseMessages:\n    - code: 400\n      message: BAD_REQUEST\n    - code: 401\n      message: UNAUTHORIZED\n    - code: 500\n      message: INTERNAL_SERVER_ERROR\n\nconsumes:\n    - application/json\nproduces:\n    - application/json", "parameters": [{"description": "", "required": true, "type": "string", "name": "group_id", "in": "path"}], "tags": ["api3"], "summary": "Search user from contacts/all users", "operationId": "api3_groups_search_user_list", "responses": {"200": {"description": ""}}}}, "/api3/lib/{repo_id}/dir/": {"get": {"description": "New API for list library directory", "parameters": [{"description": "", "required": true, "type": "string", "name": "repo_id", "in": "path"}], "tags": ["api3"], "summary": "New API for list library directory", "operationId": "api3_lib_dir_list", "responses": {"200": {"description": ""}}}}, "/api3/login-config": {"get": {"description": "Get configuration for the login page\n---\n# YAML\n\ntype:\n  Authorization:\n    required: true\n    type: string\n  from:\n    required: false\n    type: string\n  name:\n    required: true\n    type: string\n  desc:\n    required: false\n    type: string\n  repo_id:\n    required: true\n    type: string\n\nresponseMessages:\n    - code: 400\n      message: BAD_REQUEST\n    - code: 401\n      message: UNAUTHORIZED\n    - code: 403\n      message: FORBIDDEN\n    - code: 500\n      message: INTERNAL_SERVER_ERROR\n\nconsumes:\n    - application/json\nproduces:\n    - application/json", "parameters": [], "tags": ["api3"], "summary": "Get configuration for the login page", "operationId": "api3_login-config_list", "responses": {"200": {"description": ""}}}}, "/api3/logout": {"post": {"description": "Removes the api token of a device that has already logged in. If the device\nis a desktop client, also remove all sync tokens of repos synced on that\nclient .", "parameters": [], "tags": ["api3"], "summary": "Removes the api token of a device that has already logged in. If the device", "operationId": "api3_logout_create", "responses": {"201": {"description": ""}}}}, "/api3/notification/": {"put": {"description": "currently only used for mark a notification seen\n\nPermission checking:\n1. login user.\n\n---\n# YAML\n\ntype:\n  Authorization:\n    required: true\n    type: string\n  notification_id:\n    required: true\n    type: string\n\nparameters:\n    - name: Authorization\n      required: true\n      type: string\n      paramType: header\n    - name: notification_id\n      description: Notification ID\n      required: true\n      type: string\n      paramType: form\n\nresponseMessages:\n    - code: 400\n      message: BAD_REQUEST\n    - code: 401\n      message: UNAUTHORIZED\n    - code: 404\n      message: NOT_FOUND\n    - code: 500\n      message: INTERNAL_SERVER_ERROR\n\nconsumes:\n    - application/json\nproduces:\n    - application/json", "parameters": [], "tags": ["api3"], "summary": "currently only used for mark a notification seen", "operationId": "api3_notification_update", "responses": {"200": {"description": ""}}}}, "/api3/notifications/": {"get": {"description": "Get user's notifications.\n---\n# YAML\n\ntype:\n  Authorization:\n    required: true\n    type: string\n  offset:\n    required: false\n    type: string\n  limit:\n    required: false\n    type: string\n\nparameters:\n    - name: Authorization\n      required: true\n      type: string\n      paramType: header\n    - name: offset\n      required: false\n      type: string\n      paramType: query\n    - name: limit\n      required: false\n      type: string\n      paramType: query\n\nresponseMessages:\n    - code: 400\n      message: BAD_REQUEST\n    - code: 401\n      message: UNAUTHORIZED\n    - code: 500\n      message: INTERNAL_SERVER_ERROR\n\nconsumes:\n    - application/json\nproduces:\n    - application/json", "parameters": [], "tags": ["api3"], "summary": "Get user's notifications.", "operationId": "api3_notifications_list", "responses": {"200": {"description": ""}}}, "put": {"description": "currently only used for mark all notifications seen\n\nPermission checking:\n1. login user.\n\n---\n# YAML\n\ntype:\n  Authorization:\n    required: true\n    type: string\n\nparameters:\n    - name: Authorization\n      required: true\n      type: string\n      paramType: header\n\nresponseMessages:\n    - code: 401\n      message: UNAUTHORIZED\n    - code: 500\n      message: INTERNAL_SERVER_ERROR\n\nconsumes:\n    - application/json\nproduces:\n    - application/json", "parameters": [], "tags": ["api3"], "summary": "currently only used for mark all notifications seen", "operationId": "api3_notifications_update", "responses": {"200": {"description": ""}}}, "delete": {"description": "Clean all notifications\n---\n# YAML\n\ntype:\n  Authorization:\n    required: true\n    type: string\n\nparameters:\n    - name: Authorization\n      required: true\n      type: string\n      paramType: header\n\nresponseMessages:\n    - code: 401\n      message: UNAUTHORIZED\n    - code: 500\n      message: INTERNAL_SERVER_ERROR\n\nconsumes:\n    - application/json\nproduces:\n    - application/json", "parameters": [], "tags": ["api3"], "summary": "Clean all notifications", "operationId": "api3_notifications_delete", "responses": {"204": {"description": ""}}}}, "/api3/notifications/count/": {"get": {"description": "currently only used for get unseen notifications count\n\nPermission checking:\n1. login user.\n\n---\n# YAML\n\ntype:\n  Authorization:\n    required: true\n    type: string\n\nparameters:\n    - name: Authorization\n      required: true\n      type: string\n      paramType: header\n\nresponseMessages:\n    - code: 401\n      message: UNAUTHORIZED\n    - code: 500\n      message: INTERNAL_SERVER_ERROR\n\nconsumes:\n    - application/json\nproduces:\n    - application/json", "parameters": [], "tags": ["api3"], "summary": "currently only used for get unseen notifications count", "operationId": "api3_notifications_count_list", "responses": {"200": {"description": ""}}}}, "/api3/notifications/top/": {"get": {"description": "Get user's notifications.\n\nIf unseen notices > 5, return all unseen notices.\nIf unseen notices = 0, return last 5 notices.\nOtherwise return all unseen notices, plus some seen notices to make the sum equal to 5.\n\nPermission checking:\n1. login user.\n\n---\n# YAML\n\ntype:\n  Authorization:\n    required: true\n    type: string\n\nparameters:\n    - name: Authorization\n      required: true\n      type: string\n      paramType: header\n\nresponseMessages:\n    - code: 401\n      message: UNAUTHORIZED\n    - code: 500\n      message: INTERNAL_SERVER_ERROR\n\nconsumes:\n    - application/json\nproduces:\n    - application/json", "parameters": [], "tags": ["api3"], "summary": "Get user's notifications.", "operationId": "api3_notifications_top_list", "responses": {"200": {"description": ""}}}}, "/api3/password/reset/": {"post": {"description": "Password Reset\n---\n# YAML\n\ntype:\n  email:\n    required: true\n    type: string\n\nparameters:\n    - name: email\n      required: true\n      type: string\n      paramType: form\n\nresponseMessages:\n    - code: 400\n      message: BAD_REQUEST\n    - code: 403\n      message: FORBIDDEN\n    - code: 404\n      message: NOT_FOUND\n    - code: 500\n      message: INTERNAL_SERVER_ERROR\n\nconsumes:\n    - application/json\nproduces:\n    - application/json", "parameters": [], "tags": ["api3"], "summary": "Password Reset", "operationId": "api3_password_reset_create", "responses": {"201": {"description": ""}}}}, "/api3/password/reset/confirm/{uidb36}-{token}/": {"get": {"description": "Validate Password Reset Token\n---\n# YAML\n\ntype:\n  uidb36:\n    required: true\n    type: string\n  token:\n    required: true\n    type: string\n\nparameters:\n    - name: uidb36\n      required: true\n      type: string\n      paramType: path\n    - name: token\n      required: true\n      type: string\n      paramType: path\n\nresponseMessages:\n    - code: 400\n      message: BAD_REQUEST\n    - code: 403\n      message: FORBIDDEN\n    - code: 404\n      message: NOT_FOUND\n    - code: 500\n      message: INTERNAL_SERVER_ERROR\n\nconsumes:\n    - application/json\nproduces:\n    - application/json", "parameters": [{"description": "", "required": true, "type": "string", "name": "uidb36", "in": "path"}, {"description": "", "required": true, "type": "string", "name": "token", "in": "path"}], "tags": ["api3"], "summary": "Validate Password Reset Token", "operationId": "api3_password_reset_confirm_read", "responses": {"200": {"description": ""}}}, "post": {"description": "Confirm Password Reset\n---\n# YAML\n\ntype:\n  uidb36:\n    required: true\n    type: string\n  token:\n    required: true\n    type: string\n  new_password1:\n    required: true\n    type: string\n  new_password2:\n    required: true\n    type: string\n\nparameters:\n    - name: uidb36\n      required: true\n      type: string\n      paramType: path\n    - name: token\n      required: true\n      type: string\n      paramType: path\n    - name: new_password1\n      required: true\n      type: string\n      paramType: form\n    - name: new_password2\n      required: true\n      type: string\n      paramType: form\n\nresponseMessages:\n    - code: 400\n      message: BAD_REQUEST\n    - code: 403\n      message: FORBIDDEN\n    - code: 404\n      message: NOT_FOUND\n    - code: 500\n      message: INTERNAL_SERVER_ERROR\n\nconsumes:\n    - application/json\nproduces:\n    - application/json", "parameters": [{"description": "", "required": true, "type": "string", "name": "uidb36", "in": "path"}, {"description": "", "required": true, "type": "string", "name": "token", "in": "path"}], "tags": ["api3"], "summary": "Confirm Password Reset", "operationId": "api3_password_reset_confirm_create", "responses": {"201": {"description": ""}}}}, "/api3/ping": {"get": {"description": "Returns a simple `pong` message when client calls `api2/ping/`.\nFor example:\ncurl http://127.0.0.1:8000/api3/ping/", "parameters": [], "tags": ["api3"], "summary": "Returns a simple `pong` message when client calls `api2/ping/`.", "operationId": "api3_ping_list", "responses": {"200": {"description": ""}}}}, "/api3/profile/": {"get": {"description": "Get User Profile\n---\n# YAML\n\ntype:\n  Authorization:\n    required: true\n    type: string\n  avatar_size:\n    required: false\n    type: string\n\nparameters:\n    - name: Authorization\n      required: true\n      type: string\n      paramType: header\n    - name: avatar_size\n      required: false\n      type: string\n      paramType: query\n\nresponseMessages:\n    - code: 400\n      message: BAD_REQUEST\n    - code: 401\n      message: UNAUTHORIZED\n    - code: 500\n      message: INTERNAL_SERVER_ERROR\n\nconsumes:\n    - application/json\nproduces:\n    - application/json", "parameters": [], "tags": ["api3"], "summary": "Get User Profile", "operationId": "api3_profile_list", "responses": {"200": {"description": ""}}}, "post": {"description": "Update User Profile\n---\n# YAML\n\ntype:\n  Authorization:\n    required: true\n    type: string\n  nickname:\n    required: false\n    type: string\n  intro:\n    required: false\n    type: string\n  department:\n    required: false\n    type: string\n  telephone:\n    required: false\n    type: string\n\nparameters:\n    - name: Authorization\n      required: true\n      type: string\n      paramType: header\n    - name: nickname\n      description: Name\n      required: false\n      type: string\n      paramType: form\n    - name: intro\n      description: Intro\n      required: false\n      type: string\n      paramType: form\n    - name: department\n      description: Department\n      required: false\n      type: string\n      paramType: form\n    - name: telephone\n      description: Telephone\n      required: false\n      type: string\n      paramType: form\n\nresponseMessages:\n    - code: 400\n      message: BAD_REQUEST\n    - code: 401\n      message: UNAUTHORIZED\n    - code: 500\n      message: INTERNAL_SERVER_ERROR\n\nconsumes:\n    - application/json\nproduces:\n    - application/json", "parameters": [], "tags": ["api3"], "summary": "Update User Profile", "operationId": "api3_profile_create", "responses": {"201": {"description": ""}}}, "put": {"description": "Update User Language\n---\n# YAML\n\ntype:\n  Authorization:\n    required: true\n    type: string\n  nickname:\n    required: false\n    type: string\n  intro:\n    required: false\n    type: string\n  department:\n    required: false\n    type: string\n  telephone:\n    required: false\n    type: string\n\nparameters:\n    - name: Authorization\n      required: true\n      type: string\n      paramType: header\n    - name: language\n      description: Language code\n      required: true\n      type: string\n      paramType: form\n\nresponseMessages:\n    - code: 400\n      message: BAD_REQUEST\n    - code: 401\n      message: UNAUTHORIZED\n    - code: 500\n      message: INTERNAL_SERVER_ERROR\n\nconsumes:\n    - application/json\nproduces:\n    - application/json", "parameters": [], "tags": ["api3"], "summary": "Update User Language", "operationId": "api3_profile_update", "responses": {"200": {"description": ""}}}}, "/api3/profile/avatar/": {"post": {"description": "Update User Avatar\n---\n# YAML\n\ntype:\n  Authorization:\n    required: true\n    type: string\n  avatar:\n    required: true\n    type: file\n\nparameters:\n    - name: Authorization\n      required: true\n      type: string\n      paramType: header\n    - name: avatar\n      required: true\n      type: file\n      paramType: form\n\nresponseMessages:\n    - code: 400\n      message: BAD_REQUEST\n    - code: 401\n      message: UNAUTHORIZED\n    - code: 500\n      message: INTERNAL_SERVER_ERROR\n\nconsumes:\n    - application/json\nproduces:\n    - application/json", "parameters": [], "tags": ["api3"], "summary": "Update User Avatar", "operationId": "api3_profile_avatar_create", "responses": {"201": {"description": ""}}}, "delete": {"description": "Delete User Avatar\n---\n# YAML\n\ntype:\n  Authorization:\n    required: true\n    type: string\n\nparameters:\n    - name: Authorization\n      required: true\n      type: string\n      paramType: header\n\nresponseMessages:\n    - code: 400\n      message: BAD_REQUEST\n    - code: 401\n      message: UNAUTHORIZED\n    - code: 500\n      message: INTERNAL_SERVER_ERROR\n\nconsumes:\n    - application/json\nproduces:\n    - application/json", "parameters": [], "tags": ["api3"], "summary": "Delete User Avatar", "operationId": "api3_profile_avatar_delete", "responses": {"204": {"description": ""}}}}, "/api3/profile/default-repo/": {"get": {"description": "Get user's default library.\n---\n# YAML\n\ntype:\nAuthorization:\n    required: true\n    type: string\n\nparameters:\n    - name: Authorization\n      required: true\n      type: string\n      paramType: header\n\nresponseMessages:\n    - code: 401\n      message: UNAUTHORIZED\n    - code: 500\n      message: INTERNAL_SERVER_ERROR\n\nconsumes:\n    - application/json\nproduces:\n    - application/json", "parameters": [], "tags": ["api3"], "summary": "Get user's default library.", "operationId": "api3_profile_default-repo_list", "responses": {"200": {"description": ""}}}, "post": {"description": "Set user's default library.\n---\n# YAML\n\ntype:\n  Authorization:\n    required: true\n    type: string\n  repo_id:\n    required: true\n    type: string\n\nparameters:\n    - name: Authorization\n      required: true\n      type: string\n      paramType: header\n    - name: repo_id\n      required: true\n      type: string\n      paramType: form\n\nresponseMessages:\n    - code: 400\n      message: BAD_REQUEST\n    - code: 401\n      message: UNAUTHORIZED\n    - code: 403\n      message: FORBIDDEN\n    - code: 500\n      message: INTERNAL_SERVER_ERROR\n\nconsumes:\n    - application/json\nproduces:\n    - application/json", "parameters": [], "tags": ["api3"], "summary": "Set user's default library.", "operationId": "api3_profile_default-repo_create", "responses": {"201": {"description": ""}}}}, "/api3/profile/password/": {"post": {"description": "Change Password\n---\n# YAML\n\ntype:\n  Authorization:\n    required: true\n    type: string\n  old_password:\n    required: true\n    type: string\n  new_password1:\n    required: true\n    type: string\n  new_password2:\n    required: true\n    type: string\n\nparameters:\n    - name: Authorization\n      required: true\n      type: string\n      paramType: header\n    - name: old_password\n      required: true\n      type: string\n      paramType: form\n    - name: new_password1\n      required: true\n      type: string\n      paramType: form\n    - name: new_password2\n      required: true\n      type: string\n      paramType: form\n\nresponseMessages:\n    - code: 400\n      message: BAD_REQUEST\n    - code: 401\n      message: UNAUTHORIZED\n    - code: 403\n      message: FORBIDDEN\n    - code: 404\n      message: NOT_FOUND\n    - code: 500\n      message: INTERNAL_SERVER_ERROR\n\nconsumes:\n    - application/json\nproduces:\n    - application/json", "parameters": [{"schema": {"required": ["old_password", "new_password1", "new_password2"], "type": "object", "properties": {"old_password": {"type": "string", "description": ""}, "new_password1": {"type": "string", "description": ""}, "new_password2": {"type": "string", "description": ""}}}, "name": "data", "in": "body"}], "tags": ["api3"], "summary": "Change Password", "operationId": "api3_profile_password_create", "consumes": ["application/json"], "responses": {"201": {"description": ""}}}}, "/api3/query-copy-move-progress/": {"get": {"description": "Fetch progress of file/dir mv/cp.\n\nPermission checking:\n1. user login;\n\n---\n# YAML\n\ntype:\n  Authorization:\n    required: true\n    type: string\n  task_id:\n    required: true\n    type: string\n\nparameters:\n    - name: Authorization\n      required: true\n      type: string\n      paramType: header\n    - name: task_id\n      required: true\n      type: string\n      paramType: query\n\nresponseMessages:\n    - code: 400\n      message: BAD_REQUEST\n    - code: 401\n      message: UNAUTHORIZED\n    - code: 404\n      message: NOT_FOUND\n    - code: 500\n      message: INTERNAL_SERVER_ERROR\n\nconsumes:\n    - application/json\nproduces:\n    - application/json", "parameters": [], "tags": ["api3"], "summary": "Fetch progress of file/dir mv/cp.", "operationId": "api3_query-copy-move-progress_list", "responses": {"200": {"description": ""}}}}, "/api3/query-zip-progress/": {"get": {"description": "Check progress when download dir/multi.\n---\n# YAML\n\ntype:\n  token:\n    required: true\n    type: string\n\nparameters:\n    - name: token\n      description: Download token\n      required: true\n      type: string\n      paramType: query\n\nresponseMessages:\n    - code: 400\n      message: BAD_REQUEST\n    - code: 401\n      message: UNAUTHORIZED\n    - code: 500\n      message: INTERNAL_SERVER_ERROR\n\nconsumes:\n    - application/json\nproduces:\n    - application/json", "parameters": [], "tags": ["api3"], "summary": "Check progress when download dir/multi.", "operationId": "api3_query-zip-progress_list", "responses": {"200": {"description": ""}}}}, "/api3/register": {"post": {"description": "User register\n---\n# YAML\n\ntype:\n  Authorization:\n    required: true\n    type: string\n  start:\n    required: true\n    type: string\n  limit:\n    required: true\n    type: string\n  scope:\n    required: false\n    type: string\n\nparameters:\n  - name: Authorization\n    required: true\n    type: string\n    paramType: header\n  - name: email\n    description: new user email\n    required: true\n    type: string\n    paramType: formData\n  - name: password1\n    description: password\n    required: true\n    type: string\n    paramType: formData\n  - name: password2\n    description: confirm password\n    required: true\n    type: string\n    paramType: formData\n\nresponseMessages:\n  - code: 400\n    message: BAD_REQUEST\n  - code: 401\n    message: UNAUTHORIZED\n  - code: 403\n    message: FORBIDDEN\n  - code: 404\n    message: NOT_FOUND\n  - code: 500\n    message: INTERNAL_SERVER_ERROR\n\nconsumes:\n  - application/json\nproduces:\n  - application/json", "parameters": [], "tags": ["api3"], "summary": "User register", "operationId": "api3_register_create", "responses": {"201": {"description": ""}}}}, "/api3/repo/{repo_id}/{obj_id}/download/": {"get": {"description": "Download file in repo/file history page.\n---\n# YAML\n\ntype:\n  Authorization:\n    required: true\n    type: string\n  repo_id:\n    required: true\n    type: string\n  obj_id:\n    required: true\n    type: string\n  p:\n    required: true\n    type: string\n\nparameters:\n    - name: Authorization\n      required: true\n      type: string\n      paramType: header\n    - name: repo_id\n      required: true\n      type: string\n      paramType: path\n    - name: obj_id\n      description: Revision file ID\n      required: true\n      type: string\n      paramType: path\n    - name: p\n      description: Path\n      required: true\n      type: string\n      paramType: query\n\nresponseMessages:\n    - code: 401\n      message: UNAUTHORIZED\n    - code: 403\n      message: FORBIDDEN\n    - code: 404\n      message: NOT_FOUND\n    - code: 500\n      message: INTERNAL_SERVER_ERROR\n\nconsumes:\n    - application/json\nproduces:\n    - application/json", "parameters": [{"description": "", "required": true, "type": "string", "name": "repo_id", "in": "path"}, {"description": "", "required": true, "type": "string", "name": "obj_id", "in": "path"}], "tags": ["api3"], "summary": "Download file in repo/file history page.", "operationId": "api3_repo_download_list", "responses": {"200": {"description": ""}}}}, "/api3/repos/": {"get": {"description": "List Libraries\n---\n# YAML\n\ntype:\n  Authorization:\n    required: true\n    type: string\n  type:\n    required: false\n    type: string\n\nparameters:\n    - name: Authorization\n      required: true\n      type: string\n      paramType: header\n    - name: type\n      description:\n        mine, get my owned libraries.\n\n        shared, get libraries shared to me.\n\n        group, get group libraries.\n\n        org, get public libraires.\n\n      required: false\n      type: string\n      paramType: query\n\nresponseMessages:\n    - code: 401\n      message: UNAUTHORIZED\n    - code: 500\n      message: INTERNAL_SERVER_ERROR\n\nconsumes:\n    - application/json\nproduces:\n    - application/json", "parameters": [], "tags": ["api3"], "summary": "List Libraries", "operationId": "api3_repos_list", "responses": {"200": {"description": ""}}}}, "/api3/repos/public/": {"get": {"description": "List public repos\n---\n# YAML\n\ntype:\n  Authorization:\n    required: true\n    type: string\n\nparameters:\n    - name: Authorization\n      required: true\n      type: string\n      paramType: header\n\nresponseMessages:\n    - code: 401\n      message: UNAUTHORIZED\n    - code: 403\n      message: FORBIDDEN\n    - code: 500\n      message: INTERNAL_SERVER_ERROR\n\nconsumes:\n    - application/json\nproduces:\n    - application/json", "parameters": [], "tags": ["api3"], "summary": "List public repos", "operationId": "api3_repos_public_list", "responses": {"200": {"description": ""}}}, "post": {"description": "Create public repo\n---\n# YAML\n\ntype:\n  Authorization:\n    required: true\n    type: string\n  name:\n    required: true\n    type: string\n  desc:\n    required: true\n    type: string\n  passwd:\n    required: true\n    type: string\n  permission:\n    required: true\n    type: string\n\nparameters:\n    - name: Authorization\n      required: true\n      type: string\n      paramType: header\n    - name: name\n      required: true\n      type: string\n      paramType: form\n    - name: desc\n      required: false\n      type: string\n      paramType: form\n    - name: passwd\n      required: false\n      type: string\n      paramType: form\n    - name: permission\n      description: r or rw, default r\n      required: false\n      type: string\n      paramType: form\n\nresponseMessages:\n    - code: 400\n      message: BAD_REQUEST\n    - code: 401\n      message: UNAUTHORIZED\n    - code: 403\n      message: FORBIDDEN\n    - code: 500\n      message: INTERNAL_SERVER_ERROR\n\nconsumes:\n    - application/json\nproduces:\n    - application/json", "parameters": [], "tags": ["api3"], "summary": "Create public repo", "operationId": "api3_repos_public_create", "responses": {"201": {"description": ""}}}}, "/api3/repos/{repo_id}/": {"get": {"description": "Get library detail\n---\n# YAML\n\ntype:\n  Authorization:\n    required: true\n    type: string\n  repo_id:\n    required: true\n    type: string\n\nparameters:\n    - name: Authorization\n      required: true\n      type: string\n      paramType: header\n    - name: repo_id\n      required: true\n      type: string\n      paramType: path\n\nresponseMessages:\n    - code: 400\n      message: BAD_REQUEST\n    - code: 401\n      message: UNAUTHORIZED\n    - code: 403\n      message: FORBIDDEN\n    - code: 404\n      message: NOT_FOUND\n    - code: 500\n      message: INTERNAL_SERVER_ERROR\n\nconsumes:\n    - application/json\nproduces:\n    - application/json", "parameters": [{"description": "", "required": true, "type": "string", "name": "repo_id", "in": "path"}], "tags": ["api3"], "summary": "Get library detail", "operationId": "api3_repos_read", "responses": {"200": {"description": ""}}}, "post": {"description": "---\n# YAML\n\ntype:\n  Authorization:\n    required: true\n    type: string\n  repo_id:\n    required: true\n    type: string\n  op:\n    required: false\n    type: string\n  repo_name:\n    required: false\n    type: string\n  repo_desc:\n    required: false\n    type: string\n\nparameters:\n    - name: Authorization\n      required: true\n      type: string\n      paramType: header\n    - name: repo_id\n      required: true\n      type: string\n      paramType: path\n    - name: op\n      required: false\n      type: string\n      paramType: query\n    - name: repo_name\n      required: false\n      type: string\n      paramType: form\n    - name: repo_desc\n      required: false\n      type: string\n      paramType: form\n\nresponseMessages:\n    - code: 400\n      message: BAD_REQUEST\n    - code: 401\n      message: UNAUTHORIZED\n    - code: 403\n      message: FORBIDDEN\n    - code: 404\n      message: NOT_FOUND\n    - code: 500\n      message: INTERNAL_SERVER_ERROR\n\nconsumes:\n    - application/json\nproduces:\n    - application/json", "parameters": [{"description": "", "required": true, "type": "string", "name": "repo_id", "in": "path"}], "tags": ["api3"], "summary": "---", "operationId": "api3_repos_create", "responses": {"201": {"description": ""}}}, "delete": {"description": "Delete single library by id\n---\n# YAML\n\ntype:\n  Authorization:\n    required: true\n    type: string\n  repo_id:\n    required: true\n    type: string\n\nparameters:\n    - name: Authorization\n      required: true\n      type: string\n      paramType: header\n    - name: repo_id\n      required: true\n      type: string\n      paramType: path\n\nresponseMessages:\n    - code: 400\n      message: BAD_REQUEST\n    - code: 401\n      message: UNAUTHORIZED\n    - code: 403\n      message: FORBIDDEN\n    - code: 404\n      message: NOT_FOUND\n    - code: 500\n      message: INTERNAL_SERVER_ERROR\n\nconsumes:\n    - application/json\nproduces:\n    - application/json", "parameters": [{"description": "", "required": true, "type": "string", "name": "repo_id", "in": "path"}], "tags": ["api3"], "summary": "Delete single library by id", "operationId": "api3_repos_delete", "responses": {"204": {"description": ""}}}}, "/api3/repos/{repo_id}/dir/": {"get": {"description": "Get dir info.\n\nPermission checking:\n1. user with either 'r' or 'rw' permission.\n\n---\n# YAML\n\ntype:\n  Authorization:\n    required: true\n    type: string\n  repo_id:\n    required: true\n    type: string\n  p:\n    required: true\n    type: string\n  oid:\n    required: false\n    type: string\n  t:\n    required: false\n    type: string\n  recursive:\n    required: false\n    type: string\n\nparameters:\n    - name: Authorization\n      required: true\n      type: string\n      paramType: header\n    - name: repo_id\n      required: true\n      type: string\n      paramType: path\n    - name: p\n      description: The path to a directory. If p is missing, then defaults to '/' which is the top directory.\n      required: true\n      type: string\n      paramType: query\n    - name: oid\n      description: The object id of the directory. The object id is the checksum of the directory contents.\n      required: false\n      type: string\n      paramType: query\n    - name: t\n      description: If set t argument as f, will only return file entries, and d for only dir entries.\n      required: false\n      type: string\n      paramType: query\n    - name: recursive\n      description: If set t argument as d AND recursive argument as 1, return all dir entries recursively\n      required: false\n      type: string\n      paramType: query\n\nresponseMessages:\n    - code: 400\n      message: BAD_REQUEST\n    - code: 401\n      message: UNAUTHORIZED\n    - code: 403\n      message: FORBIDDEN\n    - code: 404\n      message: NOT_FOUND\n    - code: 500\n      message: INTERNAL_SERVER_ERROR\n\nconsumes:\n    - application/json\nproduces:\n    - application/json", "parameters": [{"description": "", "required": true, "type": "string", "name": "repo_id", "in": "path"}], "tags": ["api3"], "summary": "Get dir info.", "operationId": "api3_repos_dir_list", "responses": {"200": {"description": ""}}}, "post": {"description": "Create, rename, revert dir.\n\nPermission checking:\n1. create: user with 'rw' permission for current dir's parent dir;\n2. rename: user with 'rw' permission for current dir;\n3. revert: user with 'rw' permission for current dir's parent dir;\n\n---\n# YAML\n\ntype:\n  Authorization:\n    required: true\n    type: string\n  repo_id:\n    required: true\n    type: string\n  p:\n    required: true\n    type: string\n  operation:\n    required: true\n    type: string\n  newname:\n    required: false\n    type: string\n  commit_id:\n    required: false\n    type: string\n\nparameters:\n    - name: Authorization\n      required: true\n      type: string\n      paramType: header\n    - name: repo_id\n      required: true\n      type: string\n      paramType: path\n    - name: p\n      description: Path\n      required: true\n      type: string\n      paramType: query\n    - name: operation\n      description: mkdir or rename\n      required: true\n      type: string\n      paramType: form\n    - name: newname\n      description: The new name of the directory\n      required: false\n      type: string\n      paramType: form\n    - name: commit_id\n      description: The commit id to revert\n      required: false\n      type: string\n      paramType: form\n\nresponseMessages:\n    - code: 400\n      message: BAD_REQUEST\n    - code: 401\n      message: UNAUTHORIZED\n    - code: 403\n      message: FORBIDDEN\n    - code: 404\n      message: NOT_FOUND\n    - code: 500\n      message: INTERNAL_SERVER_ERROR\n\nconsumes:\n    - application/json\nproduces:\n    - application/json", "parameters": [{"description": "", "required": true, "type": "string", "name": "repo_id", "in": "path"}], "tags": ["api3"], "summary": "Create, rename, revert dir.", "operationId": "api3_repos_dir_create", "responses": {"201": {"description": ""}}}, "delete": {"description": "Delete dir.\n\nPermission checking:\n1. user with 'rw' permission.\n\n---\n# YAML\n\ntype:\n  Authorization:\n    required: true\n    type: string\n  repo_id:\n    required: true\n    type: string\n  p:\n    required: true\n    type: string\n\nparameters:\n    - name: Authorization\n      required: true\n      type: string\n      paramType: header\n    - name: repo_id\n      required: true\n      type: string\n      paramType: path\n    - name: p\n      description: Path\n      required: true\n      type: string\n      paramType: query\n\nresponseMessages:\n    - code: 400\n      message: BAD_REQUEST\n    - code: 401\n      message: UNAUTHORIZED\n    - code: 403\n      message: FORBIDDEN\n    - code: 404\n      message: NOT_FOUND\n    - code: 500\n      message: INTERNAL_SERVER_ERROR\n\nconsumes:\n    - application/json\nproduces:\n    - application/json", "parameters": [{"description": "", "required": true, "type": "string", "name": "repo_id", "in": "path"}], "tags": ["api3"], "summary": "Delete dir.", "operationId": "api3_repos_dir_delete", "responses": {"204": {"description": ""}}}}, "/api3/repos/{repo_id}/dir/detail/": {"get": {"description": "Get dir info.\n\nPermission checking:\n1. user with either 'r' or 'rw' permission.\n\n---\n# YAML\n\ntype:\n  Authorization:\n    required: true\n    type: string\n  repo_id:\n    required: true\n    type: string\n  path:\n    required: true\n    type: string\n\nparameters:\n    - name: Authorization\n      required: true\n      type: string\n      paramType: header\n    - name: repo_id\n      required: true\n      type: string\n      paramType: path\n    - name: path\n      description: Path\n      required: true\n      type: string\n      paramType: query\n\nresponseMessages:\n    - code: 400\n      message: BAD_REQUEST\n    - code: 401\n      message: UNAUTHORIZED\n    - code: 403\n      message: FORBIDDEN\n    - code: 404\n      message: NOT_FOUND\n    - code: 500\n      message: INTERNAL_SERVER_ERROR\n\nconsumes:\n    - application/json\nproduces:\n    - application/json", "parameters": [{"description": "", "required": true, "type": "string", "name": "repo_id", "in": "path"}], "tags": ["api3"], "summary": "Get dir info.", "operationId": "api3_repos_dir_detail_list", "responses": {"200": {"description": ""}}}}, "/api3/repos/{repo_id}/dir/share_search_group/": {"get": {"description": "Search group to share.\n\nPermission checking:\n1. default(NOT guest) user;\n\n---\n# YAML\n\ntype:\n  Authorization:\n    required: true\n    type: string\n  repo_id:\n    required: true\n    type: string\n  q:\n    required: true\n    type: string\n  p:\n    required: false\n    type: string\n\nparameters:\n    - name: Authorization\n      required: true\n      type: string\n      paramType: header\n    - name: repo_id\n      required: true\n      type: string\n      paramType: path\n    - name: q\n      description: Keyword to search\n      required: true\n      type: string\n      paramType: query\n    - name: p\n      description: / means the root folder, which is equivalent to the library.\n      required: false\n      type: string\n      paramType: query\n\nresponseMessages:\n    - code: 400\n      message: BAD_REQUEST\n    - code: 401\n      message: UNAUTHORIZED\n    - code: 403\n      message: FORBIDDEN\n    - code: 500\n      message: INTERNAL_SERVER_ERROR\n\nconsumes:\n    - application/json\nproduces:\n    - application/json", "parameters": [{"description": "", "required": true, "type": "string", "name": "repo_id", "in": "path"}], "tags": ["api3"], "summary": "Search group to share.", "operationId": "api3_repos_dir_share_search_group_list", "responses": {"200": {"description": ""}}}}, "/api3/repos/{repo_id}/dir/share_search_user/": {"get": {"description": "Search user from contacts/all users to share\n---\n# YAML\n\ntype:\n  Authorization:\n    required: true\n    type: string\n  repo_id:\n    required: true\n    type: string\n  q:\n    required: true\n    type: string\n  p:\n    required: false\n    type: string\n  include_self:\n    required: false\n    type: string\n\nparameters:\n    - name: Authorization\n      required: true\n      type: string\n      paramType: header\n    - name: repo_id\n      required: true\n      type: string\n      paramType: path\n    - name: p\n      description: / means the root folder, which is equivalent to the library.\n      required: false\n      type: string\n      paramType: query\n    - name: q\n      description: Keyword to search\n      required: true\n      type: string\n      paramType: query\n    - name: include_self\n      description: 0 or 1\n      required: false\n      type: string\n      paramType: query\n\nresponseMessages:\n    - code: 400\n      message: BAD_REQUEST\n    - code: 401\n      message: UNAUTHORIZED\n    - code: 404\n      message: NOT_FOUND\n    - code: 500\n      message: INTERNAL_SERVER_ERROR\n\nconsumes:\n    - application/json\nproduces:\n    - application/json", "parameters": [{"description": "", "required": true, "type": "string", "name": "repo_id", "in": "path"}], "tags": ["api3"], "summary": "Search user from contacts/all users to share", "operationId": "api3_repos_dir_share_search_user_list", "responses": {"200": {"description": ""}}}}, "/api3/repos/{repo_id}/dir/shared_items/": {"get": {"description": "List shared items(shared to users/groups) for a folder/library.\n---\n# YAML\n\ntype:\n  Authorization:\n    required: true\n    type: string\n  repo_id:\n    required: true\n    type: string\n  p:\n    required: false\n    type: string\n  share_type:\n    required: false\n    type: string\n\nparameters:\n    - name: Authorization\n      required: true\n      type: string\n      paramType: header\n    - name: repo_id\n      required: true\n      type: string\n      paramType: path\n    - name: p\n      description: / means the root folder, which is equivalent to the library.\n      required: false\n      type: string\n      paramType: query\n    - name: share_type\n      description: user or group\n      required: false\n      type: string\n      paramType: query\n\nresponseMessages:\n    - code: 401\n      message: UNAUTHORIZED\n    - code: 404\n      message: NOT_FOUND\n    - code: 500\n      message: INTERNAL_SERVER_ERROR\n\nconsumes:\n    - application/json\nproduces:\n    - application/json", "parameters": [{"description": "", "required": true, "type": "string", "name": "repo_id", "in": "path"}], "tags": ["api3"], "summary": "List shared items(shared to users/groups) for a folder/library.", "operationId": "api3_repos_dir_shared_items_list", "responses": {"200": {"description": ""}}}, "post": {"description": "Update shared item permission.\n---\n# YAML\n\ntype:\n  Authorization:\n    required: true\n    type: string\n  repo_id:\n    required: true\n    type: string\n  p:\n    required: false\n    type: string\n  share_type:\n    required: false\n    type: string\n  permission:\n    required: false\n    type: string\n  username:\n    required: false\n    type: string\n  group_id:\n    required: false\n    type: string\n\nparameters:\n    - name: Authorization\n      required: true\n      type: string\n      paramType: header\n    - name: repo_id\n      required: true\n      type: string\n      paramType: path\n    - name: p\n      description: / means the root folder, which is equivalent to the library.\n      required: false\n      type: string\n      paramType: query\n    - name: share_type\n      description: user or group\n      required: false\n      type: string\n      paramType: query\n    - name: permission\n      description: r or rw\n      required: false\n      type: string\n      paramType: form\n    - name: username\n      description: a email string\n      required: false\n      type: string\n      paramType: query\n    - name: group_id\n      required: false\n      type: string\n      paramType: query\n\nresponseMessages:\n    - code: 400\n      message: BAD_REQUEST\n    - code: 401\n      message: UNAUTHORIZED\n    - code: 403\n      message: FORBIDDEN\n    - code: 404\n      message: NOT_FOUND\n    - code: 500\n      message: INTERNAL_SERVER_ERROR\n\nconsumes:\n    - application/json\nproduces:\n    - application/json", "parameters": [{"description": "", "required": true, "type": "string", "name": "repo_id", "in": "path"}], "tags": ["api3"], "summary": "Update shared item permission.", "operationId": "api3_repos_dir_shared_items_create", "responses": {"201": {"description": ""}}}, "put": {"description": "Update shared item permission.\n---\n# YAML\n\ntype:\n  Authorization:\n    required: true\n    type: string\n  repo_id:\n    required: true\n    type: string\n  p:\n    required: false\n    type: string\n  share_type:\n    required: false\n    type: string\n  permission:\n    required: false\n    type: string\n  username:\n    required: false\n    type: string\n  group_id:\n    required: false\n    type: string\n\nparameters:\n    - name: Authorization\n      required: true\n      type: string\n      paramType: header\n    - name: repo_id\n      required: true\n      type: string\n      paramType: path\n    - name: p\n      description: / means the root folder, which is equivalent to the library.\n      required: false\n      type: string\n      paramType: query\n    - name: share_type\n      description: user or group\n      required: false\n      type: string\n      paramType: form\n    - name: permission\n      description: r or rw, default r\n      required: false\n      type: string\n      paramType: form\n    - name: username\n      description: a email string or a list contains multi emails, necessary if share_type is user\n      required: false\n      type: string\n      paramType: form\n    - name: group_id\n      description: an integer or a list contains multi integers, necessary if share_type is group\n      required: false\n      type: string\n      paramType: form\n\nresponseMessages:\n    - code: 400\n      message: BAD_REQUEST\n    - code: 401\n      message: UNAUTHORIZED\n    - code: 403\n      message: FORBIDDEN\n    - code: 404\n      message: NOT_FOUND\n    - code: 500\n      message: INTERNAL_SERVER_ERROR\n\nconsumes:\n    - application/json\nproduces:\n    - application/json", "parameters": [{"description": "", "required": true, "type": "string", "name": "repo_id", "in": "path"}], "tags": ["api3"], "summary": "Update shared item permission.", "operationId": "api3_repos_dir_shared_items_update", "responses": {"200": {"description": ""}}}, "delete": {"description": "Delete shared item\n---\n# YAML\n\ntype:\n  Authorization:\n    required: true\n    type: string\n  repo_id:\n    required: true\n    type: string\n  p:\n    required: false\n    type: string\n  username:\n    required: false\n    type: string\n  group_id:\n    required: false\n    type: string\n  share_type:\n    required: false\n    type: string\n\nparameters:\n    - name: Authorization\n      required: true\n      type: string\n      paramType: header\n    - name: repo_id\n      required: true\n      type: string\n      paramType: path\n    - name: p\n      description: / means the root folder, which is equivalent to the library.\n      required: false\n      type: string\n      paramType: query\n    - name: username\n      description: a email string\n      required: false\n      type: string\n      paramType: query\n    - name: group_id\n      description: an integer\n      required: false\n      type: string\n      paramType: query\n    - name: share_type\n      description: user or group\n      required: false\n      type: string\n      paramType: query\n\nresponseMessages:\n    - code: 400\n      message: BAD_REQUEST\n    - code: 401\n      message: UNAUTHORIZED\n    - code: 403\n      message: FORBIDDEN\n    - code: 404\n      message: NOT_FOUND\n    - code: 500\n      message: INTERNAL_SERVER_ERROR\n\nconsumes:\n    - application/json\nproduces:\n    - application/json", "parameters": [{"description": "", "required": true, "type": "string", "name": "repo_id", "in": "path"}], "tags": ["api3"], "summary": "Delete shared item", "operationId": "api3_repos_dir_shared_items_delete", "responses": {"204": {"description": ""}}}}, "/api3/repos/{repo_id}/dir/sub_repo/": {"get": {"description": "Create sub-repo for folder\n\nPermission checking:\n1. user with `r` or `rw` permission.\n2. password correct for encrypted repo.", "parameters": [{"description": "", "required": true, "type": "string", "name": "repo_id", "in": "path"}], "tags": ["api3"], "summary": "Create sub-repo for folder", "operationId": "api3_repos_dir_sub_repo_list", "responses": {"200": {"description": ""}}}}, "/api3/repos/{repo_id}/dirents/": {"get": {"description": "Get dirents in a dir for file tree\n---\n# YAML\n\ntype:\n  Authorization:\n    required: true\n    type: string\n  repo_id:\n    required: true\n    type: string\n  path:\n    required: true\n    type: string\n  dir_only:\n    required: false\n    type: boolean\n  all_dir:\n    required: false\n    type: boolean\n\nparameters:\n    - name: Authorization\n      required: true\n      type: string\n      paramType: header\n    - name: repo_id\n      required: true\n      type: string\n      paramType: path\n    - name: path\n      required: true\n      type: string\n      paramType: query\n    - name: dir_only\n      required: false\n      type: boolean\n      paramType: query\n    - name: all_dir\n      required: false\n      type: boolean\n      paramType: query\n\nresponseMessages:\n    - code: 400\n      message: BAD_REQUEST\n    - code: 401\n      message: UNAUTHORIZED\n    - code: 403\n      message: FORBIDDEN\n    - code: 500\n      message: INTERNAL_SERVER_ERROR\n\nconsumes:\n    - application/json\nproduces:\n    - application/json", "parameters": [{"description": "", "required": true, "type": "string", "name": "repo_id", "in": "path"}], "tags": ["api3"], "summary": "Get dirents in a dir for file tree", "operationId": "api3_repos_dirents_list", "responses": {"200": {"description": ""}}}}, "/api3/repos/{repo_id}/dirents/delete/": {"post": {"description": "Delete multi files/dirs.\n---\n# YAML\n\ntype:\n  Authorization:\n    required: true\n    type: string\n  repo_id:\n    required: true\n    type: string\n  parent_dir:\n    required: true\n    type: string\n  dirents_names:\n    required: true\n    type: string\n\nparameters:\n    - name: Authorization\n      required: true\n      type: string\n      paramType: header\n    - name: repo_id\n      required: true\n      type: string\n      paramType: path\n    - name: parent_dir\n      required: true\n      type: string\n      paramType: query\n    - name: dirents_names\n      description: multiple file/folder names\n      required: true\n      type: string\n      paramType: form\n\nresponseMessages:\n    - code: 400\n      message: BAD_REQUEST\n    - code: 401\n      message: UNAUTHORIZED\n    - code: 500\n      message: INTERNAL_SERVER_ERROR\n\nconsumes:\n    - application/json\nproduces:\n    - application/json", "parameters": [{"description": "", "required": true, "type": "string", "name": "repo_id", "in": "path"}], "tags": ["api3"], "summary": "Delete multi files/dirs.", "operationId": "api3_repos_dirents_delete_create", "responses": {"201": {"description": ""}}}}, "/api3/repos/{repo_id}/download-info/": {"get": {"tags": ["api3"], "responses": {"200": {"description": ""}}, "parameters": [{"description": "", "required": true, "type": "string", "name": "repo_id", "in": "path"}], "operationId": "api3_repos_download-info_list"}}, "/api3/repos/{repo_id}/download-shared-links/": {"get": {"description": "Get Repo Download Shared Links\n---\n# YAML\n\ntype:\n  Authorization:\n    required: true\n    type: string\n  repo_id:\n    required: true\n    type: string\n\nparameters:\n    - name: Authorization\n      required: true\n      type: string\n      paramType: header\n    - name: repo_id\n      required: true\n      type: string\n      paramType: path\n\nresponseMessages:\n    - code: 400\n      message: BAD_REQUEST\n    - code: 401\n      message: UNAUTHORIZED\n    - code: 403\n      message: FORBIDDEN\n    - code: 404\n      message: NOT_FOUND\n    - code: 500\n      message: INTERNAL_SERVER_ERROR\n\nconsumes:\n    - application/json\nproduces:\n    - application/json", "parameters": [{"description": "", "required": true, "type": "string", "name": "repo_id", "in": "path"}], "tags": ["api3"], "summary": "Get Repo Download Shared Links", "operationId": "api3_repos_download-shared-links_list", "responses": {"200": {"description": ""}}}}, "/api3/repos/{repo_id}/download-shared-links/{token}/": {"delete": {"description": "Delete A Repo Download Shared Link\n---\n# YAML\n\ntype:\n  Authorization:\n    required: true\n    type: string\n  repo_id:\n    required: true\n    type: string\n  token:\n    required: true\n    type: string\n\nparameters:\n    - name: Authorization\n      required: true\n      type: string\n      paramType: header\n    - name: repo_id\n      required: true\n      type: string\n      paramType: path\n    - name: token\n      required: true\n      type: string\n      paramType: path\n\nresponseMessages:\n    - code: 400\n      message: BAD_REQUEST\n    - code: 401\n      message: UNAUTHORIZED\n    - code: 403\n      message: FORBIDDEN\n    - code: 404\n      message: NOT_FOUND\n    - code: 500\n      message: INTERNAL_SERVER_ERROR\n\nconsumes:\n    - application/json\nproduces:\n    - application/json", "parameters": [{"description": "", "required": true, "type": "string", "name": "token", "in": "path"}, {"description": "", "required": true, "type": "string", "name": "repo_id", "in": "path"}], "tags": ["api3"], "summary": "Delete A Repo Download Shared Link", "operationId": "api3_repos_download-shared-links_delete", "responses": {"204": {"description": ""}}}}, "/api3/repos/{repo_id}/file/": {"get": {"description": "Get file info.\n\nPermission checking:\n1. user with either 'r' or 'rw' permission.\n\n---\n# YAML\n\ntype:\n  Authorization:\n    required: true\n    type: string\n  repo_id:\n    required: true\n    type: string\n  p:\n    required: true\n    type: string\n\nparameters:\n    - name: Authorization\n      required: true\n      type: string\n      paramType: header\n    - name: repo_id\n      required: true\n      type: string\n      paramType: path\n    - name: p\n      description: Path\n      required: true\n      type: string\n      paramType: query\n\nresponseMessages:\n    - code: 400\n      message: BAD_REQUEST\n    - code: 401\n      message: UNAUTHORIZED\n    - code: 403\n      message: FORBIDDEN\n    - code: 404\n      message: NOT_FOUND\n    - code: 500\n      message: INTERNAL_SERVER_ERROR\n\nconsumes:\n    - application/json\nproduces:\n    - application/json", "parameters": [{"description": "", "required": true, "type": "string", "name": "repo_id", "in": "path"}], "tags": ["api3"], "summary": "Get file info.", "operationId": "api3_repos_file_list", "responses": {"200": {"description": ""}}}, "post": {"description": "Create, rename, move, copy, revert file\n\nPermission checking:\n1. create: user with 'rw' permission for current parent dir;\n2. rename: user with 'rw' permission for current file;\n3. move  : user with 'rw' permission for current file, 'rw' permission for dst parent dir;\n4. copy  : user with 'r' permission for current file, 'rw' permission for dst parent dir;\n4. revert: user with 'rw' permission for current file's parent dir;\n\n---\n# YAML\n\ntype:\n  Authorization:\n    required: true\n    type: string\n  repo_id:\n    required: true\n    type: string\n  p:\n    required: true\n    type: string\n  operation:\n    required: true\n    type: string\n  newname:\n    required: false\n    type: string\n  dst_repo:\n    required: false\n    type: string\n  dst_dir:\n    required: false\n    type: string\n  commit_id:\n    required: false\n    type: string\n\nparameters:\n    - name: Authorization\n      required: true\n      type: string\n      paramType: header\n    - name: repo_id\n      required: true\n      type: string\n      paramType: path\n    - name: p\n      description: Path\n      required: true\n      type: string\n      paramType: query\n    - name: operation\n      description: create, rename, move, copy, revert\n      required: true\n      type: string\n      paramType: form\n    - name: newname\n      required: false\n      type: string\n      paramType: form\n    - name: dst_repo\n      required: false\n      type: string\n      paramType: form\n    - name: dst_dir\n      required: false\n      type: string\n      paramType: form\n    - name: commit_id\n      required: false\n      type: string\n      paramType: form\n\nresponseMessages:\n    - code: 400\n      message: BAD_REQUEST\n    - code: 401\n      message: UNAUTHORIZED\n    - code: 403\n      message: FORBIDDEN\n    - code: 404\n      message: NOT_FOUND\n    - code: 500\n      message: INTERNAL_SERVER_ERROR\n\nconsumes:\n    - application/json\nproduces:\n    - application/json", "parameters": [{"description": "", "required": true, "type": "string", "name": "repo_id", "in": "path"}], "tags": ["api3"], "summary": "Create, rename, move, copy, revert file", "operationId": "api3_repos_file_create", "responses": {"201": {"description": ""}}}, "put": {"description": "Currently only for lock and unlock file operation.\n\nPermission checking:\n1. user with 'rw' permission for current file;\n\n---\n# YAML\n\ntype:\n  Authorization:\n    required: true\n    type: string\n  repo_id:\n    required: true\n    type: string\n  p:\n    required: true\n    type: string\n  operation:\n    required: true\n    type: string\n  expire:\n    required: false\n    type: string\n\nparameters:\n    - name: Authorization\n      required: true\n      type: string\n      paramType: header\n    - name: repo_id\n      required: true\n      type: string\n      paramType: path\n    - name: p\n      description: Path\n      required: true\n      type: string\n      paramType: query\n    - name: operation\n      description: lock or unlock\n      required: true\n      type: string\n      paramType: form\n    - name: expire\n      description: File lock expiration days\n      required: false\n      type: string\n      paramType: form\n\nresponseMessages:\n    - code: 400\n      message: BAD_REQUEST\n    - code: 401\n      message: UNAUTHORIZED\n    - code: 403\n      message: FORBIDDEN\n    - code: 404\n      message: NOT_FOUND\n    - code: 500\n      message: INTERNAL_SERVER_ERROR\n\nconsumes:\n    - application/json\nproduces:\n    - application/json", "parameters": [{"description": "", "required": true, "type": "string", "name": "repo_id", "in": "path"}], "tags": ["api3"], "summary": "Currently only for lock and unlock file operation.", "operationId": "api3_repos_file_update", "responses": {"200": {"description": ""}}}, "delete": {"description": "Delete file.\n\nPermission checking:\n1. user with 'rw' permission.\n\n---\n# YAML\n\ntype:\n  Authorization:\n    required: true\n    type: string\n  repo_id:\n    required: true\n    type: string\n  p:\n    required: true\n    type: string\n\nparameters:\n    - name: Authorization\n      required: true\n      type: string\n      paramType: header\n    - name: repo_id\n      required: true\n      type: string\n      paramType: path\n    - name: p\n      description: Path\n      required: true\n      type: string\n      paramType: query\n\nresponseMessages:\n    - code: 400\n      message: BAD_REQUEST\n    - code: 401\n      message: UNAUTHORIZED\n    - code: 403\n      message: FORBIDDEN\n    - code: 404\n      message: NOT_FOUND\n    - code: 500\n      message: INTERNAL_SERVER_ERROR\n\nconsumes:\n    - application/json\nproduces:\n    - application/json", "parameters": [{"description": "", "required": true, "type": "string", "name": "repo_id", "in": "path"}], "tags": ["api3"], "summary": "Delete file.", "operationId": "api3_repos_file_delete", "responses": {"204": {"description": ""}}}}, "/api3/repos/{repo_id}/file/comments/": {"get": {"description": "List all comments of a file.\n---\n# YAML\n\ntype:\n  Authorization:\n    required: true\n    type: string\n  repo_id:\n    required: true\n    type: string\n  p:\n    required: true\n    type: string\n  avatar_size:\n    required: true\n    type: string\n\nparameters:\n    - name: Authorization\n      required: true\n      type: string\n      paramType: header\n    - name: repo_id\n      required: true\n      type: string\n      paramType: path\n    - name: p\n      description: Path\n      required: true\n      type: string\n      paramType: query\n    - name: avatar_size\n      required: false\n      type: string\n      paramType: query\n\nresponseMessages:\n    - code: 400\n      message: BAD_REQUEST\n    - code: 401\n      message: UNAUTHORIZED\n    - code: 500\n      message: INTERNAL_SERVER_ERROR\n\nconsumes:\n    - application/json\nproduces:\n    - application/json", "parameters": [{"description": "", "required": true, "type": "string", "name": "repo_id", "in": "path"}], "tags": ["api3"], "summary": "List all comments of a file.", "operationId": "api3_repos_file_comments_list", "responses": {"200": {"description": ""}}}, "post": {"description": "Post a comments of a file.\n---\n# YAML\n\ntype:\n  Authorization:\n    required: true\n    type: string\n  repo_id:\n    required: true\n    type: string\n  p:\n    required: true\n    type: string\n  avatar_size:\n    required: true\n    type: string\n  comment:\n    required: true\n    type: string\n\nparameters:\n    - name: Authorization\n      required: true\n      type: string\n      paramType: header\n    - name: repo_id\n      required: true\n      type: string\n      paramType: path\n    - name: p\n      description: Path\n      required: true\n      type: string\n      paramType: query\n    - name: avatar_size\n      required: false\n      type: string\n      paramType: query\n    - name: comment\n      required: true\n      type: string\n      paramType: form\n\nresponseMessages:\n    - code: 400\n      message: BAD_REQUEST\n    - code: 401\n      message: UNAUTHORIZED\n    - code: 404\n      message: NOT_FOUND\n    - code: 500\n      message: INTERNAL_SERVER_ERROR\n\nconsumes:\n    - application/json\nproduces:\n    - application/json", "parameters": [{"description": "", "required": true, "type": "string", "name": "repo_id", "in": "path"}], "tags": ["api3"], "summary": "Post a comments of a file.", "operationId": "api3_repos_file_comments_create", "responses": {"201": {"description": ""}}}}, "/api3/repos/{repo_id}/file/comments/counts/": {"get": {"description": "Count all comments of all file under certain parent dir.\n---\n# YAML\n\ntype:\n  Authorization:\n    required: true\n    type: string\n  repo_id:\n    required: true\n    type: string\n  p:\n    required: true\n    type: string\n\nparameters:\n    - name: Authorization\n      required: true\n      type: string\n      paramType: header\n    - name: repo_id\n      required: true\n      type: string\n      paramType: path\n    - name: p\n      description: Path\n      required: true\n      type: string\n      paramType: query\n\nresponseMessages:\n    - code: 400\n      message: BAD_REQUEST\n    - code: 401\n      message: UNAUTHORIZED\n    - code: 404\n      message: NOT_FOUND\n    - code: 500\n      message: INTERNAL_SERVER_ERROR\n\nconsumes:\n    - application/json\nproduces:\n    - application/json", "parameters": [{"description": "", "required": true, "type": "string", "name": "repo_id", "in": "path"}], "tags": ["api3"], "summary": "Count all comments of all file under certain parent dir.", "operationId": "api3_repos_file_comments_counts_list", "responses": {"200": {"description": ""}}}}, "/api3/repos/{repo_id}/file/comments/{id}/": {"get": {"description": "Get a comment.\n---\n# YAML\n\ntype:\n  Authorization:\n    required: true\n    type: string\n  repo_id:\n    required: true\n    type: string\n  pk:\n    required: true\n    type: string\n  avatar_size:\n    required: false\n    type: string\n\nparameters:\n    - name: Authorization\n      required: true\n      type: string\n      paramType: header\n    - name: repo_id\n      required: true\n      type: string\n      paramType: path\n    - name: pk\n      description: Comment ID\n      required: true\n      type: string\n      paramType: path\n    - name: avatar_size\n      required: false\n      type: string\n      paramType: query\n\nresponseMessages:\n    - code: 400\n      message: BAD_REQUEST\n    - code: 401\n      message: UNAUTHORIZED\n    - code: 500\n      message: INTERNAL_SERVER_ERROR\n\nconsumes:\n    - application/json\nproduces:\n    - application/json", "parameters": [{"description": "", "required": true, "type": "string", "name": "repo_id", "in": "path"}, {"description": "", "required": true, "type": "string", "name": "id", "in": "path"}], "tags": ["api3"], "summary": "Get a comment.", "operationId": "api3_repos_file_comments_read", "responses": {"200": {"description": ""}}}, "delete": {"description": "Delete a comment, only comment author or repo owner can perform\nthis op.\n---\n# YAML\n\ntype:\n  Authorization:\n    required: true\n    type: string\n  repo_id:\n    required: true\n    type: string\n  pk:\n    required: true\n    type: string\n\nparameters:\n    - name: Authorization\n      required: true\n      type: string\n      paramType: header\n    - name: repo_id\n      required: true\n      type: string\n      paramType: path\n    - name: pk\n      description: Comment ID\n      required: true\n      type: string\n      paramType: path\n\nresponseMessages:\n    - code: 400\n      message: BAD_REQUEST\n    - code: 401\n      message: UNAUTHORIZED\n    - code: 403\n      message: FORBIDDEN\n    - code: 500\n      message: INTERNAL_SERVER_ERROR\n\nconsumes:\n    - application/json\nproduces:\n    - application/json", "parameters": [{"description": "", "required": true, "type": "string", "name": "repo_id", "in": "path"}, {"description": "", "required": true, "type": "string", "name": "id", "in": "path"}], "tags": ["api3"], "summary": "Delete a comment, only comment author or repo owner can perform", "operationId": "api3_repos_file_comments_delete", "responses": {"204": {"description": ""}}}}, "/api3/repos/{repo_id}/file/detail/": {"get": {"description": "Get Fie Detail\n---\n# YAML\n\ntype:\n  Authorization:\n    required: true\n    type: string\n  repo_id:\n    required: true\n    type: string\n  path:\n    required: true\n    type: string\n  commit_id:\n    required: false\n    type: string\n\nparameters:\n    - name: Authorization\n      required: true\n      type: string\n      paramType: header\n    - name: repo_id\n      required: true\n      type: string\n      paramType: path\n    - name: path\n      required: true\n      type: string\n      paramType: query\n    - name: commit_id\n      required: false\n      type: string\n      paramType: query\n\nresponseMessages:\n    - code: 400\n      message: BAD_REQUEST\n    - code: 401\n      message: UNAUTHORIZED\n    - code: 404\n      message: NOT_FOUND\n    - code: 500\n      message: INTERNAL_SERVER_ERROR\n\nconsumes:\n    - application/json\nproduces:\n    - application/json", "parameters": [{"description": "", "required": true, "type": "string", "name": "repo_id", "in": "path"}], "tags": ["api3"], "summary": "Get Fie Detail", "operationId": "api3_repos_file_detail_list", "responses": {"200": {"description": ""}}}}, "/api3/repos/{repo_id}/file/edit/": {"get": {"description": "Get file edit params\n---\n# YAML\n\ntype:\n  Authorization:\n    required: true\n    type: string\n  repo_id:\n    required: true\n    type: string\n  p:\n    required: true\n    type: string\n  file_enc:\n    required: false\n    type: string\n  from:\n    required: false\n    type: string\n  gid:\n    required: false\n    type: string\n\nparameters:\n    - name: Authorization\n      required: true\n      type: string\n      paramType: header\n    - name: repo_id\n      required: true\n      type: string\n      paramType: path\n    - name: p\n      description: Path\n      required: true\n      type: string\n      paramType: query\n    - name: file_enc\n      description: File encoding, default auto\n      required: false\n      type: string\n      paramType: query\n    - name: from\n      required: false\n      type: string\n      paramType: query\n    - name: gid\n      required: false\n      type: string\n      paramType: query\n\nresponseMessages:\n    - code: 400\n      message: BAD_REQUEST\n    - code: 401\n      message: UNAUTHORIZED\n    - code: 404\n      message: NOT_FOUND\n    - code: 500\n      message: INTERNAL_SERVER_ERROR\n\nconsumes:\n    - application/json\nproduces:\n    - application/json", "parameters": [{"description": "", "required": true, "type": "string", "name": "repo_id", "in": "path"}], "tags": ["api3"], "summary": "Get file edit params", "operationId": "api3_repos_file_edit_list", "responses": {"200": {"description": ""}}}, "post": {"description": "Submit file edit\n---\n# YAML\n\ntype:\n  Authorization:\n    required: true\n    type: string\n  repo_id:\n    required: true\n    type: string\n  p:\n    required: true\n    type: string\n  content:\n    required: true\n    type: string\n  encoding:\n    required: true\n    type: string\n  head:\n    required: true\n    type: string\n  from:\n    required: false\n    type: string\n  gid:\n    required: false\n    type: string\n\nparameters:\n    - name: Authorization\n      required: true\n      type: string\n      paramType: header\n    - name: repo_id\n      required: true\n      type: string\n      paramType: path\n    - name: p\n      description: Path\n      required: true\n      type: string\n      paramType: query\n    - name: content\n      description: File content\n      required: true\n      type: string\n      paramType: form\n    - name: encoding\n      description: File encoding, default auto\n      required: true\n      type: string\n      paramType: form\n    - name: head\n      required: true\n      type: string\n      paramType: query\n    - name: from\n      required: false\n      type: string\n      paramType: query\n    - name: gid\n      required: false\n      type: string\n      paramType: query\n\nresponseMessages:\n    - code: 400\n      message: BAD_REQUEST\n    - code: 401\n      message: UNAUTHORIZED\n    - code: 404\n      message: NOT_FOUND\n    - code: 500\n      message: INTERNAL_SERVER_ERROR\n\nconsumes:\n    - application/json\nproduces:\n    - application/json", "parameters": [{"description": "", "required": true, "type": "string", "name": "repo_id", "in": "path"}], "tags": ["api3"], "summary": "Submit file edit", "operationId": "api3_repos_file_edit_create", "responses": {"201": {"description": ""}}}}, "/api3/repos/{repo_id}/file/preview/": {"get": {"description": "Steps to view file:\n1. Get repo id and file path.\n2. Check user's permission.\n3. Check whether this file can be viewed online.\n4.1 Get file content if file is text file.\n4.2 Prepare flash if file is document.\n4.3 Prepare or use pdfjs if file is pdf.\n4.4 Other file return it's raw path.\n\n---\n# YAML\n\ntype:\n  Authorization:\n    required: true\n    type: string\n  repo_id:\n    required: true\n    type: string\n  p:\n    required: true\n    type: string\n  dl:\n    required: false\n    type: string\n  raw:\n    required: false\n    type: string\n\nparameters:\n    - name: Authorization\n      required: true\n      type: string\n      paramType: header\n    - name: repo_id\n      required: true\n      type: string\n      paramType: path\n    - name: p\n      description: Path\n      required: true\n      type: string\n      paramType: query\n    - name: dl\n      description: Download\n      required: false\n      type: string\n      paramType: query\n    - name: raw\n      required: false\n      type: string\n      paramType: query\n\nresponseMessages:\n    - code: 401\n      message: UNAUTHORIZED\n    - code: 403\n      message: FORBIDDEN\n    - code: 404\n      message: NOT_FOUND\n    - code: 500\n      message: INTERNAL_SERVER_ERROR\n\nconsumes:\n    - application/json\nproduces:\n    - application/json", "parameters": [{"description": "", "required": true, "type": "string", "name": "repo_id", "in": "path"}], "tags": ["api3"], "summary": "Steps to view file:", "operationId": "api3_repos_file_preview_list", "responses": {"200": {"description": ""}}}}, "/api3/repos/{repo_id}/file/revision/preview/": {"get": {"description": "Get file revision preview\n---\n# YAML\n\ntype:\n  Authorization:\n    required: true\n    type: string\n  repo_id:\n    required: true\n    type: string\n  p:\n    required: true\n    type: string\n  commit_id:\n    required: true\n    type: string\n  obj_id:\n    required: true\n    type: string\n\nparameters:\n    - name: Authorization\n      required: true\n      type: string\n      paramType: header\n    - name: repo_id\n      required: true\n      type: string\n      paramType: path\n    - name: p\n      description: Path\n      required: true\n      type: string\n      paramType: query\n    - name: commit_id\n      description: Commit ID\n      required: true\n      type: string\n      paramType: query\n    - name: obj_id\n      description: File revision ID\n      required: true\n      type: string\n      paramType: query\n\nresponseMessages:\n    - code: 400\n      message: BAD_REQUEST\n    - code: 401\n      message: UNAUTHORIZED\n    - code: 404\n      message: NOT_FOUND\n    - code: 500\n      message: INTERNAL_SERVER_ERROR\n\nconsumes:\n    - application/json\nproduces:\n    - application/json", "parameters": [{"description": "", "required": true, "type": "string", "name": "repo_id", "in": "path"}], "tags": ["api3"], "summary": "Get file revision preview", "operationId": "api3_repos_file_revision_preview_list", "responses": {"200": {"description": ""}}}}, "/api3/repos/{repo_id}/file/revisions/": {"get": {"description": "List file revisions in file version history page.\n---\n# YAML\n\ntype:\n  Authorization:\n    required: true\n    type: string\n  repo_id:\n    required: true\n    type: string\n  p:\n    required: true\n    type: string\n  days:\n    required: false\n    type: string\n\nparameters:\n    - name: Authorization\n      required: true\n      type: string\n      paramType: header\n    - name: repo_id\n      required: true\n      type: string\n      paramType: path\n    - name: p\n      description: Path\n      required: true\n      type: string\n      paramType: query\n    - name: days\n      description: default 7\n      required: false\n      type: string\n      paramType: query\n\nresponseMessages:\n    - code: 400\n      message: BAD_REQUEST\n    - code: 401\n      message: UNAUTHORIZED\n    - code: 404\n      message: NOT_FOUND\n    - code: 500\n      message: INTERNAL_SERVER_ERROR\n\nconsumes:\n    - application/json\nproduces:\n    - application/json", "parameters": [{"description": "", "required": true, "type": "string", "name": "repo_id", "in": "path"}], "tags": ["api3"], "summary": "List file revisions in file version history page.", "operationId": "api3_repos_file_revisions_list", "responses": {"200": {"description": ""}}}}, "/api3/repos/{repo_id}/file/text_diff/": {"get": {"description": "Get text diff\n---\n# YAML\n\ntype:\n  Authorization:\n    required: true\n    type: string\n  repo_id:\n    required: true\n    type: string\n  commit:\n    required: true\n    type: string\n  p:\n    required: true\n    type: string\n  file_enc:\n    required: false\n    type: string\n\nparameters:\n    - name: Authorization\n      required: true\n      type: string\n      paramType: header\n    - name: repo_id\n      required: true\n      type: string\n      paramType: path\n    - name: commit\n      description: Commit ID\n      required: true\n      type: string\n      paramType: query\n    - name: p\n      description: Path\n      required: true\n      type: string\n      paramType: query\n    - name: file_enc\n      description: File encoding (auto, utf-8, gbk, ISO-8859-1, ISO-8859-5) (default is auto)\n      required: false\n      type: string\n      paramType: query\n\nresponseMessages:\n    - code: 400\n      message: BAD_REQUEST\n    - code: 401\n      message: UNAUTHORIZED\n    - code: 500\n      message: INTERNAL_SERVER_ERROR\n\nconsumes:\n    - application/json\nproduces:\n    - application/json", "parameters": [{"description": "", "required": true, "type": "string", "name": "repo_id", "in": "path"}], "tags": ["api3"], "summary": "Get text diff", "operationId": "api3_repos_file_text_diff_list", "responses": {"200": {"description": ""}}}}, "/api3/repos/{repo_id}/fileops/copy/": {"post": {"description": "Copy files.", "parameters": [{"description": "", "required": true, "type": "string", "name": "repo_id", "in": "path"}], "tags": ["api3"], "summary": "Copy files.", "operationId": "api3_repos_fileops_copy_create", "responses": {"201": {"description": ""}}}}, "/api3/repos/{repo_id}/fileops/delete/": {"post": {"description": "Delete files.", "parameters": [{"description": "", "required": true, "type": "string", "name": "repo_id", "in": "path"}], "tags": ["api3"], "summary": "Delete files.", "operationId": "api3_repos_fileops_delete_create", "responses": {"201": {"description": ""}}}}, "/api3/repos/{repo_id}/fileops/move/": {"post": {"description": "Move files.", "parameters": [{"description": "", "required": true, "type": "string", "name": "repo_id", "in": "path"}], "tags": ["api3"], "summary": "Move files.", "operationId": "api3_repos_fileops_move_create", "responses": {"201": {"description": ""}}}}, "/api3/repos/{repo_id}/group-folder-perm/": {"get": {"description": "List repo group folder perms (by folder_path).\n\nPermission checking:\n1. repo owner & pro edition.\n\n---\n# YAML\n\ntype:\n  Authorization:\n    required: true\n    type: string\n  repo_id:\n    required: true\n    type: string\n  folder_path:\n    required: false\n    type: string\n\nparameters:\n    - name: Authorization\n      required: true\n      type: string\n      paramType: header\n    - name: repo_id\n      required: true\n      type: string\n      paramType: path\n    - name: folder_path\n      required: false\n      type: string\n      paramType: query\n\nresponseMessages:\n    - code: 401\n      message: UNAUTHORIZED\n    - code: 403\n      message: FORBIDDEN\n    - code: 404\n      message: NOT_FOUND\n    - code: 500\n      message: INTERNAL_SERVER_ERROR\n\nconsumes:\n    - application/json\nproduces:\n    - application/json", "parameters": [{"description": "", "required": true, "type": "string", "name": "repo_id", "in": "path"}], "tags": ["api3"], "summary": "List repo group folder perms (by folder_path).", "operationId": "api3_repos_group-folder-perm_list", "responses": {"200": {"description": ""}}}, "post": {"description": "Add repo group folder perm.\n\nPermission checking:\n1. repo owner & pro edition & enable folder perm.\n\n---\n# YAML\n\ntype:\n  Authorization:\n    required: true\n    type: string\n  repo_id:\n    required: true\n    type: string\n  folder_path:\n    required: false\n    type: string\n  permission:\n    required: false\n    type: string\n  group_id:\n    required: false\n    type: string\n\nparameters:\n    - name: Authorization\n      required: true\n      type: string\n      paramType: header\n    - name: repo_id\n      required: true\n      type: string\n      paramType: path\n    - name: folder_path\n      required: false\n      type: string\n      paramType: form\n    - name: permission\n      required: false\n      type: string\n      paramType: form\n    - name: group_id\n      required: false\n      type: string\n      paramType: form\n\nresponseMessages:\n    - code: 400\n      message: BAD_REQUEST\n    - code: 401\n      message: UNAUTHORIZED\n    - code: 403\n      message: FORBIDDEN\n    - code: 404\n      message: NOT_FOUND\n    - code: 500\n      message: INTERNAL_SERVER_ERROR\n\nconsumes:\n    - application/json\nproduces:\n    - application/json", "parameters": [{"description": "", "required": true, "type": "string", "name": "repo_id", "in": "path"}], "tags": ["api3"], "summary": "Add repo group folder perm.", "operationId": "api3_repos_group-folder-perm_create", "responses": {"201": {"description": ""}}}, "put": {"description": "Modify repo group folder perm.\n\nPermission checking:\n1. repo owner & pro edition & enable folder perm.\n\n---\n# YAML\n\ntype:\n  Authorization:\n    required: true\n    type: string\n  repo_id:\n    required: true\n    type: string\n  folder_path:\n    required: false\n    type: string\n  permission:\n    required: false\n    type: string\n  group_id:\n    required: false\n    type: string\n\nparameters:\n    - name: Authorization\n      required: true\n      type: string\n      paramType: header\n    - name: repo_id\n      required: true\n      type: string\n      paramType: path\n    - name: folder_path\n      required: false\n      type: string\n      paramType: form\n    - name: permission\n      required: false\n      type: string\n      paramType: form\n    - name: group_id\n      required: false\n      type: string\n      paramType: form\n\nresponseMessages:\n    - code: 400\n      message: BAD_REQUEST\n    - code: 401\n      message: UNAUTHORIZED\n    - code: 403\n      message: FORBIDDEN\n    - code: 404\n      message: NOT_FOUND\n    - code: 500\n      message: INTERNAL_SERVER_ERROR\n\nconsumes:\n    - application/json\nproduces:\n    - application/json", "parameters": [{"description": "", "required": true, "type": "string", "name": "repo_id", "in": "path"}], "tags": ["api3"], "summary": "Modify repo group folder perm.", "operationId": "api3_repos_group-folder-perm_update", "responses": {"200": {"description": ""}}}, "delete": {"description": "Remove repo group folder perm.\n\nPermission checking:\n1. repo owner & pro edition & enable folder perm.\n\n---\n# YAML\n\ntype:\n  Authorization:\n    required: true\n    type: string\n  repo_id:\n    required: true\n    type: string\n  group_id:\n    required: false\n    type: string\n  folder_path:\n    required: false\n    type: string\n\nparameters:\n    - name: Authorization\n      required: true\n      type: string\n      paramType: header\n    - name: repo_id\n      required: true\n      type: string\n      paramType: path\n    - name: group_id\n      required: false\n      type: string\n      paramType: form\n    - name: folder_path\n      required: false\n      type: string\n      paramType: form\n\nresponseMessages:\n    - code: 400\n      message: BAD_REQUEST\n    - code: 401\n      message: UNAUTHORIZED\n    - code: 403\n      message: FORBIDDEN\n    - code: 404\n      message: NOT_FOUND\n    - code: 500\n      message: INTERNAL_SERVER_ERROR\n\nconsumes:\n    - application/json\nproduces:\n    - application/json", "parameters": [{"description": "", "required": true, "type": "string", "name": "repo_id", "in": "path"}], "tags": ["api3"], "summary": "Remove repo group folder perm.", "operationId": "api3_repos_group-folder-perm_delete", "responses": {"204": {"description": ""}}}}, "/api3/repos/{repo_id}/history-limit/": {"get": {"tags": ["api3"], "responses": {"200": {"description": ""}}, "parameters": [{"description": "", "required": true, "type": "string", "name": "repo_id", "in": "path"}], "operationId": "api3_repos_history-limit_list"}, "put": {"tags": ["api3"], "responses": {"200": {"description": ""}}, "parameters": [{"description": "", "required": true, "type": "string", "name": "repo_id", "in": "path"}], "operationId": "api3_repos_history-limit_update"}}, "/api3/repos/{repo_id}/history/": {"get": {"description": "Return history of library\n\nPermission checking:\n1. all authenticated user can perform this action.\n\n---\n# YAML\n\ntype:\n  Authorization:\n    required: true\n    type: string\n  repo_id:\n    required: true\n    type: string\n  page:\n    required: false\n    type: string\n  per_page:\n    required: false\n    type: string\n\nparameters:\n    - name: Authorization\n      required: true\n      type: string\n      paramType: header\n    - name: repo_id\n      required: true\n      type: string\n      paramType: path\n    - name: page\n      description: default 1\n      required: false\n      type: string\n      paramType: query\n    - name: per_page\n      description: default 100\n      required: false\n      type: string\n      paramType: query\n\nresponseMessages:\n    - code: 400\n      message: BAD_REQUEST\n    - code: 401\n      message: UNAUTHORIZED\n    - code: 403\n      message: FORBIDDEN\n    - code: 404\n      message: NOT_FOUND\n    - code: 500\n      message: INTERNAL_SERVER_ERROR\n\nconsumes:\n    - application/json\nproduces:\n    - application/json", "parameters": [{"description": "", "required": true, "type": "string", "name": "repo_id", "in": "path"}], "tags": ["api3"], "summary": "Return history of library", "operationId": "api3_repos_history_list", "responses": {"200": {"description": ""}}}}, "/api3/repos/{repo_id}/history/changes/": {"get": {"description": "Get history changes\n---\n# YAML\n\ntype:\n  Authorization:\n    required: true\n    type: string\n  repo_id:\n    required: true\n    type: string\n  commit_id:\n    required: true\n    type: string\n\nparameters:\n    - name: Authorization\n      required: true\n      type: string\n      paramType: header\n    - name: repo_id\n      required: true\n      type: string\n      paramType: path\n    - name: commit_id\n      required: true\n      type: string\n      paramType: query\n\nresponseMessages:\n    - code: 400\n      message: BAD_REQUEST\n    - code: 401\n      message: UNAUTHORIZED\n    - code: 403\n      message: FORBIDDEN\n    - code: 500\n      message: INTERNAL_SERVER_ERROR\n\nconsumes:\n    - application/json\nproduces:\n    - application/json", "parameters": [{"description": "", "required": true, "type": "string", "name": "repo_id", "in": "path"}], "tags": ["api3"], "summary": "Get history changes", "operationId": "api3_repos_history_changes_list", "responses": {"200": {"description": ""}}}}, "/api3/repos/{repo_id}/history/snapshot/": {"get": {"description": "View repo in history.\n---\n# YAML\n\ntype:\n  Authorization:\n    required: true\n    type: string\n  repo_id:\n    required: true\n    type: string\n  p:\n    required: false\n    type: string\n  commit_id:\n    required: true\n    type: string\n\nparameters:\n    - name: Authorization\n      required: true\n      type: string\n      paramType: header\n    - name: repo_id\n      required: true\n      type: string\n      paramType: path\n    - name: p\n      required: false\n      type: string\n      paramType: query\n    - name: commit_id\n      required: true\n      type: string\n      paramType: query\n\nresponseMessages:\n    - code: 400\n      message: BAD_REQUEST\n    - code: 401\n      message: UNAUTHORIZED\n    - code: 403\n      message: FORBIDDEN\n    - code: 404\n      message: NOT_FOUND\n    - code: 500\n      message: INTERNAL_SERVER_ERROR\n\nconsumes:\n    - application/json\nproduces:\n    - application/json", "parameters": [{"description": "", "required": true, "type": "string", "name": "repo_id", "in": "path"}], "tags": ["api3"], "summary": "View repo in history.", "operationId": "api3_repos_history_snapshot_list", "responses": {"200": {"description": ""}}}, "put": {"description": "Restore library's history snapshot\n---\n# YAML\n\ntype:\n  Authorization:\n    required: true\n    type: string\n  repo_id:\n    required: true\n    type: string\n  commit_id:\n    required: true\n    type: string\n\nparameters:\n    - name: Authorization\n      required: true\n      type: string\n      paramType: header\n    - name: repo_id\n      required: true\n      type: string\n      paramType: path\n    - name: commit_id\n      required: true\n      type: string\n      paramType: query\n\nresponseMessages:\n    - code: 400\n      message: BAD_REQUEST\n    - code: 401\n      message: UNAUTHORIZED\n    - code: 403\n      message: FORBIDDEN\n    - code: 404\n      message: NOT_FOUND\n    - code: 500\n      message: INTERNAL_SERVER_ERROR\n\nconsumes:\n    - application/json\nproduces:\n    - application/json", "parameters": [{"description": "", "required": true, "type": "string", "name": "repo_id", "in": "path"}], "tags": ["api3"], "summary": "Restore library's history snapshot", "operationId": "api3_repos_history_snapshot_update", "responses": {"200": {"description": ""}}}}, "/api3/repos/{repo_id}/owner": {"get": {"tags": ["api3"], "responses": {"200": {"description": ""}}, "parameters": [{"description": "", "required": true, "type": "string", "name": "repo_id", "in": "path"}], "operationId": "api3_repos_owner_list"}, "put": {"description": "Currently only for transfer repo.\n\nPermission checking:\n1. only repo owner can transfer repo.", "parameters": [{"description": "", "required": true, "type": "string", "name": "repo_id", "in": "path"}], "tags": ["api3"], "summary": "Currently only for transfer repo.", "operationId": "api3_repos_owner_update", "responses": {"200": {"description": ""}}}}, "/api3/repos/{repo_id}/password/": {"post": {"description": "Check Repo password\n---\n# YAML\n\ntype:\n  Authorization:\n    required: true\n    type: string\n  repo_id:\n    required: true\n    type: string\n  password:\n    required: true\n    type: string\n\nparameters:\n    - name: Authorization\n      required: true\n      type: string\n      paramType: header\n    - name: repo_id\n      required: true\n      type: string\n      paramType: path\n    - name: password\n      description: Repo Password\n      required: true\n      type: string\n      paramType: form\n\nresponseMessages:\n    - code: 400\n      message: BAD_REQUEST\n    - code: 401\n      message: UNAUTHORIZED\n    - code: 404\n      message: NOT_FOUND\n    - code: 500\n      message: INTERNAL_SERVER_ERROR\n\nconsumes:\n    - application/json\nproduces:\n    - application/json", "parameters": [{"description": "", "required": true, "type": "string", "name": "repo_id", "in": "path"}], "tags": ["api3"], "summary": "Check Repo password", "operationId": "api3_repos_password_create", "responses": {"201": {"description": ""}}}, "put": {"description": "Change repo password.\n\nPermission checking:\n1. repo owner\n\n---\n# YAML\n\ntype:\n  Authorization:\n    required: true\n    type: string\n  repo_id:\n    required: true\n    type: string\n  old_password:\n    required: true\n    type: string\n  new_password:\n    required: true\n    type: string\n\nparameters:\n    - name: Authorization\n      required: true\n      type: string\n      paramType: header\n    - name: repo_id\n      required: true\n      type: string\n      paramType: path\n    - name: old_password\n      description: Old password\n      required: true\n      type: string\n      paramType: form\n    - name: new_password\n      description: New password\n      required: true\n      type: string\n      paramType: form\n\nresponseMessages:\n    - code: 400\n      message: BAD_REQUEST\n    - code: 401\n      message: UNAUTHORIZED\n    - code: 403\n      message: FORBIDDEN\n    - code: 404\n      message: NOT_FOUND\n    - code: 500\n      message: INTERNAL_SERVER_ERROR\n\nconsumes:\n    - application/json\nproduces:\n    - application/json", "parameters": [{"description": "", "required": true, "type": "string", "name": "repo_id", "in": "path"}], "tags": ["api3"], "summary": "Change repo password.", "operationId": "api3_repos_password_update", "responses": {"200": {"description": ""}}}}, "/api3/repos/{repo_id}/thumbnail/": {"get": {"description": "Get Thumbnail Image\n---\n# YAML\n\ntype:\n  Authorization:\n    required: true\n    type: string\n  repo_id:\n    required: true\n    type: string\n  p:\n    required: true\n    type: string\n  size:\n    required: true\n    type: string\n  obj_id:\n    required: false\n    type: string\n\nparameters:\n    - name: Authorization\n      required: true\n      type: string\n      paramType: header\n    - name: repo_id\n      required: true\n      type: string\n      paramType: path\n    - name: p\n      required: true\n      type: string\n      paramType: query\n    - name: size\n      required: true\n      type: string\n      paramType: query\n    - name: obj_id\n      required: false\n      type: string\n      paramType: query\n\nresponseMessages:\n    - code: 400\n      message: BAD_REQUEST\n    - code: 401\n      message: UNAUTHORIZED\n    - code: 403\n      message: FORBIDDEN\n    - code: 404\n      message: NOT_FOUND\n    - code: 500\n      message: INTERNAL_SERVER_ERROR\n\nconsumes:\n    - application/json\nproduces:\n    - application/json", "parameters": [{"description": "", "required": true, "type": "string", "name": "repo_id", "in": "path"}], "tags": ["api3"], "summary": "Get Thumbnail Image", "operationId": "api3_repos_thumbnail_list", "responses": {"200": {"description": ""}}}}, "/api3/repos/{repo_id}/trash/": {"get": {"description": "Get items in repo trash\n---\n# YAML\n\ntype:\n  Authorization:\n    required: true\n    type: string\n  commit_id:\n    required: false\n    type: string\n  base:\n    required: false\n    type: string\n  p:\n    required: false\n    type: string\n\nparameters:\n    - name: Authorization\n      required: true\n      type: string\n      paramType: header\n    - name: commit_id\n      required: false\n      type: string\n      paramType: query\n    - name: base\n      required: false\n      type: string\n      paramType: query\n    - name: p\n      required: false\n      type: string\n      paramType: query\n\nresponseMessages:\n    - code: 400\n      message: BAD_REQUEST\n    - code: 401\n      message: UNAUTHORIZED\n    - code: 403\n      message: FORBIDDEN\n    - code: 404\n      message: NOT_FOUND\n    - code: 500\n      message: INTERNAL_SERVER_ERROR\n\nconsumes:\n    - application/json\nproduces:\n    - application/json", "parameters": [{"description": "", "required": true, "type": "string", "name": "repo_id", "in": "path"}], "tags": ["api3"], "summary": "Get items in repo trash", "operationId": "api3_repos_trash_list", "responses": {"200": {"description": ""}}}}, "/api3/repos/{repo_id}/trash/clean/": {"post": {"description": "Clean Repo Trash\n---\n# YAML\n\ntype:\n  Authorization:\n    required: true\n    type: string\n  repo_id:\n    required: true\n    type: string\n  day:\n    required: true\n    type: string\n\nparameters:\n    - name: Authorization\n      required: true\n      type: string\n      paramType: header\n    - name: repo_id\n      required: true\n      type: string\n      paramType: path\n    - name: keep_days\n      description: -1 (all), 3, 7, 30\n      required: true\n      type: string\n      paramType: form\n\nresponseMessages:\n    - code: 401\n      message: UNAUTHORIZED\n    - code: 404\n      message: NOT_FOUND\n    - code: 500\n      message: INTERNAL_SERVER_ERROR\n\nconsumes:\n    - application/json\nproduces:\n    - application/json", "parameters": [{"description": "", "required": true, "type": "string", "name": "repo_id", "in": "path"}], "tags": ["api3"], "summary": "Clean Repo Trash", "operationId": "api3_repos_trash_clean_create", "responses": {"201": {"description": ""}}}}, "/api3/repos/{repo_id}/trash/dir/": {"get": {"description": "Get items in directory trash.\n---\n# YAML\n\ntype:\n  Authorization:\n    required: true\n    type: string\n  dir_path:\n    required: false\n    type: string\n  commit_id:\n    required: false\n    type: string\n  base:\n    required: false\n    type: string\n  p:\n    required: false\n    type: string\n\nparameters:\n    - name: Authorization\n      required: true\n      type: string\n      paramType: header\n    - name: dir_path\n      required: false\n      type: string\n      paramType: query\n    - name: commit_id\n      required: false\n      type: string\n      paramType: query\n    - name: base\n      required: false\n      type: string\n      paramType: query\n    - name: p\n      required: false\n      type: string\n      paramType: query\n\nresponseMessages:\n    - code: 400\n      message: BAD_REQUEST\n    - code: 401\n      message: UNAUTHORIZED\n    - code: 403\n      message: FORBIDDEN\n    - code: 404\n      message: NOT_FOUND\n    - code: 500\n      message: INTERNAL_SERVER_ERROR\n\nconsumes:\n    - application/json\nproduces:\n    - application/json", "parameters": [{"description": "", "required": true, "type": "string", "name": "repo_id", "in": "path"}], "tags": ["api3"], "summary": "Get items in directory trash.", "operationId": "api3_repos_trash_dir_list", "responses": {"200": {"description": ""}}}}, "/api3/repos/{repo_id}/trash/dir/restore/": {"put": {"description": "Restore directory\n---\n# YAML\n\ntype:\n  Authorization:\n    required: true\n    type: string\n  repo_id:\n    required: true\n    type: string\n  p:\n    required: true\n    type: string\n  commit_id:\n    required: true\n    type: string\n\nparameters:\n    - name: Authorization\n      required: true\n      type: string\n      paramType: header\n    - name: repo_id\n      required: true\n      type: string\n      paramType: path\n    - name: p\n      description: Path\n      required: true\n      type: string\n      paramType: form\n    - name: commit_id\n      required: true\n      type: string\n      paramType: form\n\nresponseMessages:\n    - code: 400\n      message: BAD_REQUEST\n    - code: 401\n      message: UNAUTHORIZED\n    - code: 403\n      message: FORBIDDEN\n    - code: 404\n      message: NOT_FOUND\n    - code: 500\n      message: INTERNAL_SERVER_ERROR\n\nconsumes:\n    - application/json\nproduces:\n    - application/json", "parameters": [{"description": "", "required": true, "type": "string", "name": "repo_id", "in": "path"}], "tags": ["api3"], "summary": "Restore directory", "operationId": "api3_repos_trash_dir_restore_update", "responses": {"200": {"description": ""}}}}, "/api3/repos/{repo_id}/trash/file/": {"get": {"description": "---\n# YAML\n\ntype:\n  Authorization:\n    required: true\n    type: string\n  obj_id:\n    required: true\n    type: string\n  commit_id:\n    required: true\n    type: string\n  p:\n    required: true\n    type: string\n  base:\n    required: true\n    type: string\n\nparameters:\n    - name: Authorization\n      required: true\n      type: string\n      paramType: header\n    - name: obj_id\n      required: true\n      type: string\n      paramType: query\n    - name: commit_id\n      required: true\n      type: string\n      paramType: query\n    - name: p\n      required: true\n      type: string\n      paramType: query\n    - name: base\n      required: true\n      type: string\n      paramType: query\n\nresponseMessages:\n    - code: 400\n      message: BAD_REQUEST\n    - code: 401\n      message: UNAUTHORIZED\n    - code: 403\n      message: FORBIDDEN\n    - code: 404\n      message: NOT_FOUND\n    - code: 500\n      message: INTERNAL_SERVER_ERROR\n\nconsumes:\n    - application/json\nproduces:\n    - application/json", "parameters": [{"description": "", "required": true, "type": "string", "name": "repo_id", "in": "path"}], "tags": ["api3"], "summary": "---", "operationId": "api3_repos_trash_file_list", "responses": {"200": {"description": ""}}}}, "/api3/repos/{repo_id}/trash/file/restore/": {"put": {"description": "Restore file\n---\n# YAML\n\ntype:\n  Authorization:\n    required: true\n    type: string\n  repo_id:\n    required: true\n    type: string\n  p:\n    required: true\n    type: string\n  commit_id:\n    required: true\n    type: string\n\nparameters:\n    - name: Authorization\n      required: true\n      type: string\n      paramType: header\n    - name: repo_id\n      required: true\n      type: string\n      paramType: path\n    - name: p\n      description: Path\n      required: true\n      type: string\n      paramType: form\n    - name: commit_id\n      required: true\n      type: string\n      paramType: form\n\nresponseMessages:\n    - code: 400\n      message: BAD_REQUEST\n    - code: 401\n      message: UNAUTHORIZED\n    - code: 403\n      message: FORBIDDEN\n    - code: 404\n      message: NOT_FOUND\n    - code: 500\n      message: INTERNAL_SERVER_ERROR\n\nconsumes:\n    - application/json\nproduces:\n    - application/json", "parameters": [{"description": "", "required": true, "type": "string", "name": "repo_id", "in": "path"}], "tags": ["api3"], "summary": "Restore file", "operationId": "api3_repos_trash_file_restore_update", "responses": {"200": {"description": ""}}}}, "/api3/repos/{repo_id}/trash/more/": {"get": {"description": "List first/'more' batch of repo/dir trash.\n---\n# YAML\n\ntype:\n  Authorization:\n    required: true\n    type: string\n  path:\n    required: false\n    type: string\n  show_days:\n    required: false\n    type: string\n  scan_stat:\n    required: false\n    type: string\n  limit:\n    required: false\n    type: string\n\nparameters:\n    - name: Authorization\n      required: true\n      type: string\n      paramType: header\n    - name: path\n      required: false\n      type: string\n      paramType: query\n    - name: show_days\n      required: false\n      type: string\n      paramType: query\n    - name: scan_stat\n      required: false\n      type: string\n      paramType: query\n    - name: limit\n      required: false\n      type: string\n      paramType: query\n\nresponseMessages:\n    - code: 400\n      message: BAD_REQUEST\n    - code: 401\n      message: UNAUTHORIZED\n    - code: 403\n      message: FORBIDDEN\n    - code: 404\n      message: NOT_FOUND\n    - code: 500\n      message: INTERNAL_SERVER_ERROR\n\nconsumes:\n    - application/json\nproduces:\n    - application/json", "parameters": [{"description": "", "required": true, "type": "string", "name": "repo_id", "in": "path"}], "tags": ["api3"], "summary": "List first/'more' batch of repo/dir trash.", "operationId": "api3_repos_trash_more_list", "responses": {"200": {"description": ""}}}}, "/api3/repos/{repo_id}/upload-link/": {"get": {"description": "Get upload link\n---\n# YAML\n\ntype:\n  Authorization:\n    required: true\n    type: string\n  repo_id:\n    required: true\n    type: string\n  p:\n    required: true\n    type: string\n  from:\n    required: false\n    type: string\n\nparameters:\n    - name: Authorization\n      required: true\n      type: string\n      paramType: header\n    - name: repo_id\n      required: true\n      type: string\n      paramType: path\n    - name: p\n      description: Path\n      required: true\n      type: string\n      paramType: query\n    - name: from\n      description: api or web\n      required: false\n      type: string\n      paramType: query\n\nresponseMessages:\n    - code: 400\n      message: BAD_REQUEST\n    - code: 401\n      message: UNAUTHORIZED\n    - code: 403\n      message: FORBIDDEN\n    - code: 404\n      message: NOT_FOUND\n    - code: 500\n      message: INTERNAL_SERVER_ERROR\n\nconsumes:\n    - application/json\nproduces:\n    - application/json", "parameters": [{"description": "", "required": true, "type": "string", "name": "repo_id", "in": "path"}], "tags": ["api3"], "summary": "Get upload link", "operationId": "api3_repos_upload-link_list", "responses": {"200": {"description": ""}}}}, "/api3/repos/{repo_id}/upload-shared-links/": {"get": {"description": "Get Repo Upload Shared Links\n---\n# YAML\n\ntype:\n  Authorization:\n    required: true\n    type: string\n  repo_id:\n    required: true\n    type: string\n\nparameters:\n    - name: Authorization\n      required: true\n      type: string\n      paramType: header\n    - name: repo_id\n      required: true\n      type: string\n      paramType: path\n\nresponseMessages:\n    - code: 400\n      message: BAD_REQUEST\n    - code: 401\n      message: UNAUTHORIZED\n    - code: 403\n      message: FORBIDDEN\n    - code: 404\n      message: NOT_FOUND\n    - code: 500\n      message: INTERNAL_SERVER_ERROR\n\nconsumes:\n    - application/json\nproduces:\n    - application/json", "parameters": [{"description": "", "required": true, "type": "string", "name": "repo_id", "in": "path"}], "tags": ["api3"], "summary": "Get Repo Upload Shared Links", "operationId": "api3_repos_upload-shared-links_list", "responses": {"200": {"description": ""}}}}, "/api3/repos/{repo_id}/upload-shared-links/{token}/": {"delete": {"description": "Delete A Repo Upload Shared Link\n---\n# YAML\n\ntype:\n  Authorization:\n    required: true\n    type: string\n  repo_id:\n    required: true\n    type: string\n  token:\n    required: true\n    type: string\n\nparameters:\n    - name: Authorization\n      required: true\n      type: string\n      paramType: header\n    - name: repo_id\n      required: true\n      type: string\n      paramType: path\n    - name: token\n      required: true\n      type: string\n      paramType: path\n\nresponseMessages:\n    - code: 400\n      message: BAD_REQUEST\n    - code: 401\n      message: UNAUTHORIZED\n    - code: 403\n      message: FORBIDDEN\n    - code: 404\n      message: NOT_FOUND\n    - code: 500\n      message: INTERNAL_SERVER_ERROR\n\nconsumes:\n    - application/json\nproduces:\n    - application/json", "parameters": [{"description": "", "required": true, "type": "string", "name": "token", "in": "path"}, {"description": "", "required": true, "type": "string", "name": "repo_id", "in": "path"}], "tags": ["api3"], "summary": "Delete A Repo Upload Shared Link", "operationId": "api3_repos_upload-shared-links_delete", "responses": {"204": {"description": ""}}}}, "/api3/repos/{repo_id}/user-folder-perm/": {"get": {"description": "List repo user folder perms (by folder_path).\n\nPermission checking:\n1. repo owner & pro edition.\n\n---\n# YAML\n\ntype:\n  Authorization:\n    required: true\n    type: string\n  repo_id:\n    required: true\n    type: string\n  folder_path:\n    required: false\n    type: string\n\nparameters:\n    - name: Authorization\n      required: true\n      type: string\n      paramType: header\n    - name: repo_id\n      required: true\n      type: string\n      paramType: path\n    - name: folder_path\n      required: false\n      type: string\n      paramType: query\n\nresponseMessages:\n    - code: 401\n      message: UNAUTHORIZED\n    - code: 403\n      message: FORBIDDEN\n    - code: 404\n      message: NOT_FOUND\n    - code: 500\n      message: INTERNAL_SERVER_ERROR\n\nconsumes:\n    - application/json\nproduces:\n    - application/json", "parameters": [{"description": "", "required": true, "type": "string", "name": "repo_id", "in": "path"}], "tags": ["api3"], "summary": "List repo user folder perms (by folder_path).", "operationId": "api3_repos_user-folder-perm_list", "responses": {"200": {"description": ""}}}, "post": {"description": "Add repo user folder perm.\n\nPermission checking:\n1. repo owner & pro edition & enable folder perm.\n\n---\n# YAML\n\ntype:\n  Authorization:\n    required: true\n    type: string\n  repo_id:\n    required: true\n    type: string\n  folder_path:\n    required: false\n    type: string\n  permission:\n    required: false\n    type: string\n  user_email:\n    required: false\n    type: string\n\nparameters:\n    - name: Authorization\n      required: true\n      type: string\n      paramType: header\n    - name: repo_id\n      required: true\n      type: string\n      paramType: path\n    - name: folder_path\n      required: false\n      type: string\n      paramType: form\n    - name: permission\n      required: false\n      type: string\n      paramType: form\n    - name: user_email\n      required: false\n      type: string\n      paramType: form\n\nresponseMessages:\n    - code: 400\n      message: BAD_REQUEST\n    - code: 401\n      message: UNAUTHORIZED\n    - code: 403\n      message: FORBIDDEN\n    - code: 404\n      message: NOT_FOUND\n    - code: 500\n      message: INTERNAL_SERVER_ERROR\n\nconsumes:\n    - application/json\nproduces:\n    - application/json", "parameters": [{"description": "", "required": true, "type": "string", "name": "repo_id", "in": "path"}], "tags": ["api3"], "summary": "Add repo user folder perm.", "operationId": "api3_repos_user-folder-perm_create", "responses": {"201": {"description": ""}}}, "put": {"description": "Modify repo user folder perm.\n\nPermission checking:\n1. repo owner & pro edition & enable folder perm.\n\n---\n# YAML\n\ntype:\n  Authorization:\n    required: true\n    type: string\n  repo_id:\n    required: true\n    type: string\n  folder_path:\n    required: false\n    type: string\n  permission:\n    required: false\n    type: string\n  user_email:\n    required: false\n    type: string\n\nparameters:\n    - name: Authorization\n      required: true\n      type: string\n      paramType: header\n    - name: repo_id\n      required: true\n      type: string\n      paramType: path\n    - name: folder_path\n      required: false\n      type: string\n      paramType: form\n    - name: permission\n      required: false\n      type: string\n      paramType: form\n    - name: user_email\n      required: false\n      type: string\n      paramType: form\n\nresponseMessages:\n    - code: 400\n      message: BAD_REQUEST\n    - code: 401\n      message: UNAUTHORIZED\n    - code: 403\n      message: FORBIDDEN\n    - code: 404\n      message: NOT_FOUND\n    - code: 500\n      message: INTERNAL_SERVER_ERROR\n\nconsumes:\n    - application/json\nproduces:\n    - application/json", "parameters": [{"description": "", "required": true, "type": "string", "name": "repo_id", "in": "path"}], "tags": ["api3"], "summary": "Modify repo user folder perm.", "operationId": "api3_repos_user-folder-perm_update", "responses": {"200": {"description": ""}}}, "delete": {"description": "Remove repo user folder perm.\n\nPermission checking:\n1. repo owner & pro edition & enable folder perm.\n\n---\n# YAML\n\ntype:\n  Authorization:\n    required: true\n    type: string\n  repo_id:\n    required: true\n    type: string\n  user_email:\n    required: false\n    type: string\n  folder_path:\n    required: false\n    type: string\n\nparameters:\n    - name: Authorization\n      required: true\n      type: string\n      paramType: header\n    - name: repo_id\n      required: true\n      type: string\n      paramType: path\n    - name: user_email\n      required: false\n      type: string\n      paramType: form\n    - name: folder_path\n      required: false\n      type: string\n      paramType: form\n\nresponseMessages:\n    - code: 400\n      message: BAD_REQUEST\n    - code: 401\n      message: UNAUTHORIZED\n    - code: 403\n      message: FORBIDDEN\n    - code: 404\n      message: NOT_FOUND\n    - code: 500\n      message: INTERNAL_SERVER_ERROR\n\nconsumes:\n    - application/json\nproduces:\n    - application/json", "parameters": [{"description": "", "required": true, "type": "string", "name": "repo_id", "in": "path"}], "tags": ["api3"], "summary": "Remove repo user folder perm.", "operationId": "api3_repos_user-folder-perm_delete", "responses": {"204": {"description": ""}}}}, "/api3/repos/{repo_id}/zip-task/": {"get": {"description": "Get file server token for download-dir and download-multi.\n\nPermission checking:\n1. user with 'r' or 'rw' permission;\n\n---\n# YAML\n\ntype:\n  Authorization:\n    required: true\n    type: string\n  repo_id:\n    required: true\n    type: string\n  parent_dir:\n    required: false\n    type: string\n  dirents:\n    required: false\n    type: string\n\nparameters:\n    - name: Authorization\n      required: true\n      type: string\n      paramType: header\n    - name: repo_id\n      required: true\n      type: string\n      paramType: path\n    - name: parent_dir\n      required: false\n      type: string\n      paramType: query\n    - name: dirents\n      required: false\n      type: string\n      paramType: query\n\nresponseMessages:\n    - code: 400\n      message: BAD_REQUEST\n    - code: 401\n      message: UNAUTHORIZED\n    - code: 403\n      message: FORBIDDEN\n    - code: 404\n      message: NOT_FOUND\n    - code: 500\n      message: INTERNAL_SERVER_ERROR\n\nconsumes:\n    - application/json\nproduces:\n    - application/json", "parameters": [{"description": "", "required": true, "type": "string", "name": "repo_id", "in": "path"}], "tags": ["api3"], "summary": "Get file server token for download-dir and download-multi.", "operationId": "api3_repos_zip-task_list", "responses": {"200": {"description": ""}}}}, "/api3/roles/": {"get": {"description": "Get available role list\n---\n# YAML\n\ntype:\nAuthorization:\n    required: true\n    type: string\n\nparameters:\n    - name: Authorization\n      required: true\n      type: string\n      paramType: header\n\nresponseMessages:\n    - code: 401\n      message: UNAUTHORIZED\n    - code: 500\n      message: INTERNAL_SERVER_ERROR\n\nconsumes:\n    - application/json\nproduces:\n    - application/json", "parameters": [], "tags": ["api3"], "summary": "Get available role list", "operationId": "api3_roles_list", "responses": {"200": {"description": ""}}}}, "/api3/search-group/": {"get": {"description": "Search group.\n\nPermission checking:\n1. default(NOT guest) user;\n\n---\n# YAML\n\ntype:\n  Authorization:\n    required: true\n    type: string\n  q:\n    required: true\n    type: string\n\nparameters:\n    - name: Authorization\n      required: true\n      type: string\n      paramType: header\n    - name: q\n      description: Keyword to search\n      required: true\n      type: string\n      paramType: query\n\nresponseMessages:\n    - code: 400\n      message: BAD_REQUEST\n    - code: 401\n      message: UNAUTHORIZED\n    - code: 403\n      message: FORBIDDEN\n    - code: 500\n      message: INTERNAL_SERVER_ERROR\n\nconsumes:\n    - application/json\nproduces:\n    - application/json", "parameters": [], "tags": ["api3"], "summary": "Search group.", "operationId": "api3_search-group_list", "responses": {"200": {"description": ""}}}}, "/api3/search-user/": {"get": {"description": "Search user from contacts/all users\n---\n# YAML\n\ntype:\n  Authorization:\n    required: true\n    type: string\n  q:\n    required: true\n    type: string\n\nparameters:\n    - name: Authorization\n      required: true\n      type: string\n      paramType: header\n    - name: q\n      description: Keyword to search\n      required: true\n      type: string\n      paramType: query\n\nresponseMessages:\n    - code: 400\n      message: BAD_REQUEST\n    - code: 401\n      message: UNAUTHORIZED\n    - code: 500\n      message: INTERNAL_SERVER_ERROR\n\nconsumes:\n    - application/json\nproduces:\n    - application/json", "parameters": [], "tags": ["api3"], "summary": "Search user from contacts/all users", "operationId": "api3_search-user_list", "responses": {"200": {"description": ""}}}}, "/api3/send-share-link/": {"post": {"description": "Send Share Link Email\n---\n# YAML\n\ntype:\n  Authorization:\n    required: true\n    type: string\n  token:\n    required: true\n    type: string\n  email:\n    required: true\n    type: string\n  extra_msg:\n    required: false\n    type: string\n\nparameters:\n    - name: Authorization\n      required: true\n      type: string\n      paramType: header\n    - name: token\n      required: true\n      type: string\n      paramType: form\n    - name: email\n      required: true\n      type: string\n      paramType: form\n    - name: extra_msg\n      required: true\n      type: string\n      paramType: form\n\nresponseMessages:\n    - code: 400\n      message: BAD_REQUEST\n    - code: 401\n      message: UNAUTHORIZED\n    - code: 403\n      message: FORBIDDEN\n    - code: 404\n      message: NOT_FOUND\n    - code: 500\n      message: INTERNAL_SERVER_ERROR\n\nconsumes:\n    - application/json\nproduces:\n    - application/json", "parameters": [], "tags": ["api3"], "summary": "Send Share Link Email", "operationId": "api3_send-share-link_create", "responses": {"201": {"description": ""}}}}, "/api3/send-upload-link/": {"post": {"description": "Send Upload Link Email\n---\n# YAML\n\ntype:\n  Authorization:\n    required: true\n    type: string\n  token:\n    required: true\n    type: string\n  email:\n    required: true\n    type: string\n  extra_msg:\n    required: false\n    type: string\n\nparameters:\n    - name: Authorization\n      required: true\n      type: string\n      paramType: header\n    - name: token\n      required: true\n      type: string\n      paramType: form\n    - name: email\n      required: true\n      type: string\n      paramType: form\n    - name: extra_msg\n      required: true\n      type: string\n      paramType: form\n\nresponseMessages:\n    - code: 400\n      message: BAD_REQUEST\n    - code: 401\n      message: UNAUTHORIZED\n    - code: 403\n      message: FORBIDDEN\n    - code: 404\n      message: NOT_FOUND\n    - code: 500\n      message: INTERNAL_SERVER_ERROR\n\nconsumes:\n    - application/json\nproduces:\n    - application/json", "parameters": [], "tags": ["api3"], "summary": "Send Upload Link Email", "operationId": "api3_send-upload-link_create", "responses": {"201": {"description": ""}}}}, "/api3/server-info": {"get": {"description": "API for exposing system version.", "parameters": [], "tags": ["api3"], "summary": "API for exposing system version.", "operationId": "api3_server-info_list", "responses": {"200": {"description": ""}}}}, "/api3/settings/by-keys": {"get": {"description": "Get constance settings by keys.\n\nThe valid system setting keys are: DISABLE_SYNC_WITH_ANY_FOLDER, ENABLE_USER_CREATE_ORG_REPO, SHARE_LINK_TOKEN_LENGTH, ENABLE_GLOBAL_ADDRESSBOOK, REPO_PASSWORD_MIN_LENGTH, REGISTRATION_SEND_MAIL, SHARE_LINK_PASSWORD_MIN_LENGTH, ENABLE_REPO_HISTORY_SETTING, SERVICE_URL, ACTIVATE_AFTER_REGISTRATION, ENABLE_ENCRYPTED_LIBRARY, LOGIN_REMEMBER_DAYS, USER_STRONG_PASSWORD_REQUIRED, FORCE_PASSWORD_CHANGE, FREEZE_USER_ON_LOGIN_FAILED, ENABLE_TWO_FACTOR_AUTH, USER_PASSWORD_MIN_LENGTH, TEXT_PREVIEW_EXT, ENABLE_SIGNUP, USER_PASSWORD_STRENGTH_LEVEL, FILE_SERVER_ROOT, LOGIN_ATTEMPT_LIMIT\n\n---\n# YAML\n\ntype:\n  Authorization:\n    required: true\n    type: string\n\nparameters:\n    - name: Authorization\n      required: true\n      type: string\n      paramType: header\n    - name: keys\n      required: true\n      type: string\n      paramType: query\n      description: a string contains the setting keys for retrieve seperate by comma.\n\nresponseMessages:\n    - code: 401\n      message: UNAUTHORIZED\n    - code: 500\n      message: INTERNAL_SERVER_ERROR\n\nconsumes:\n    - application/json\nproduces:\n    - application/json", "parameters": [], "tags": ["api3"], "summary": "Get constance settings by keys.", "operationId": "api3_settings_by-keys_list", "responses": {"200": {"description": ""}}}}, "/api3/settings/restapi/by-keys": {"get": {"description": "Get restapi settings by keys.\n\nThe valid system setting keys are: CLOUD_MODE\n\n---\n# YAML\n\ntype:\n  Authorization:\n    required: true\n    type: string\n\nparameters:\n    - name: Authorization\n      required: true\n      type: string\n      paramType: header\n    - name: keys\n      required: true\n      type: string\n      paramType: query\n      description: a string contains the setting keys for retrieve seperate by comma.\n\nresponseMessages:\n    - code: 401\n      message: UNAUTHORIZED\n    - code: 500\n      message: INTERNAL_SERVER_ERROR\n\nconsumes:\n    - application/json\nproduces:\n    - application/json", "parameters": [], "tags": ["api3"], "summary": "Get restapi settings by keys.", "operationId": "api3_settings_restapi_by-keys_list", "responses": {"200": {"description": ""}}}}, "/api3/share-link-audit/": {"post": {"description": "Generate a token, and record that token with email in cache, expires in\none hour, send token to that email address.\n\nUser provide token and email at share link page, if the token and email\nare valid, record that email in session.\n---\n# YAML\n\ntype:\n  token:\n    required: true\n    type: string\n  email:\n    required: true\n    type: string\n\nparameters:\n    - name: token\n      required: true\n      type: string\n      paramType: form\n    - name: email\n      required: true\n      type: string\n      paramType: form\n\nresponseMessages:\n    - code: 400\n      message: BAD_REQUEST\n    - code: 401\n      message: UNAUTHORIZED\n    - code: 403\n      message: FORBIDDEN\n    - code: 404\n      message: NOT_FOUND\n    - code: 500\n      message: INTERNAL_SERVER_ERROR\n\nconsumes:\n    - application/json\nproduces:\n    - application/json", "parameters": [], "tags": ["api3"], "summary": "Generate a token, and record that token with email in cache, expires in", "operationId": "api3_share-link-audit_create", "responses": {"201": {"description": ""}}}}, "/api3/share-link-zip-task/": {"get": {"description": "Only used for download dir when view dir share link from web.\n\n\nPermission checking:\n1. authenticated user OR anonymous user has passed email code check(if necessary);\n---\n# YAML\n\ntype:\n  share_link_token:\n    required: true\n    type: string\n  path:\n    required: true\n    type: string\n\nparameters:\n    - name: share_link_token\n      required: true\n      type: string\n      paramType: query\n    - name: path\n      description: Path\n      required: true\n      type: string\n      paramType: query\n\nresponseMessages:\n    - code: 400\n      message: BAD_REQUEST\n    - code: 401\n      message: UNAUTHORIZED\n    - code: 403\n      message: FORBIDDEN\n    - code: 404\n      message: NOT_FOUND\n    - code: 500\n      message: INTERNAL_SERVER_ERROR\n\nconsumes:\n    - application/json\nproduces:\n    - application/json", "parameters": [], "tags": ["api3"], "summary": "Only used for download dir when view dir share link from web.", "operationId": "api3_share-link-zip-task_list", "responses": {"200": {"description": ""}}}}, "/api3/share-links/": {"get": {"description": "Get all share links of a user.\n\nPermission checking:\n1. default(NOT guest) user;\n\n---\n# YAML\n\ntype:\n  Authorization:\n    required: true\n    type: string\n  repo_id:\n    required: false\n    type: string\n  path:\n    required: false\n    type: string\n\nparameters:\n    - name: Authorization\n      required: true\n      type: string\n      paramType: header\n    - name: repo_id\n      required: false\n      type: string\n      paramType: query\n    - name: path\n      required: false\n      type: string\n      paramType: query\n\nresponseMessages:\n    - code: 401\n      message: UNAUTHORIZED\n    - code: 404\n      message: NOT_FOUND\n    - code: 500\n      message: INTERNAL_SERVER_ERROR\n\nconsumes:\n    - application/json\nproduces:\n    - application/json", "parameters": [], "tags": ["api3"], "summary": "Get all share links of a user.", "operationId": "api3_share-links_list", "responses": {"200": {"description": ""}}}, "post": {"description": "Create share link.\n\nPermission checking:\n1. default(NOT guest) user;\n\n---\n# YAML\n\ntype:\n  Authorization:\n    required: true\n    type: string\n  repo_id:\n    required: true\n    type: string\n  path:\n    required: false\n    type: string\n  password:\n    required: false\n    type: string\n  expire_days:\n    required: false\n    type: string\n  permissions:\n    required: false\n    type: object\n\nparameters:\n    - name: Authorization\n      required: true\n      type: string\n      paramType: header\n    - name: repo_id\n      required: true\n      type: string\n      paramType: form\n    - name: path\n      required: false\n      type: string\n      paramType: form\n    - name: password\n      required: false\n      type: string\n      paramType: form\n    - name: expire_days\n      required: false\n      type: string\n      paramType: form\n    - name: permissions\n      required: false\n      type: object\n      paramType: form\n\nresponseMessages:\n    - code: 400\n      message: BAD_REQUEST\n    - code: 401\n      message: UNAUTHORIZED\n    - code: 403\n      message: FORBIDDEN\n    - code: 404\n      message: NOT_FOUND\n    - code: 500\n      message: INTERNAL_SERVER_ERROR\n\nconsumes:\n    - application/json\nproduces:\n    - application/json", "parameters": [], "tags": ["api3"], "summary": "Create share link.", "operationId": "api3_share-links_create", "responses": {"201": {"description": ""}}}}, "/api3/share-links/{token}/": {"get": {"description": "Get a special share link info.\n\nPermission checking:\n1. default(NOT guest) user;\n\n---\n# YAML\n\ntype:\n  Authorization:\n    required: true\n    type: string\n  token:\n    required: true\n    type: string\n\nparameters:\n    - name: Authorization\n      required: true\n      type: string\n      paramType: header\n    - name: token\n      required: true\n      type: string\n      paramType: path\n\nresponseMessages:\n    - code: 401\n      message: UNAUTHORIZED\n    - code: 404\n      message: NOT_FOUND\n    - code: 500\n      message: INTERNAL_SERVER_ERROR\n\nconsumes:\n    - application/json\nproduces:\n    - application/json", "parameters": [{"description": "", "required": true, "type": "string", "name": "token", "in": "path"}], "tags": ["api3"], "summary": "Get a special share link info.", "operationId": "api3_share-links_read", "responses": {"200": {"description": ""}}}, "delete": {"description": "Delete share link.\n\nPermission checking:\n1. default(NOT guest) user;\n2. link owner;\n\n---\n# YAML\n\ntype:\n  Authorization:\n    required: true\n    type: string\n  token:\n    required: true\n    type: string\n\nparameters:\n    - name: Authorization\n      required: true\n      type: string\n      paramType: header\n    - name: token\n      required: true\n      type: string\n      paramType: path\n\nresponseMessages:\n    - code: 401\n      message: UNAUTHORIZED\n    - code: 403\n      message: FORBIDDEN\n    - code: 500\n      message: INTERNAL_SERVER_ERROR\n\nconsumes:\n    - application/json\nproduces:\n    - application/json", "parameters": [{"description": "", "required": true, "type": "string", "name": "token", "in": "path"}], "tags": ["api3"], "summary": "Delete share link.", "operationId": "api3_share-links_delete", "responses": {"204": {"description": ""}}}}, "/api3/shared-folders/": {"get": {"description": "List all shared out folders.\n\nPermission checking:\n1. all authenticated user can perform this action.\n---\n# YAML\n\ntype:\n  Authorization:\n    required: true\n    type: string\n\nparameters:\n    - name: Authorization\n      required: true\n      type: string\n      paramType: header\n\nresponseMessages:\n    - code: 400\n      message: BAD_REQUEST\n    - code: 401\n      message: UNAUTHORIZED\n    - code: 403\n      message: FORBIDDEN\n    - code: 404\n      message: NOT_FOUND\n    - code: 500\n      message: INTERNAL_SERVER_ERROR\n\nconsumes:\n    - application/json\nproduces:\n    - application/json", "parameters": [], "tags": ["api3"], "summary": "List all shared out folders.", "operationId": "api3_shared-folders_list", "responses": {"200": {"description": ""}}}}, "/api3/shared-repos/": {"get": {"description": "List all shared out repos.\n\nPermission checking:\n1. all authenticated user can perform this action.\n---\n# YAML\n\ntype:\n  Authorization:\n    required: true\n    type: string\n\nparameters:\n    - name: Authorization\n      required: true\n      type: string\n      paramType: header\n\nresponseMessages:\n    - code: 400\n      message: BAD_REQUEST\n    - code: 401\n      message: UNAUTHORIZED\n    - code: 403\n      message: FORBIDDEN\n    - code: 404\n      message: NOT_FOUND\n    - code: 500\n      message: INTERNAL_SERVER_ERROR\n\nconsumes:\n    - application/json\nproduces:\n    - application/json", "parameters": [], "tags": ["api3"], "summary": "List all shared out repos.", "operationId": "api3_shared-repos_list", "responses": {"200": {"description": ""}}}}, "/api3/shared-repos/{repo_id}/": {"put": {"description": "Update permission of a shared repo.\n\nPermission checking:\n1. Only repo owner can update.\n---\n# YAML\n\ntype:\n  Authorization:\n    required: true\n    type: string\n  repo_id:\n    required: true\n    type: string\n  permission:\n    required: false\n    type: string\n  share_type:\n    required: false\n    type: string\n\nparameters:\n    - name: Authorization\n      required: true\n      type: string\n      paramType: header\n    - name: repo_id\n      required: true\n      type: string\n      paramType: path\n    - name: permission\n      required: false\n      type: string\n      paramType: form\n    - name: share_type\n      required: false\n      type: string\n      paramType: form\n\nresponseMessages:\n    - code: 400\n      message: BAD_REQUEST\n    - code: 401\n      message: UNAUTHORIZED\n    - code: 403\n      message: FORBIDDEN\n    - code: 404\n      message: NOT_FOUND\n    - code: 500\n      message: INTERNAL_SERVER_ERROR\n\nconsumes:\n    - application/json\nproduces:\n    - application/json", "parameters": [{"description": "", "required": true, "type": "string", "name": "repo_id", "in": "path"}], "tags": ["api3"], "summary": "Update permission of a shared repo.", "operationId": "api3_shared-repos_update", "responses": {"200": {"description": ""}}}, "delete": {"description": "Unshare a repo.\n\nPermission checking:\n1. Only repo owner can unshare a library.\n---\n# YAML\n\ntype:\n  Authorization:\n    required: true\n    type: string\n  repo_id:\n    required: true\n    type: string\n  share_type:\n    required: false\n    type: string\n\nparameters:\n    - name: Authorization\n      required: true\n      type: string\n      paramType: header\n    - name: repo_id\n      required: true\n      type: string\n      paramType: path\n    - name: share_type\n      required: false\n      type: string\n      paramType: query\n\nresponseMessages:\n    - code: 400\n      message: BAD_REQUEST\n    - code: 401\n      message: UNAUTHORIZED\n    - code: 403\n      message: FORBIDDEN\n    - code: 404\n      message: NOT_FOUND\n    - code: 500\n      message: INTERNAL_SERVER_ERROR\n\nconsumes:\n    - application/json\nproduces:\n    - application/json", "parameters": [{"description": "", "required": true, "type": "string", "name": "repo_id", "in": "path"}], "tags": ["api3"], "summary": "Unshare a repo.", "operationId": "api3_shared-repos_delete", "responses": {"204": {"description": ""}}}}, "/api3/shares/": {"get": {"tags": ["api3"], "responses": {"200": {"description": ""}}, "parameters": [], "operationId": "api3_shares_list"}}, "/api3/space-traffic/": {"get": {"description": "Get space and traffic info", "parameters": [], "tags": ["api3"], "summary": "Get space and traffic info", "operationId": "api3_space-traffic_list", "responses": {"200": {"description": ""}}}}, "/api3/starredfiles/": {"get": {"description": "List starred files\n---\n# YAML\n\ntype:\n  Authorization:\n    required: true\n    type: string\n\nparameters:\n    - name: Authorization\n      required: true\n      type: string\n      paramType: header\n\nresponseMessages:\n    - code: 401\n      message: UNAUTHORIZED\n    - code: 500\n      message: INTERNAL_SERVER_ERROR\n\nconsumes:\n    - application/json\nproduces:\n    - application/json", "parameters": [], "tags": ["api3"], "summary": "List starred files", "operationId": "api3_starredfiles_list", "responses": {"200": {"description": ""}}}, "post": {"description": "Add starred file\n---\n# YAML\n\ntype:\n  Authorization:\n    required: true\n    type: string\n  repo_id:\n    required: true\n    type: string\n  p:\n    required: true\n    type: string\n\nparameters:\n    - name: Authorization\n      required: true\n      type: string\n      paramType: header\n    - name: repo_id\n      required: true\n      type: string\n      paramType: form\n    - name: p\n      required: true\n      type: string\n      paramType: form\n\nresponseMessages:\n    - code: 400\n      message: BAD_REQUEST\n    - code: 401\n      message: UNAUTHORIZED\n    - code: 404\n      message: NOT_FOUND\n    - code: 500\n      message: INTERNAL_SERVER_ERROR\n\nconsumes:\n    - application/json\nproduces:\n    - application/json", "parameters": [], "tags": ["api3"], "summary": "Add starred file", "operationId": "api3_starredfiles_create", "responses": {"201": {"description": ""}}}, "delete": {"description": "Remove starred file\n---\n# YAML\n\ntype:\n  Authorization:\n    required: true\n    type: string\n  repo_id:\n    required: true\n    type: string\n  p:\n    required: true\n    type: string\n\nparameters:\n    - name: Authorization\n      required: true\n      type: string\n      paramType: header\n    - name: repo_id\n      required: true\n      type: string\n      paramType: query\n    - name: p\n      required: true\n      type: string\n      paramType: query\n\nresponseMessages:\n    - code: 400\n      message: BAD_REQUEST\n    - code: 401\n      message: UNAUTHORIZED\n    - code: 403\n      message: FORBIDDEN\n    - code: 404\n      message: NOT_FOUND\n    - code: 500\n      message: INTERNAL_SERVER_ERROR\n\nconsumes:\n    - application/json\nproduces:\n    - application/json", "parameters": [], "tags": ["api3"], "summary": "Remove starred file", "operationId": "api3_starredfiles_delete", "responses": {"204": {"description": ""}}}}, "/api3/sys/settings/": {"get": {"description": "List admin settings.\n\n---\n# YAML\n\ntype:\n  Authorization:\n    required: true\n    type: string\n\nparameters:\n    - name: Authorization\n      required: true\n      type: string\n      paramType: header\n\nresponseMessages:\n    - code: 401\n      message: UNAUTHORIZED\n    - code: 500\n      message: INTERNAL_SERVER_ERROR\n\nconsumes:\n    - application/json\nproduces:\n    - application/json", "parameters": [], "tags": ["api3"], "summary": "List admin settings.", "operationId": "api3_sys_settings_list", "responses": {"200": {"description": ""}}}, "post": {"description": "Update admin settings\n\n---\n# YAML\n\ntype:\n  Authorization:\n    required: true\n    type: string\n  key:\n    required: true\n    type: string\n  value:\n    required: true\n    type: string\n\nparameters:\n    - name: Authorization\n      required: true\n      type: string\n      paramType: header\n    - name: key\n      description: setting key\n      required: true\n      type: string\n      paramType: form\n    - name: value\n      description: setting value\n      required: true\n      type: string\n      paramType: form\n\nresponseMessages:\n    - code: 400\n      message: BAD_REQUEST\n    - code: 401\n      message: UNAUTHORIZED\n    - code: 500\n      message: INTERNAL_SERVER_ERROR\n\nconsumes:\n    - application/json\nproduces:\n    - application/json", "parameters": [], "tags": ["api3"], "summary": "Update admin settings", "operationId": "api3_sys_settings_create", "responses": {"201": {"description": ""}}}}, "/api3/u/d/{token}/": {"get": {"description": "Get shared upload link detail\n---\n# YAML\n\ntype:\n  token:\n    required: true\n    type: string\n\nparameters:\n    - name: token\n      required: true\n      type: string\n      paramType: path\n\nresponseMessages:\n    - code: 400\n      message: BAD_REQUEST\n    - code: 401\n      message: UNAUTHORIZED\n    - code: 403\n      message: FORBIDDEN\n    - code: 404\n      message: NOT_FOUND\n    - code: 500\n      message: INTERNAL_SERVER_ERROR\n\nconsumes:\n    - application/json\nproduces:\n    - application/json", "parameters": [{"description": "", "required": true, "type": "string", "name": "token", "in": "path"}], "tags": ["api3"], "summary": "Get shared upload link detail", "operationId": "api3_u_d_read", "responses": {"200": {"description": ""}}}, "post": {"description": "Get shared upload link detail\n---\n# YAML\n\ntype:\n  token:\n    required: true\n    type: string\n  password:\n    required: false\n    type: string\n  email:\n    required: false\n    type: string\n  code:\n    required: false\n    type: string\n\nparameters:\n    - name: token\n      required: true\n      type: string\n      paramType: path\n    - name: password\n      required: false\n      type: string\n      paramType: form\n    - name: email\n      required: false\n      type: string\n      paramType: form\n    - name: code\n      required: false\n      type: string\n      paramType: form\n\nresponseMessages:\n    - code: 400\n      message: BAD_REQUEST\n    - code: 401\n      message: UNAUTHORIZED\n    - code: 403\n      message: FORBIDDEN\n    - code: 404\n      message: NOT_FOUND\n    - code: 500\n      message: INTERNAL_SERVER_ERROR\n\nconsumes:\n    - application/json\nproduces:\n    - application/json", "parameters": [{"description": "", "required": true, "type": "string", "name": "token", "in": "path"}], "tags": ["api3"], "summary": "Get shared upload link detail", "operationId": "api3_u_d_create", "responses": {"201": {"description": ""}}}}, "/api3/u/d/{token}/upload/": {"get": {"description": "Get file upload url in dir upload link.\n\nArguments:\n- `request`:\n- `token`:\n\n---\n# YAML\n\ntype:\n  token:\n    required: true\n    type: string\n  repo_id:\n    required: true\n    type: string\n\nparameters:\n    - name: token\n      required: true\n      type: string\n      paramType: path\n    - name: repo_id\n      required: true\n      type: string\n      paramType: query\n\nresponseMessages:\n    - code: 400\n      message: BAD_REQUEST\n    - code: 401\n      message: UNAUTHORIZED\n    - code: 403\n      message: FORBIDDEN\n    - code: 500\n      message: INTERNAL_SERVER_ERROR\n\nconsumes:\n    - application/json\nproduces:\n    - application/json", "parameters": [{"description": "", "required": true, "type": "string", "name": "token", "in": "path"}], "tags": ["api3"], "summary": "Get file upload url in dir upload link.", "operationId": "api3_u_d_upload_list", "responses": {"200": {"description": ""}}}}, "/api3/unenc-rw-repos/": {"get": {"description": "Get a user's unencrypt repos that he/she can read-write.\n---\n# YAML\n\ntype:\n  Authorization:\n    required: true\n    type: string\n\nparameters:\n    - name: Authorization\n      required: true\n      type: string\n      paramType: header\n\nresponseMessages:\n    - code: 401\n      message: UNAUTHORIZED\n    - code: 500\n      message: INTERNAL_SERVER_ERROR\n\nconsumes:\n    - application/json\nproduces:\n    - application/json", "parameters": [], "tags": ["api3"], "summary": "Get a user's unencrypt repos that he/she can read-write.", "operationId": "api3_unenc-rw-repos_list", "responses": {"200": {"description": ""}}}}, "/api3/upload-links/": {"get": {"description": "Get all upload links of a user.\n\nPermission checking:\n1. default(NOT guest) user;\n\n---\n# YAML\n\ntype:\n  Authorization:\n    required: true\n    type: string\n  repo_id:\n    required: false\n    type: string\n  path:\n    required: false\n    type: string\n\nparameters:\n    - name: Authorization\n      required: true\n      type: string\n      paramType: header\n    - name: repo_id\n      required: false\n      type: string\n      paramType: query\n    - name: path\n      required: false\n      type: string\n      paramType: query\n\nresponseMessages:\n    - code: 401\n      message: UNAUTHORIZED\n    - code: 404\n      message: NOT_FOUND\n    - code: 500\n      message: INTERNAL_SERVER_ERROR\n\nconsumes:\n    - application/json\nproduces:\n    - application/json", "parameters": [], "tags": ["api3"], "summary": "Get all upload links of a user.", "operationId": "api3_upload-links_list", "responses": {"200": {"description": ""}}}, "post": {"description": "Create upload link.\n\nPermission checking:\n1. default(NOT guest) user;\n2. user with 'rw' permission;\n\n---\n# YAML\n\ntype:\n  Authorization:\n    required: true\n    type: string\n  repo_id:\n    required: true\n    type: string\n  path:\n    required: false\n    type: string\n  password:\n    required: false\n    type: string\n\nparameters:\n    - name: Authorization\n      required: true\n      type: string\n      paramType: header\n    - name: repo_id\n      required: true\n      type: string\n      paramType: form\n    - name: path\n      required: false\n      type: string\n      paramType: form\n    - name: password\n      required: false\n      type: string\n      paramType: form\n\nresponseMessages:\n    - code: 400\n      message: BAD_REQUEST\n    - code: 401\n      message: UNAUTHORIZED\n    - code: 403\n      message: FORBIDDEN\n    - code: 404\n      message: NOT_FOUND\n    - code: 500\n      message: INTERNAL_SERVER_ERROR\n\nconsumes:\n    - application/json\nproduces:\n    - application/json", "parameters": [], "tags": ["api3"], "summary": "Create upload link.", "operationId": "api3_upload-links_create", "responses": {"201": {"description": ""}}}}, "/api3/upload-links/{token}/": {"get": {"description": "Get upload link info.\n\nPermission checking:\n1. default(NOT guest) user;\n\n---\n# YAML\n\ntype:\n  Authorization:\n    required: true\n    type: string\n  token:\n    required: true\n    type: string\n\nparameters:\n    - name: Authorization\n      required: true\n      type: string\n      paramType: header\n    - name: token\n      required: true\n      type: string\n      paramType: path\n\nresponseMessages:\n    - code: 401\n      message: UNAUTHORIZED\n    - code: 404\n      message: NOT_FOUND\n    - code: 500\n      message: INTERNAL_SERVER_ERROR\n\nconsumes:\n    - application/json\nproduces:\n    - application/json", "parameters": [{"description": "", "required": true, "type": "string", "name": "token", "in": "path"}], "tags": ["api3"], "summary": "Get upload link info.", "operationId": "api3_upload-links_read", "responses": {"200": {"description": ""}}}, "delete": {"description": "Delete upload link.\n\nPermission checking:\n1. default(NOT guest) user;\n2. link owner;\n\n---\n# YAML\n\ntype:\n  Authorization:\n    required: true\n    type: string\n  token:\n    required: true\n    type: string\n\nparameters:\n    - name: Authorization\n      required: true\n      type: string\n      paramType: header\n    - name: token\n      required: true\n      type: string\n      paramType: path\n\nresponseMessages:\n    - code: 401\n      message: UNAUTHORIZED\n    - code: 403\n      message: FORBIDDEN\n    - code: 500\n      message: INTERNAL_SERVER_ERROR\n\nconsumes:\n    - application/json\nproduces:\n    - application/json", "parameters": [{"description": "", "required": true, "type": "string", "name": "token", "in": "path"}], "tags": ["api3"], "summary": "Delete upload link.", "operationId": "api3_upload-links_delete", "responses": {"204": {"description": ""}}}}, "/api3/user/profile/{email}/": {"get": {"description": "Get profile detail by specific User's email\n---\n# YAML\n\ntype:\n  Authorization:\n    required: true\n    type: string\n  email:\n    required: true\n    type: string\n\nparameters:\n    - name: Authorization\n      required: true\n      type: string\n      paramType: header\n    - name: email\n      description: User email\n      required: true\n      type: string\n      paramType: path\n\nresponseMessages:\n    - code: 400\n      message: BAD_REQUEST\n    - code: 401\n      message: UNAUTHORIZED\n    - code: 404\n      message: NOT_FOUND\n    - code: 500\n      message: INTERNAL_SERVER_ERROR\n\nconsumes:\n    - application/json\nproduces:\n    - application/json", "parameters": [{"description": "", "required": true, "type": "string", "name": "email", "in": "path"}], "tags": ["api3"], "summary": "Get profile detail by specific User's email", "operationId": "api3_user_profile_read", "responses": {"200": {"description": ""}}}}}, "securityDefinitions": {"basic": {"type": "basic"}}}